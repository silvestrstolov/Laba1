
laba1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08009c50  08009c50  00019c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a154  0800a154  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a154  0800a154  0001a154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a15c  0800a15c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a15c  0800a15c  0001a15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a160  0800a160  0001a160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e4  0800a348  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  0800a348  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ab2  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000288b  00000000  00000000  00032cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00035558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  000363b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001926e  00000000  00000000  00037100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e70  00000000  00000000  0005036e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b5fd  00000000  00000000  000621de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd7db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  000fd830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c38 	.word	0x08009c38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009c38 	.word	0x08009c38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_ADC1_Init+0x98>)
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <MX_ADC1_Init+0x9c>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_ADC1_Init+0x98>)
 8001016:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_ADC1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_ADC1_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_ADC1_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_ADC1_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_ADC1_Init+0x98>)
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <MX_ADC1_Init+0xa0>)
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_ADC1_Init+0x98>)
 800104a:	2201      	movs	r2, #1
 800104c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_ADC1_Init+0x98>)
 8001058:	2201      	movs	r2, #1
 800105a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_ADC1_Init+0x98>)
 800105e:	f000 fe9d 	bl	8001d9c <HAL_ADC_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001068:	f000 fbb4 	bl	80017d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_ADC1_Init+0xa4>)
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001070:	2301      	movs	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_ADC1_Init+0x98>)
 800107e:	f001 f851 	bl	8002124 <HAL_ADC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001088:	f000 fba4 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000220 	.word	0x20000220
 8001098:	40012000 	.word	0x40012000
 800109c:	0f000001 	.word	0x0f000001
 80010a0:	10000012 	.word	0x10000012

080010a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <HAL_ADC_MspInit+0x3c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10d      	bne.n	80010d2 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_ADC_MspInit+0x40>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <HAL_ADC_MspInit+0x40>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_ADC_MspInit+0x40>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40012000 	.word	0x40012000
 80010e4:	40023800 	.word	0x40023800

080010e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_DMA_Init+0x3c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <MX_DMA_Init+0x3c>)
 80010f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_DMA_Init+0x3c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2010      	movs	r0, #16
 8001110:	f001 faee 	bl	80026f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001114:	2010      	movs	r0, #16
 8001116:	f001 fb07 	bl	8002728 <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_GPIO_Init+0xb4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a25      	ldr	r2, [pc, #148]	; (80011dc <MX_GPIO_Init+0xb4>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_GPIO_Init+0xb4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_GPIO_Init+0xb4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <MX_GPIO_Init+0xb4>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_GPIO_Init+0xb4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_GPIO_Init+0xb4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a17      	ldr	r2, [pc, #92]	; (80011dc <MX_GPIO_Init+0xb4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_GPIO_Init+0xb4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2160      	movs	r1, #96	; 0x60
 8001196:	4812      	ldr	r0, [pc, #72]	; (80011e0 <MX_GPIO_Init+0xb8>)
 8001198:	f002 f85a 	bl	8003250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800119c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_GPIO_Init+0xbc>)
 80011b2:	f001 fec9 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80011b6:	2360      	movs	r3, #96	; 0x60
 80011b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_GPIO_Init+0xb8>)
 80011ce:	f001 febb 	bl	8002f48 <HAL_GPIO_Init>

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020800 	.word	0x40020800

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b096      	sub	sp, #88	; 0x58
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f000 fd6f 	bl	8001cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 fa75 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f7ff ff97 	bl	8001128 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fa:	f7ff ff75 	bl	80010e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011fe:	f000 fc91 	bl	8001b24 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001202:	f7ff fefb 	bl	8000ffc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001206:	4b8a      	ldr	r3, [pc, #552]	; (8001430 <main+0x248>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	4b88      	ldr	r3, [pc, #544]	; (8001430 <main+0x248>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0210 	orr.w	r2, r2, #16
 8001214:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart2, Receive_buff, Buff_Size - 1);
 8001216:	22ff      	movs	r2, #255	; 0xff
 8001218:	4986      	ldr	r1, [pc, #536]	; (8001434 <main+0x24c>)
 800121a:	4885      	ldr	r0, [pc, #532]	; (8001430 <main+0x248>)
 800121c:	f003 f837 	bl	800428e <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (UART_Message)
 8001220:	4b85      	ldr	r3, [pc, #532]	; (8001438 <main+0x250>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 8205 	beq.w	8001634 <main+0x44c>
	  		{
	  			uint8_t str_len = Buff_Size - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800122a:	4b84      	ldr	r3, [pc, #528]	; (800143c <main+0x254>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	425b      	negs	r3, r3
 8001234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  			HAL_UART_Receive_DMA(&huart2, Receive_buff, Buff_Size - 1);
 8001238:	22ff      	movs	r2, #255	; 0xff
 800123a:	497e      	ldr	r1, [pc, #504]	; (8001434 <main+0x24c>)
 800123c:	487c      	ldr	r0, [pc, #496]	; (8001430 <main+0x248>)
 800123e:	f003 f826 	bl	800428e <HAL_UART_Receive_DMA>
	  			memset(Receive_buff + str_len - 1, 0, Buff_Size - str_len);
 8001242:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001246:	3b01      	subs	r3, #1
 8001248:	4a7a      	ldr	r2, [pc, #488]	; (8001434 <main+0x24c>)
 800124a:	1898      	adds	r0, r3, r2
 800124c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001250:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001254:	461a      	mov	r2, r3
 8001256:	2100      	movs	r1, #0
 8001258:	f004 f8c0 	bl	80053dc <memset>
	  			UART_Message = 0;
 800125c:	4b76      	ldr	r3, [pc, #472]	; (8001438 <main+0x250>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
	  			if ((Receive_buff[0] == 't' || Receive_buff[0] == 'T')
 8001262:	4b74      	ldr	r3, [pc, #464]	; (8001434 <main+0x24c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b74      	cmp	r3, #116	; 0x74
 8001268:	d003      	beq.n	8001272 <main+0x8a>
 800126a:	4b72      	ldr	r3, [pc, #456]	; (8001434 <main+0x24c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b54      	cmp	r3, #84	; 0x54
 8001270:	d175      	bne.n	800135e <main+0x176>
	  					&& Receive_buff[1] == ' '
 8001272:	4b70      	ldr	r3, [pc, #448]	; (8001434 <main+0x24c>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	2b20      	cmp	r3, #32
 8001278:	d171      	bne.n	800135e <main+0x176>
	  					&& (Receive_buff[2] == 'm' || Receive_buff[2] == 'M')
 800127a:	4b6e      	ldr	r3, [pc, #440]	; (8001434 <main+0x24c>)
 800127c:	789b      	ldrb	r3, [r3, #2]
 800127e:	2b6d      	cmp	r3, #109	; 0x6d
 8001280:	d003      	beq.n	800128a <main+0xa2>
 8001282:	4b6c      	ldr	r3, [pc, #432]	; (8001434 <main+0x24c>)
 8001284:	789b      	ldrb	r3, [r3, #2]
 8001286:	2b4d      	cmp	r3, #77	; 0x4d
 8001288:	d169      	bne.n	800135e <main+0x176>
	  					&& (Receive_buff[3] == 'c' || Receive_buff[3] == 'C')
 800128a:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <main+0x24c>)
 800128c:	78db      	ldrb	r3, [r3, #3]
 800128e:	2b63      	cmp	r3, #99	; 0x63
 8001290:	d003      	beq.n	800129a <main+0xb2>
 8001292:	4b68      	ldr	r3, [pc, #416]	; (8001434 <main+0x24c>)
 8001294:	78db      	ldrb	r3, [r3, #3]
 8001296:	2b43      	cmp	r3, #67	; 0x43
 8001298:	d161      	bne.n	800135e <main+0x176>
	  					&& (Receive_buff[4] == 'u' || Receive_buff[4] == 'U')
 800129a:	4b66      	ldr	r3, [pc, #408]	; (8001434 <main+0x24c>)
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	2b75      	cmp	r3, #117	; 0x75
 80012a0:	d003      	beq.n	80012aa <main+0xc2>
 80012a2:	4b64      	ldr	r3, [pc, #400]	; (8001434 <main+0x24c>)
 80012a4:	791b      	ldrb	r3, [r3, #4]
 80012a6:	2b55      	cmp	r3, #85	; 0x55
 80012a8:	d159      	bne.n	800135e <main+0x176>
	  					&& Receive_buff[5] == '?')
 80012aa:	4b62      	ldr	r3, [pc, #392]	; (8001434 <main+0x24c>)
 80012ac:	795b      	ldrb	r3, [r3, #5]
 80012ae:	2b3f      	cmp	r3, #63	; 0x3f
 80012b0:	d155      	bne.n	800135e <main+0x176>
	  			{

	  				sConfig.Channel = ADC_CHANNEL_16;
 80012b2:	4b63      	ldr	r3, [pc, #396]	; (8001440 <main+0x258>)
 80012b4:	2210      	movs	r2, #16
 80012b6:	601a      	str	r2, [r3, #0]
	  				sConfig.Rank = 1;
 80012b8:	4b61      	ldr	r3, [pc, #388]	; (8001440 <main+0x258>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	605a      	str	r2, [r3, #4]
	  				sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012be:	4b60      	ldr	r3, [pc, #384]	; (8001440 <main+0x258>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
	  				HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80012c4:	495e      	ldr	r1, [pc, #376]	; (8001440 <main+0x258>)
 80012c6:	485f      	ldr	r0, [pc, #380]	; (8001444 <main+0x25c>)
 80012c8:	f000 ff2c 	bl	8002124 <HAL_ADC_ConfigChannel>


	  				HAL_ADC_Start(&hadc1);
 80012cc:	485d      	ldr	r0, [pc, #372]	; (8001444 <main+0x25c>)
 80012ce:	f000 fda9 	bl	8001e24 <HAL_ADC_Start>
	  				HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);
 80012d2:	f04f 31ff 	mov.w	r1, #4294967295
 80012d6:	485b      	ldr	r0, [pc, #364]	; (8001444 <main+0x25c>)
 80012d8:	f000 fe8b 	bl	8001ff2 <HAL_ADC_PollForConversion>
	  				uint16_t val = HAL_ADC_GetValue(&hadc1);
 80012dc:	4859      	ldr	r0, [pc, #356]	; (8001444 <main+0x25c>)
 80012de:	f000 ff13 	bl	8002108 <HAL_ADC_GetValue>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  				float temp;
	  				temp = (float) val / 4096 * 3.3f;
 80012e8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f4:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001448 <main+0x260>
 80012f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fc:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800144c <main+0x264>
 8001300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001304:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	  				temp = (1.43f - temp) / 4.3f + 25;
 8001308:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001450 <main+0x268>
 800130c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001310:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001314:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001454 <main+0x26c>
 8001318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001320:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001324:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	  				HAL_ADC_Stop(&hadc1);
 8001328:	4846      	ldr	r0, [pc, #280]	; (8001444 <main+0x25c>)
 800132a:	f000 fe2f 	bl	8001f8c <HAL_ADC_Stop>
	  				char responseTemp[10];
	  				sprintf(responseTemp, "T MCU=%dC", (int) temp);
 800132e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133a:	ee17 2a90 	vmov	r2, s15
 800133e:	4946      	ldr	r1, [pc, #280]	; (8001458 <main+0x270>)
 8001340:	4618      	mov	r0, r3
 8001342:	f004 fed3 	bl	80060ec <siprintf>
	  				responseTemp[9] = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  				HAL_UART_Transmit(&huart2, (uint8_t*) responseTemp, 10, 0xFFFFFFFF);
 800134c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
 8001354:	220a      	movs	r2, #10
 8001356:	4836      	ldr	r0, [pc, #216]	; (8001430 <main+0x248>)
 8001358:	f002 ff07 	bl	800416a <HAL_UART_Transmit>
	  			{
 800135c:	e16a      	b.n	8001634 <main+0x44c>
	  			}
	  			else if ((Receive_buff[0] == 'v' || Receive_buff[0] == 'V')
 800135e:	4b35      	ldr	r3, [pc, #212]	; (8001434 <main+0x24c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b76      	cmp	r3, #118	; 0x76
 8001364:	d003      	beq.n	800136e <main+0x186>
 8001366:	4b33      	ldr	r3, [pc, #204]	; (8001434 <main+0x24c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b56      	cmp	r3, #86	; 0x56
 800136c:	d17a      	bne.n	8001464 <main+0x27c>
	  					&& Receive_buff[1] == ' '
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <main+0x24c>)
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	2b20      	cmp	r3, #32
 8001374:	d176      	bne.n	8001464 <main+0x27c>
	  					&& (Receive_buff[2] == 'r' || Receive_buff[2] == 'R')
 8001376:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <main+0x24c>)
 8001378:	789b      	ldrb	r3, [r3, #2]
 800137a:	2b72      	cmp	r3, #114	; 0x72
 800137c:	d003      	beq.n	8001386 <main+0x19e>
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <main+0x24c>)
 8001380:	789b      	ldrb	r3, [r3, #2]
 8001382:	2b52      	cmp	r3, #82	; 0x52
 8001384:	d16e      	bne.n	8001464 <main+0x27c>
	  					&& (Receive_buff[3] == 'e' || Receive_buff[3] == 'E')
 8001386:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <main+0x24c>)
 8001388:	78db      	ldrb	r3, [r3, #3]
 800138a:	2b65      	cmp	r3, #101	; 0x65
 800138c:	d003      	beq.n	8001396 <main+0x1ae>
 800138e:	4b29      	ldr	r3, [pc, #164]	; (8001434 <main+0x24c>)
 8001390:	78db      	ldrb	r3, [r3, #3]
 8001392:	2b45      	cmp	r3, #69	; 0x45
 8001394:	d166      	bne.n	8001464 <main+0x27c>
	  					&& (Receive_buff[4] == 'f' || Receive_buff[4] == 'F')
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <main+0x24c>)
 8001398:	791b      	ldrb	r3, [r3, #4]
 800139a:	2b66      	cmp	r3, #102	; 0x66
 800139c:	d003      	beq.n	80013a6 <main+0x1be>
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <main+0x24c>)
 80013a0:	791b      	ldrb	r3, [r3, #4]
 80013a2:	2b46      	cmp	r3, #70	; 0x46
 80013a4:	d15e      	bne.n	8001464 <main+0x27c>
	  					&& Receive_buff[5] == '?')
 80013a6:	4b23      	ldr	r3, [pc, #140]	; (8001434 <main+0x24c>)
 80013a8:	795b      	ldrb	r3, [r3, #5]
 80013aa:	2b3f      	cmp	r3, #63	; 0x3f
 80013ac:	d15a      	bne.n	8001464 <main+0x27c>
	  			{
	  				sConfig.Channel = ADC_CHANNEL_VREFINT;
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <main+0x258>)
 80013b0:	2211      	movs	r2, #17
 80013b2:	601a      	str	r2, [r3, #0]
	  				sConfig.Rank = 1;
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <main+0x258>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	605a      	str	r2, [r3, #4]
	  				sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <main+0x258>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
	  				HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80013c0:	491f      	ldr	r1, [pc, #124]	; (8001440 <main+0x258>)
 80013c2:	4820      	ldr	r0, [pc, #128]	; (8001444 <main+0x25c>)
 80013c4:	f000 feae 	bl	8002124 <HAL_ADC_ConfigChannel>


	  				HAL_ADC_Start(&hadc1);
 80013c8:	481e      	ldr	r0, [pc, #120]	; (8001444 <main+0x25c>)
 80013ca:	f000 fd2b 	bl	8001e24 <HAL_ADC_Start>
	  				HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);
 80013ce:	f04f 31ff 	mov.w	r1, #4294967295
 80013d2:	481c      	ldr	r0, [pc, #112]	; (8001444 <main+0x25c>)
 80013d4:	f000 fe0d 	bl	8001ff2 <HAL_ADC_PollForConversion>
	  				uint16_t val = HAL_ADC_GetValue(&hadc1);
 80013d8:	481a      	ldr	r0, [pc, #104]	; (8001444 <main+0x25c>)
 80013da:	f000 fe95 	bl	8002108 <HAL_ADC_GetValue>
 80013de:	4603      	mov	r3, r0
 80013e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  				float vref = 1.2f * 4096.0f / val;
 80013e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800145c <main+0x274>
 80013f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	  				HAL_ADC_Stop(&hadc1);
 80013fc:	4811      	ldr	r0, [pc, #68]	; (8001444 <main+0x25c>)
 80013fe:	f000 fdc5 	bl	8001f8c <HAL_ADC_Stop>
	  				char responseV[13];
	  				responseV[12] = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  				sprintf(responseV, "V REF=%.2f V", vref);
 8001408:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800140a:	f7ff f8a5 	bl	8000558 <__aeabi_f2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	f107 001c 	add.w	r0, r7, #28
 8001416:	4912      	ldr	r1, [pc, #72]	; (8001460 <main+0x278>)
 8001418:	f004 fe68 	bl	80060ec <siprintf>
	  				HAL_UART_Transmit(&huart2, (uint8_t*) responseV, 13, 0xFFFFFFFF);
 800141c:	f107 011c 	add.w	r1, r7, #28
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	220d      	movs	r2, #13
 8001426:	4802      	ldr	r0, [pc, #8]	; (8001430 <main+0x248>)
 8001428:	f002 fe9f 	bl	800416a <HAL_UART_Transmit>
	  			{
 800142c:	e102      	b.n	8001634 <main+0x44c>
 800142e:	bf00      	nop
 8001430:	20000410 	.word	0x20000410
 8001434:	20000268 	.word	0x20000268
 8001438:	20000200 	.word	0x20000200
 800143c:	200003b0 	.word	0x200003b0
 8001440:	20000204 	.word	0x20000204
 8001444:	20000220 	.word	0x20000220
 8001448:	45800000 	.word	0x45800000
 800144c:	40533333 	.word	0x40533333
 8001450:	3fb70a3d 	.word	0x3fb70a3d
 8001454:	4089999a 	.word	0x4089999a
 8001458:	08009c50 	.word	0x08009c50
 800145c:	4599999a 	.word	0x4599999a
 8001460:	08009c5c 	.word	0x08009c5c
	  			}
	  			else if ((Receive_buff[0] == 'a' || Receive_buff[0] == 'A')
 8001464:	4b90      	ldr	r3, [pc, #576]	; (80016a8 <main+0x4c0>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b61      	cmp	r3, #97	; 0x61
 800146a:	d004      	beq.n	8001476 <main+0x28e>
 800146c:	4b8e      	ldr	r3, [pc, #568]	; (80016a8 <main+0x4c0>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b41      	cmp	r3, #65	; 0x41
 8001472:	f040 80d8 	bne.w	8001626 <main+0x43e>
	  					&& (Receive_buff[1] == 'l' || Receive_buff[1] == 'L')
 8001476:	4b8c      	ldr	r3, [pc, #560]	; (80016a8 <main+0x4c0>)
 8001478:	785b      	ldrb	r3, [r3, #1]
 800147a:	2b6c      	cmp	r3, #108	; 0x6c
 800147c:	d004      	beq.n	8001488 <main+0x2a0>
 800147e:	4b8a      	ldr	r3, [pc, #552]	; (80016a8 <main+0x4c0>)
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	2b4c      	cmp	r3, #76	; 0x4c
 8001484:	f040 80cf 	bne.w	8001626 <main+0x43e>
	  					&& (Receive_buff[2] == 'l' || Receive_buff[2] == 'L')
 8001488:	4b87      	ldr	r3, [pc, #540]	; (80016a8 <main+0x4c0>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	2b6c      	cmp	r3, #108	; 0x6c
 800148e:	d004      	beq.n	800149a <main+0x2b2>
 8001490:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <main+0x4c0>)
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	2b4c      	cmp	r3, #76	; 0x4c
 8001496:	f040 80c6 	bne.w	8001626 <main+0x43e>
	  					&& Receive_buff[3] == ' '
 800149a:	4b83      	ldr	r3, [pc, #524]	; (80016a8 <main+0x4c0>)
 800149c:	78db      	ldrb	r3, [r3, #3]
 800149e:	2b20      	cmp	r3, #32
 80014a0:	f040 80c1 	bne.w	8001626 <main+0x43e>
	  					&& (Receive_buff[4] == 's' || Receive_buff[4] == 'S')
 80014a4:	4b80      	ldr	r3, [pc, #512]	; (80016a8 <main+0x4c0>)
 80014a6:	791b      	ldrb	r3, [r3, #4]
 80014a8:	2b73      	cmp	r3, #115	; 0x73
 80014aa:	d004      	beq.n	80014b6 <main+0x2ce>
 80014ac:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <main+0x4c0>)
 80014ae:	791b      	ldrb	r3, [r3, #4]
 80014b0:	2b53      	cmp	r3, #83	; 0x53
 80014b2:	f040 80b8 	bne.w	8001626 <main+0x43e>
	  					&& (Receive_buff[5] == 'e' || Receive_buff[5] == 'E')
 80014b6:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <main+0x4c0>)
 80014b8:	795b      	ldrb	r3, [r3, #5]
 80014ba:	2b65      	cmp	r3, #101	; 0x65
 80014bc:	d004      	beq.n	80014c8 <main+0x2e0>
 80014be:	4b7a      	ldr	r3, [pc, #488]	; (80016a8 <main+0x4c0>)
 80014c0:	795b      	ldrb	r3, [r3, #5]
 80014c2:	2b45      	cmp	r3, #69	; 0x45
 80014c4:	f040 80af 	bne.w	8001626 <main+0x43e>
	  					&& (Receive_buff[6] == 'n' || Receive_buff[6] == 'N')
 80014c8:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <main+0x4c0>)
 80014ca:	799b      	ldrb	r3, [r3, #6]
 80014cc:	2b6e      	cmp	r3, #110	; 0x6e
 80014ce:	d004      	beq.n	80014da <main+0x2f2>
 80014d0:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <main+0x4c0>)
 80014d2:	799b      	ldrb	r3, [r3, #6]
 80014d4:	2b4e      	cmp	r3, #78	; 0x4e
 80014d6:	f040 80a6 	bne.w	8001626 <main+0x43e>
	  					&& (Receive_buff[7] == 's' || Receive_buff[7] == 'S')
 80014da:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <main+0x4c0>)
 80014dc:	79db      	ldrb	r3, [r3, #7]
 80014de:	2b73      	cmp	r3, #115	; 0x73
 80014e0:	d004      	beq.n	80014ec <main+0x304>
 80014e2:	4b71      	ldr	r3, [pc, #452]	; (80016a8 <main+0x4c0>)
 80014e4:	79db      	ldrb	r3, [r3, #7]
 80014e6:	2b53      	cmp	r3, #83	; 0x53
 80014e8:	f040 809d 	bne.w	8001626 <main+0x43e>
	  					&& (Receive_buff[8] == 'e' || Receive_buff[8] == 'E')
 80014ec:	4b6e      	ldr	r3, [pc, #440]	; (80016a8 <main+0x4c0>)
 80014ee:	7a1b      	ldrb	r3, [r3, #8]
 80014f0:	2b65      	cmp	r3, #101	; 0x65
 80014f2:	d004      	beq.n	80014fe <main+0x316>
 80014f4:	4b6c      	ldr	r3, [pc, #432]	; (80016a8 <main+0x4c0>)
 80014f6:	7a1b      	ldrb	r3, [r3, #8]
 80014f8:	2b45      	cmp	r3, #69	; 0x45
 80014fa:	f040 8094 	bne.w	8001626 <main+0x43e>
	  					&& Receive_buff[9] == '?')
 80014fe:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <main+0x4c0>)
 8001500:	7a5b      	ldrb	r3, [r3, #9]
 8001502:	2b3f      	cmp	r3, #63	; 0x3f
 8001504:	f040 808f 	bne.w	8001626 <main+0x43e>
	  			{
	  				sConfig.Channel = ADC_CHANNEL_16;
 8001508:	4b68      	ldr	r3, [pc, #416]	; (80016ac <main+0x4c4>)
 800150a:	2210      	movs	r2, #16
 800150c:	601a      	str	r2, [r3, #0]
	  				sConfig.Rank = 1;
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <main+0x4c4>)
 8001510:	2201      	movs	r2, #1
 8001512:	605a      	str	r2, [r3, #4]
	  				sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001514:	4b65      	ldr	r3, [pc, #404]	; (80016ac <main+0x4c4>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
	  				HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800151a:	4964      	ldr	r1, [pc, #400]	; (80016ac <main+0x4c4>)
 800151c:	4864      	ldr	r0, [pc, #400]	; (80016b0 <main+0x4c8>)
 800151e:	f000 fe01 	bl	8002124 <HAL_ADC_ConfigChannel>


	  				HAL_ADC_Start(&hadc1);
 8001522:	4863      	ldr	r0, [pc, #396]	; (80016b0 <main+0x4c8>)
 8001524:	f000 fc7e 	bl	8001e24 <HAL_ADC_Start>
	  				HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	4860      	ldr	r0, [pc, #384]	; (80016b0 <main+0x4c8>)
 800152e:	f000 fd60 	bl	8001ff2 <HAL_ADC_PollForConversion>
	  				uint16_t val = HAL_ADC_GetValue(&hadc1);
 8001532:	485f      	ldr	r0, [pc, #380]	; (80016b0 <main+0x4c8>)
 8001534:	f000 fde8 	bl	8002108 <HAL_ADC_GetValue>
 8001538:	4603      	mov	r3, r0
 800153a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  				float temp;
	  				temp = (float) val / 4096 * 3.3f;
 800153e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800154a:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80016b4 <main+0x4cc>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80016b8 <main+0x4d0>
 8001556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	  				temp = (1.43f - temp) / 4.3f + 25;
 800155e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80016bc <main+0x4d4>
 8001562:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001566:	ee37 7a67 	vsub.f32	s14, s14, s15
 800156a:	eddf 6a55 	vldr	s13, [pc, #340]	; 80016c0 <main+0x4d8>
 800156e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001572:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001576:	ee77 7a87 	vadd.f32	s15, s15, s14
 800157a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	  				HAL_ADC_Stop(&hadc1);
 800157e:	484c      	ldr	r0, [pc, #304]	; (80016b0 <main+0x4c8>)
 8001580:	f000 fd04 	bl	8001f8c <HAL_ADC_Stop>
	  				char responseTemp[10];
	  				sprintf(responseTemp, "T MCU=%dC", (int) temp);
 8001584:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	ee17 2a90 	vmov	r2, s15
 8001594:	494b      	ldr	r1, [pc, #300]	; (80016c4 <main+0x4dc>)
 8001596:	4618      	mov	r0, r3
 8001598:	f004 fda8 	bl	80060ec <siprintf>
	  				responseTemp[9] = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	767b      	strb	r3, [r7, #25]
	  				HAL_UART_Transmit(&huart2, (uint8_t*) responseTemp, 10, 0xFFFFFFFF);
 80015a0:	f107 0110 	add.w	r1, r7, #16
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	220a      	movs	r2, #10
 80015aa:	4847      	ldr	r0, [pc, #284]	; (80016c8 <main+0x4e0>)
 80015ac:	f002 fddd 	bl	800416a <HAL_UART_Transmit>

	  				sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015b0:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <main+0x4c4>)
 80015b2:	2211      	movs	r2, #17
 80015b4:	601a      	str	r2, [r3, #0]
	  				sConfig.Rank = 1;
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <main+0x4c4>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	605a      	str	r2, [r3, #4]
	  				sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015bc:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <main+0x4c4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
	  				HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80015c2:	493a      	ldr	r1, [pc, #232]	; (80016ac <main+0x4c4>)
 80015c4:	483a      	ldr	r0, [pc, #232]	; (80016b0 <main+0x4c8>)
 80015c6:	f000 fdad 	bl	8002124 <HAL_ADC_ConfigChannel>


	  				HAL_ADC_Start(&hadc1);
 80015ca:	4839      	ldr	r0, [pc, #228]	; (80016b0 <main+0x4c8>)
 80015cc:	f000 fc2a 	bl	8001e24 <HAL_ADC_Start>
	  				HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	4836      	ldr	r0, [pc, #216]	; (80016b0 <main+0x4c8>)
 80015d6:	f000 fd0c 	bl	8001ff2 <HAL_ADC_PollForConversion>
	  				uint16_t vVal = HAL_ADC_GetValue(&hadc1);
 80015da:	4835      	ldr	r0, [pc, #212]	; (80016b0 <main+0x4c8>)
 80015dc:	f000 fd94 	bl	8002108 <HAL_ADC_GetValue>
 80015e0:	4603      	mov	r3, r0
 80015e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  				float vref = 1.2f * 4096.0f / vVal;
 80015e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	eddf 6a37 	vldr	s13, [pc, #220]	; 80016cc <main+0x4e4>
 80015f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  				HAL_ADC_Stop(&hadc1);
 80015fa:	482d      	ldr	r0, [pc, #180]	; (80016b0 <main+0x4c8>)
 80015fc:	f000 fcc6 	bl	8001f8c <HAL_ADC_Stop>
	  				char responseV[13];
	  				responseV[12] = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	733b      	strb	r3, [r7, #12]
	  				sprintf(responseV, "V REF=%.2f V", vref);
 8001604:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001606:	f7fe ffa7 	bl	8000558 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4638      	mov	r0, r7
 8001610:	492f      	ldr	r1, [pc, #188]	; (80016d0 <main+0x4e8>)
 8001612:	f004 fd6b 	bl	80060ec <siprintf>
	  				HAL_UART_Transmit(&huart2, (uint8_t*) responseV, 13, 0xFFFFFFFF);
 8001616:	4639      	mov	r1, r7
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	220d      	movs	r2, #13
 800161e:	482a      	ldr	r0, [pc, #168]	; (80016c8 <main+0x4e0>)
 8001620:	f002 fda3 	bl	800416a <HAL_UART_Transmit>
	  			{
 8001624:	e006      	b.n	8001634 <main+0x44c>
	  			}
	  			else
	  			{
	  				HAL_UART_Transmit(&huart2, (uint8_t*) "Wrong command",
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	220d      	movs	r2, #13
 800162c:	4929      	ldr	r1, [pc, #164]	; (80016d4 <main+0x4ec>)
 800162e:	4826      	ldr	r0, [pc, #152]	; (80016c8 <main+0x4e0>)
 8001630:	f002 fd9b 	bl	800416a <HAL_UART_Transmit>
	  						strlen("Wrong command"), 0xFFFFFFFF);
	  			}
	  		}

	  		if (flashing)
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <main+0x4f0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f43f adf1 	beq.w	8001220 <main+0x38>
	  		{
	  			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2120      	movs	r1, #32
 8001642:	4826      	ldr	r0, [pc, #152]	; (80016dc <main+0x4f4>)
 8001644:	f001 fe04 	bl	8003250 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2140      	movs	r1, #64	; 0x40
 800164c:	4823      	ldr	r0, [pc, #140]	; (80016dc <main+0x4f4>)
 800164e:	f001 fdff 	bl	8003250 <HAL_GPIO_WritePin>
	  			HAL_Delay(250);
 8001652:	20fa      	movs	r0, #250	; 0xfa
 8001654:	f000 fb7e 	bl	8001d54 <HAL_Delay>
	  			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	2120      	movs	r1, #32
 800165c:	481f      	ldr	r0, [pc, #124]	; (80016dc <main+0x4f4>)
 800165e:	f001 fdf7 	bl	8003250 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	2140      	movs	r1, #64	; 0x40
 8001666:	481d      	ldr	r0, [pc, #116]	; (80016dc <main+0x4f4>)
 8001668:	f001 fdf2 	bl	8003250 <HAL_GPIO_WritePin>
	  			HAL_Delay(250);
 800166c:	20fa      	movs	r0, #250	; 0xfa
 800166e:	f000 fb71 	bl	8001d54 <HAL_Delay>
	  			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2120      	movs	r1, #32
 8001676:	4819      	ldr	r0, [pc, #100]	; (80016dc <main+0x4f4>)
 8001678:	f001 fdea 	bl	8003250 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	4816      	ldr	r0, [pc, #88]	; (80016dc <main+0x4f4>)
 8001682:	f001 fde5 	bl	8003250 <HAL_GPIO_WritePin>
	  			HAL_Delay(250);
 8001686:	20fa      	movs	r0, #250	; 0xfa
 8001688:	f000 fb64 	bl	8001d54 <HAL_Delay>
	  			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2120      	movs	r1, #32
 8001690:	4812      	ldr	r0, [pc, #72]	; (80016dc <main+0x4f4>)
 8001692:	f001 fddd 	bl	8003250 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2140      	movs	r1, #64	; 0x40
 800169a:	4810      	ldr	r0, [pc, #64]	; (80016dc <main+0x4f4>)
 800169c:	f001 fdd8 	bl	8003250 <HAL_GPIO_WritePin>
	  			HAL_Delay(250);
 80016a0:	20fa      	movs	r0, #250	; 0xfa
 80016a2:	f000 fb57 	bl	8001d54 <HAL_Delay>
	  if (UART_Message)
 80016a6:	e5bb      	b.n	8001220 <main+0x38>
 80016a8:	20000268 	.word	0x20000268
 80016ac:	20000204 	.word	0x20000204
 80016b0:	20000220 	.word	0x20000220
 80016b4:	45800000 	.word	0x45800000
 80016b8:	40533333 	.word	0x40533333
 80016bc:	3fb70a3d 	.word	0x3fb70a3d
 80016c0:	4089999a 	.word	0x4089999a
 80016c4:	08009c50 	.word	0x08009c50
 80016c8:	20000410 	.word	0x20000410
 80016cc:	4599999a 	.word	0x4599999a
 80016d0:	08009c5c 	.word	0x08009c5c
 80016d4:	08009c6c 	.word	0x08009c6c
 80016d8:	20000000 	.word	0x20000000
 80016dc:	40020000 	.word	0x40020000

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	; 0x50
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	2230      	movs	r2, #48	; 0x30
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fe74 	bl	80053dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <SystemClock_Config+0xc8>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <SystemClock_Config+0xc8>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <SystemClock_Config+0xc8>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <SystemClock_Config+0xcc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	; (80017ac <SystemClock_Config+0xcc>)
 800172a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <SystemClock_Config+0xcc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001746:	2302      	movs	r3, #2
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001754:	2354      	movs	r3, #84	; 0x54
 8001756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001758:	2302      	movs	r3, #2
 800175a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800175c:	2304      	movs	r3, #4
 800175e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fd8d 	bl	8003284 <HAL_RCC_OscConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001770:	f000 f830 	bl	80017d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001774:	230f      	movs	r3, #15
 8001776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001778:	2302      	movs	r3, #2
 800177a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	2102      	movs	r1, #2
 8001790:	4618      	mov	r0, r3
 8001792:	f001 ffef 	bl	8003774 <HAL_RCC_ClockConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800179c:	f000 f81a 	bl	80017d4 <Error_Handler>
  }
}
 80017a0:	bf00      	nop
 80017a2:	3750      	adds	r7, #80	; 0x50
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000

080017b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017c2:	f000 faa7 	bl	8001d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010000 	.word	0x40010000

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_MspInit+0x4c>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_MspInit+0x4c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800181e:	2007      	movs	r0, #7
 8001820:	f000 ff5b 	bl	80026da <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800

08001830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	2019      	movs	r0, #25
 8001846:	f000 ff53 	bl	80026f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800184a:	2019      	movs	r0, #25
 800184c:	f000 ff6c 	bl	8002728 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_InitTick+0xa0>)
 8001856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_InitTick+0xa0>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6453      	str	r3, [r2, #68]	; 0x44
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_InitTick+0xa0>)
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800186c:	f107 0210 	add.w	r2, r7, #16
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f002 f978 	bl	8003b6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800187c:	f002 f962 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8001880:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001884:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <HAL_InitTick+0xa4>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0c9b      	lsrs	r3, r3, #18
 800188c:	3b01      	subs	r3, #1
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_InitTick+0xa8>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_InitTick+0xac>)
 8001894:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_InitTick+0xa8>)
 8001898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_InitTick+0xa8>)
 80018a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_InitTick+0xa8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_InitTick+0xa8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <HAL_InitTick+0xa8>)
 80018b2:	f002 f98d 	bl	8003bd0 <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d104      	bne.n	80018c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018bc:	4806      	ldr	r0, [pc, #24]	; (80018d8 <HAL_InitTick+0xa8>)
 80018be:	f002 f9e1 	bl	8003c84 <HAL_TIM_Base_Start_IT>
 80018c2:	4603      	mov	r3, r0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3730      	adds	r7, #48	; 0x30
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	431bde83 	.word	0x431bde83
 80018d8:	20000368 	.word	0x20000368
 80018dc:	40010000 	.word	0x40010000

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <DMA1_Stream5_IRQHandler+0x10>)
 800193e:	f001 f899 	bl	8002a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200003b0 	.word	0x200003b0

0800194c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001952:	f002 f9f9 	bl	8003d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000368 	.word	0x20000368

08001960 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <USART2_IRQHandler+0x10>)
 8001966:	f002 fcc3 	bl	80042f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000410 	.word	0x20000410

08001974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	return 1;
 8001978:	2301      	movs	r3, #1
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_kill>:

int _kill(int pid, int sig)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800198e:	f003 fcfb 	bl	8005388 <__errno>
 8001992:	4603      	mov	r3, r0
 8001994:	2216      	movs	r2, #22
 8001996:	601a      	str	r2, [r3, #0]
	return -1;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_exit>:

void _exit (int status)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffe7 	bl	8001984 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019b6:	e7fe      	b.n	80019b6 <_exit+0x12>

080019b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e00a      	b.n	80019e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ca:	f3af 8000 	nop.w
 80019ce:	4601      	mov	r1, r0
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	b2ca      	uxtb	r2, r1
 80019d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dbf0      	blt.n	80019ca <_read+0x12>
	}

return len;
 80019e8:	687b      	ldr	r3, [r7, #4]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e009      	b.n	8001a18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	60ba      	str	r2, [r7, #8]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbf1      	blt.n	8001a04 <_write+0x12>
	}
	return len;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_close>:

int _close(int file)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
	return -1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a52:	605a      	str	r2, [r3, #4]
	return 0;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_isatty>:

int _isatty(int file)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	return 1;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
	return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f003 fc60 	bl	8005388 <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20020000 	.word	0x20020000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	20000214 	.word	0x20000214
 8001afc:	20000468 	.word	0x20000468

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <MX_USART2_UART_Init+0x50>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b5c:	f002 fab8 	bl	80040d0 <HAL_UART_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b66:	f7ff fe35 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000410 	.word	0x20000410
 8001b74:	40004400 	.word	0x40004400

08001b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <HAL_UART_MspInit+0xf0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d161      	bne.n	8001c5e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a32      	ldr	r2, [pc, #200]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <HAL_UART_MspInit+0xf4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001be2:	2307      	movs	r3, #7
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4820      	ldr	r0, [pc, #128]	; (8001c70 <HAL_UART_MspInit+0xf8>)
 8001bee:	f001 f9ab 	bl	8002f48 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <HAL_UART_MspInit+0x100>)
 8001bf6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bfe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c12:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c32:	4810      	ldr	r0, [pc, #64]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c34:	f000 fd86 	bl	8002744 <HAL_DMA_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001c3e:	f7ff fdc9 	bl	80017d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_UART_MspInit+0xfc>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	2026      	movs	r0, #38	; 0x26
 8001c54:	f000 fd4c 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c58:	2026      	movs	r0, #38	; 0x26
 8001c5a:	f000 fd65 	bl	8002728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	; 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40004400 	.word	0x40004400
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020000 	.word	0x40020000
 8001c74:	200003b0 	.word	0x200003b0
 8001c78:	40026088 	.word	0x40026088

08001c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c82:	490e      	ldr	r1, [pc, #56]	; (8001cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c98:	4c0b      	ldr	r4, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ca6:	f7ff ff2b 	bl	8001b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f003 fb73 	bl	8005394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7ff fa9b 	bl	80011e8 <main>
  bx  lr    
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001cc0:	0800a164 	.word	0x0800a164
  ldr r2, =_sbss
 8001cc4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001cc8:	20000468 	.word	0x20000468

08001ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>
	...

08001cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <HAL_Init+0x40>)
 8001cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <HAL_Init+0x40>)
 8001ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <HAL_Init+0x40>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf8:	2003      	movs	r0, #3
 8001cfa:	f000 fcee 	bl	80026da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fd96 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d04:	f7ff fd6c 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023c00 	.word	0x40023c00

08001d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x20>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_IncTick+0x24>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_IncTick+0x24>)
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	20000454 	.word	0x20000454

08001d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_GetTick+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000454 	.word	0x20000454

08001d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff ffee 	bl	8001d3c <HAL_GetTick>
 8001d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d005      	beq.n	8001d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_Delay+0x44>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7a:	bf00      	nop
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d8f7      	bhi.n	8001d7c <HAL_Delay+0x28>
  {
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000000c 	.word	0x2000000c

08001d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e033      	b.n	8001e1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff f972 	bl	80010a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d118      	bne.n	8001e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001de2:	f023 0302 	bic.w	r3, r3, #2
 8001de6:	f043 0202 	orr.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 faca 	bl	8002388 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0a:	e001      	b.n	8001e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_Start+0x1a>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e097      	b.n	8001f6e <HAL_ADC_Start+0x14a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d018      	beq.n	8001e86 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e64:	4b45      	ldr	r3, [pc, #276]	; (8001f7c <HAL_ADC_Start+0x158>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a45      	ldr	r2, [pc, #276]	; (8001f80 <HAL_ADC_Start+0x15c>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	0c9a      	lsrs	r2, r3, #18
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e78:	e002      	b.n	8001e80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f9      	bne.n	8001e7a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d15f      	bne.n	8001f54 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ebe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed2:	d106      	bne.n	8001ee2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	f023 0206 	bic.w	r2, r3, #6
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
 8001ee0:	e002      	b.n	8001ee8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_ADC_Start+0x160>)
 8001ef2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001efc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10f      	bne.n	8001f2a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d129      	bne.n	8001f6c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	e020      	b.n	8001f6c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <HAL_ADC_Start+0x164>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d11b      	bne.n	8001f6c <HAL_ADC_Start+0x148>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d114      	bne.n	8001f6c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	e00b      	b.n	8001f6c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f043 0210 	orr.w	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000004 	.word	0x20000004
 8001f80:	431bde83 	.word	0x431bde83
 8001f84:	40012300 	.word	0x40012300
 8001f88:	40012000 	.word	0x40012000

08001f8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_Stop+0x16>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e021      	b.n	8001fe6 <HAL_ADC_Stop+0x5a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200e:	d113      	bne.n	8002038 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800201a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201e:	d10b      	bne.n	8002038 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e063      	b.n	8002100 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002038:	f7ff fe80 	bl	8001d3c <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800203e:	e021      	b.n	8002084 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d01d      	beq.n	8002084 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_ADC_PollForConversion+0x6c>
 800204e:	f7ff fe75 	bl	8001d3c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d212      	bcs.n	8002084 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d00b      	beq.n	8002084 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f043 0204 	orr.w	r2, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e03d      	b.n	8002100 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b02      	cmp	r3, #2
 8002090:	d1d6      	bne.n	8002040 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f06f 0212 	mvn.w	r2, #18
 800209a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d123      	bne.n	80020fe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11f      	bne.n	80020fe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d111      	bne.n	80020fe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f043 0201 	orr.w	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1c>
 800213c:	2302      	movs	r3, #2
 800213e:	e113      	b.n	8002368 <HAL_ADC_ConfigChannel+0x244>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b09      	cmp	r3, #9
 800214e:	d925      	bls.n	800219c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68d9      	ldr	r1, [r3, #12]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	3b1e      	subs	r3, #30
 8002166:	2207      	movs	r2, #7
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43da      	mvns	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	400a      	ands	r2, r1
 8002174:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68d9      	ldr	r1, [r3, #12]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4618      	mov	r0, r3
 8002188:	4603      	mov	r3, r0
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4403      	add	r3, r0
 800218e:	3b1e      	subs	r3, #30
 8002190:	409a      	lsls	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	e022      	b.n	80021e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6919      	ldr	r1, [r3, #16]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	2207      	movs	r2, #7
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6919      	ldr	r1, [r3, #16]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4618      	mov	r0, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4403      	add	r3, r0
 80021d8:	409a      	lsls	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d824      	bhi.n	8002234 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	3b05      	subs	r3, #5
 80021fc:	221f      	movs	r2, #31
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	400a      	ands	r2, r1
 800220a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	3b05      	subs	r3, #5
 8002226:	fa00 f203 	lsl.w	r2, r0, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
 8002232:	e04c      	b.n	80022ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d824      	bhi.n	8002286 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b23      	subs	r3, #35	; 0x23
 800224e:	221f      	movs	r2, #31
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43da      	mvns	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	400a      	ands	r2, r1
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	4618      	mov	r0, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b23      	subs	r3, #35	; 0x23
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
 8002284:	e023      	b.n	80022ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	3b41      	subs	r3, #65	; 0x41
 8002298:	221f      	movs	r2, #31
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	400a      	ands	r2, r1
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4618      	mov	r0, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	3b41      	subs	r3, #65	; 0x41
 80022c2:	fa00 f203 	lsl.w	r2, r0, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_ADC_ConfigChannel+0x250>)
 80022d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a28      	ldr	r2, [pc, #160]	; (8002378 <HAL_ADC_ConfigChannel+0x254>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d10f      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1d8>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d10b      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <HAL_ADC_ConfigChannel+0x254>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d12b      	bne.n	800235e <HAL_ADC_ConfigChannel+0x23a>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1c      	ldr	r2, [pc, #112]	; (800237c <HAL_ADC_ConfigChannel+0x258>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <HAL_ADC_ConfigChannel+0x1f4>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b11      	cmp	r3, #17
 8002316:	d122      	bne.n	800235e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a11      	ldr	r2, [pc, #68]	; (800237c <HAL_ADC_ConfigChannel+0x258>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d111      	bne.n	800235e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_ADC_ConfigChannel+0x25c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_ADC_ConfigChannel+0x260>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	0c9a      	lsrs	r2, r3, #18
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002350:	e002      	b.n	8002358 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40012300 	.word	0x40012300
 8002378:	40012000 	.word	0x40012000
 800237c:	10000012 	.word	0x10000012
 8002380:	20000004 	.word	0x20000004
 8002384:	431bde83 	.word	0x431bde83

08002388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002390:	4b79      	ldr	r3, [pc, #484]	; (8002578 <ADC_Init+0x1f0>)
 8002392:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	021a      	lsls	r2, r3, #8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6899      	ldr	r1, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	4a58      	ldr	r2, [pc, #352]	; (800257c <ADC_Init+0x1f4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d022      	beq.n	8002466 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800242e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6899      	ldr	r1, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	e00f      	b.n	8002486 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002474:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002484:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0202 	bic.w	r2, r2, #2
 8002494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6899      	ldr	r1, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7e1b      	ldrb	r3, [r3, #24]
 80024a0:	005a      	lsls	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01b      	beq.n	80024ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	3b01      	subs	r3, #1
 80024e0:	035a      	lsls	r2, r3, #13
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	e007      	b.n	80024fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	3b01      	subs	r3, #1
 8002518:	051a      	lsls	r2, r3, #20
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6899      	ldr	r1, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800253e:	025a      	lsls	r2, r3, #9
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	029a      	lsls	r2, r3, #10
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	609a      	str	r2, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40012300 	.word	0x40012300
 800257c:	0f000001 	.word	0x0f000001

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ff4c 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002702:	f7ff ff61 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 8002706:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	f7ff ffb1 	bl	8002674 <NVIC_EncodePriority>
 8002712:	4602      	mov	r2, r0
 8002714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff80 	bl	8002620 <__NVIC_SetPriority>
}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff54 	bl	80025e4 <__NVIC_EnableIRQ>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff faf4 	bl	8001d3c <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e099      	b.n	8002894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002780:	e00f      	b.n	80027a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002782:	f7ff fadb 	bl	8001d3c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b05      	cmp	r3, #5
 800278e:	d908      	bls.n	80027a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e078      	b.n	8002894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e8      	bne.n	8002782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4b38      	ldr	r3, [pc, #224]	; (800289c <HAL_DMA_Init+0x158>)
 80027bc:	4013      	ands	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d107      	bne.n	800280c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	4313      	orrs	r3, r2
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f023 0307 	bic.w	r3, r3, #7
 8002822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2b04      	cmp	r3, #4
 8002834:	d117      	bne.n	8002866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00e      	beq.n	8002866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fb01 	bl	8002e50 <DMA_CheckFifoParam>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2240      	movs	r2, #64	; 0x40
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002862:	2301      	movs	r3, #1
 8002864:	e016      	b.n	8002894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fab8 	bl	8002de4 <DMA_CalcBaseAndBitshift>
 8002874:	4603      	mov	r3, r0
 8002876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	223f      	movs	r2, #63	; 0x3f
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	f010803f 	.word	0xf010803f

080028a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Start_IT+0x26>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e040      	b.n	8002948 <HAL_DMA_Start_IT+0xa8>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d12f      	bne.n	800293a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2202      	movs	r2, #2
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fa4a 	bl	8002d88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	223f      	movs	r2, #63	; 0x3f
 80028fa:	409a      	lsls	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0216 	orr.w	r2, r2, #22
 800290e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0208 	orr.w	r2, r2, #8
 8002926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e005      	b.n	8002946 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002942:	2302      	movs	r3, #2
 8002944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800295e:	f7ff f9ed 	bl	8001d3c <HAL_GetTick>
 8002962:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d008      	beq.n	8002982 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e052      	b.n	8002a28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0216 	bic.w	r2, r2, #22
 8002990:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_DMA_Abort+0x62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0208 	bic.w	r2, r2, #8
 80029c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d2:	e013      	b.n	80029fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d4:	f7ff f9b2 	bl	8001d3c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d90c      	bls.n	80029fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2220      	movs	r2, #32
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2203      	movs	r2, #3
 80029ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e015      	b.n	8002a28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1e4      	bne.n	80029d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	223f      	movs	r2, #63	; 0x3f
 8002a10:	409a      	lsls	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d004      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00c      	b.n	8002a68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2205      	movs	r2, #5
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a80:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <HAL_DMA_IRQHandler+0x258>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a92      	ldr	r2, [pc, #584]	; (8002cd0 <HAL_DMA_IRQHandler+0x25c>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0a9b      	lsrs	r3, r3, #10
 8002a8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01a      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0204 	bic.w	r2, r2, #4
 8002ac6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2208      	movs	r2, #8
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	2201      	movs	r2, #1
 8002b04:	409a      	lsls	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d012      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	2204      	movs	r2, #4
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f043 0204 	orr.w	r2, r3, #4
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2210      	movs	r2, #16
 8002b52:	409a      	lsls	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d043      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03c      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	2210      	movs	r2, #16
 8002b70:	409a      	lsls	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d018      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d024      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
 8002ba2:	e01f      	b.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01b      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
 8002bb4:	e016      	b.n	8002be4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0208 	bic.w	r2, r2, #8
 8002bd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	2220      	movs	r2, #32
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 808e 	beq.w	8002d12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8086 	beq.w	8002d12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d136      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0216 	bic.w	r2, r2, #22
 8002c2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x1da>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0208 	bic.w	r2, r2, #8
 8002c5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	223f      	movs	r2, #63	; 0x3f
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d07d      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
        }
        return;
 8002c8a:	e078      	b.n	8002d7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01c      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d108      	bne.n	8002cba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d030      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
 8002cb8:	e02b      	b.n	8002d12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d027      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
 8002cca:	e022      	b.n	8002d12 <HAL_DMA_IRQHandler+0x29e>
 8002ccc:	20000004 	.word	0x20000004
 8002cd0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0210 	bic.w	r2, r2, #16
 8002cf0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d032      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d022      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2205      	movs	r2, #5
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3301      	adds	r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d307      	bcc.n	8002d5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f2      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x2ca>
 8002d58:	e000      	b.n	8002d5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d5a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
 8002d7c:	e000      	b.n	8002d80 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d7e:	bf00      	nop
    }
  }
}
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop

08002d88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002da4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d108      	bne.n	8002dc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dc6:	e007      	b.n	8002dd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3b10      	subs	r3, #16
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <DMA_CalcBaseAndBitshift+0x64>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <DMA_CalcBaseAndBitshift+0x68>)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d909      	bls.n	8002e26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	1d1a      	adds	r2, r3, #4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58
 8002e24:	e007      	b.n	8002e36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e2e:	f023 0303 	bic.w	r3, r3, #3
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	aaaaaaab 	.word	0xaaaaaaab
 8002e4c:	08009c94 	.word	0x08009c94

08002e50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11f      	bne.n	8002eaa <DMA_CheckFifoParam+0x5a>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d856      	bhi.n	8002f1e <DMA_CheckFifoParam+0xce>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <DMA_CheckFifoParam+0x28>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002e89 	.word	0x08002e89
 8002e7c:	08002e9b 	.word	0x08002e9b
 8002e80:	08002e89 	.word	0x08002e89
 8002e84:	08002f1f 	.word	0x08002f1f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d046      	beq.n	8002f22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e98:	e043      	b.n	8002f22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ea2:	d140      	bne.n	8002f26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea8:	e03d      	b.n	8002f26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb2:	d121      	bne.n	8002ef8 <DMA_CheckFifoParam+0xa8>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d837      	bhi.n	8002f2a <DMA_CheckFifoParam+0xda>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <DMA_CheckFifoParam+0x70>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08002ed7 	.word	0x08002ed7
 8002ec8:	08002ed1 	.word	0x08002ed1
 8002ecc:	08002ee9 	.word	0x08002ee9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed4:	e030      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d025      	beq.n	8002f2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee6:	e022      	b.n	8002f2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef0:	d11f      	bne.n	8002f32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ef6:	e01c      	b.n	8002f32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d903      	bls.n	8002f06 <DMA_CheckFifoParam+0xb6>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d003      	beq.n	8002f0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f04:	e018      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0a:	e015      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00e      	beq.n	8002f36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1c:	e00b      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e00a      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;
 8002f22:	bf00      	nop
 8002f24:	e008      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;
 8002f26:	bf00      	nop
 8002f28:	e006      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e004      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e002      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
    }
  } 
  
  return status; 
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop

08002f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e159      	b.n	8003218 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f64:	2201      	movs	r2, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4013      	ands	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	f040 8148 	bne.w	8003212 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d005      	beq.n	8002f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d130      	bne.n	8002ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 0201 	and.w	r2, r3, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b03      	cmp	r3, #3
 8003006:	d017      	beq.n	8003038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d123      	bne.n	800308c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	08da      	lsrs	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3208      	adds	r2, #8
 800304c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	220f      	movs	r2, #15
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	08da      	lsrs	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3208      	adds	r2, #8
 8003086:	69b9      	ldr	r1, [r7, #24]
 8003088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0203 	and.w	r2, r3, #3
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80a2 	beq.w	8003212 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	4b57      	ldr	r3, [pc, #348]	; (8003230 <HAL_GPIO_Init+0x2e8>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a56      	ldr	r2, [pc, #344]	; (8003230 <HAL_GPIO_Init+0x2e8>)
 80030d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b54      	ldr	r3, [pc, #336]	; (8003230 <HAL_GPIO_Init+0x2e8>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ea:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_GPIO_Init+0x2ec>)
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3302      	adds	r3, #2
 80030f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	220f      	movs	r2, #15
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a49      	ldr	r2, [pc, #292]	; (8003238 <HAL_GPIO_Init+0x2f0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d019      	beq.n	800314a <HAL_GPIO_Init+0x202>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a48      	ldr	r2, [pc, #288]	; (800323c <HAL_GPIO_Init+0x2f4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0x1fe>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a47      	ldr	r2, [pc, #284]	; (8003240 <HAL_GPIO_Init+0x2f8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00d      	beq.n	8003142 <HAL_GPIO_Init+0x1fa>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a46      	ldr	r2, [pc, #280]	; (8003244 <HAL_GPIO_Init+0x2fc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0x1f6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a45      	ldr	r2, [pc, #276]	; (8003248 <HAL_GPIO_Init+0x300>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_GPIO_Init+0x1f2>
 8003136:	2304      	movs	r3, #4
 8003138:	e008      	b.n	800314c <HAL_GPIO_Init+0x204>
 800313a:	2307      	movs	r3, #7
 800313c:	e006      	b.n	800314c <HAL_GPIO_Init+0x204>
 800313e:	2303      	movs	r3, #3
 8003140:	e004      	b.n	800314c <HAL_GPIO_Init+0x204>
 8003142:	2302      	movs	r3, #2
 8003144:	e002      	b.n	800314c <HAL_GPIO_Init+0x204>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_GPIO_Init+0x204>
 800314a:	2300      	movs	r3, #0
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	f002 0203 	and.w	r2, r2, #3
 8003152:	0092      	lsls	r2, r2, #2
 8003154:	4093      	lsls	r3, r2
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800315c:	4935      	ldr	r1, [pc, #212]	; (8003234 <HAL_GPIO_Init+0x2ec>)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	089b      	lsrs	r3, r3, #2
 8003162:	3302      	adds	r3, #2
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800316a:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_GPIO_Init+0x304>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800318e:	4a2f      	ldr	r2, [pc, #188]	; (800324c <HAL_GPIO_Init+0x304>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003194:	4b2d      	ldr	r3, [pc, #180]	; (800324c <HAL_GPIO_Init+0x304>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b8:	4a24      	ldr	r2, [pc, #144]	; (800324c <HAL_GPIO_Init+0x304>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031be:	4b23      	ldr	r3, [pc, #140]	; (800324c <HAL_GPIO_Init+0x304>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031e2:	4a1a      	ldr	r2, [pc, #104]	; (800324c <HAL_GPIO_Init+0x304>)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e8:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_GPIO_Init+0x304>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800320c:	4a0f      	ldr	r2, [pc, #60]	; (800324c <HAL_GPIO_Init+0x304>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3301      	adds	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b0f      	cmp	r3, #15
 800321c:	f67f aea2 	bls.w	8002f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3724      	adds	r7, #36	; 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	40013800 	.word	0x40013800
 8003238:	40020000 	.word	0x40020000
 800323c:	40020400 	.word	0x40020400
 8003240:	40020800 	.word	0x40020800
 8003244:	40020c00 	.word	0x40020c00
 8003248:	40021000 	.word	0x40021000
 800324c:	40013c00 	.word	0x40013c00

08003250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
 800325c:	4613      	mov	r3, r2
 800325e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003260:	787b      	ldrb	r3, [r7, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800326c:	e003      	b.n	8003276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e264      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d075      	beq.n	800338e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032a2:	4ba3      	ldr	r3, [pc, #652]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d00c      	beq.n	80032c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ae:	4ba0      	ldr	r3, [pc, #640]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d112      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ba:	4b9d      	ldr	r3, [pc, #628]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c6:	d10b      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	4b99      	ldr	r3, [pc, #612]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d05b      	beq.n	800338c <HAL_RCC_OscConfig+0x108>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d157      	bne.n	800338c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e23f      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d106      	bne.n	80032f8 <HAL_RCC_OscConfig+0x74>
 80032ea:	4b91      	ldr	r3, [pc, #580]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a90      	ldr	r2, [pc, #576]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b8b      	ldr	r3, [pc, #556]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a8a      	ldr	r2, [pc, #552]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b88      	ldr	r3, [pc, #544]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a87      	ldr	r2, [pc, #540]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 800331c:	4b84      	ldr	r3, [pc, #528]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a83      	ldr	r2, [pc, #524]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b81      	ldr	r3, [pc, #516]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a80      	ldr	r2, [pc, #512]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fe fcfe 	bl	8001d3c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe fcfa 	bl	8001d3c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e204      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b76      	ldr	r3, [pc, #472]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0xc0>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe fcea 	bl	8001d3c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fce6 	bl	8001d3c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1f0      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	4b6c      	ldr	r3, [pc, #432]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0xe8>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d063      	beq.n	8003462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800339a:	4b65      	ldr	r3, [pc, #404]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a6:	4b62      	ldr	r3, [pc, #392]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d11c      	bne.n	80033ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b2:	4b5f      	ldr	r3, [pc, #380]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d116      	bne.n	80033ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	4b5c      	ldr	r3, [pc, #368]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_RCC_OscConfig+0x152>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e1c4      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	4b56      	ldr	r3, [pc, #344]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4952      	ldr	r1, [pc, #328]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	e03a      	b.n	8003462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d020      	beq.n	8003436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f4:	4b4f      	ldr	r3, [pc, #316]	; (8003534 <HAL_RCC_OscConfig+0x2b0>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fe fc9f 	bl	8001d3c <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003402:	f7fe fc9b 	bl	8001d3c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e1a5      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003414:	4b46      	ldr	r3, [pc, #280]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003420:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4940      	ldr	r1, [pc, #256]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
 8003434:	e015      	b.n	8003462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003436:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <HAL_RCC_OscConfig+0x2b0>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe fc7e 	bl	8001d3c <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003444:	f7fe fc7a 	bl	8001d3c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e184      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	4b36      	ldr	r3, [pc, #216]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d030      	beq.n	80034d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d016      	beq.n	80034a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003476:	4b30      	ldr	r3, [pc, #192]	; (8003538 <HAL_RCC_OscConfig+0x2b4>)
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fe fc5e 	bl	8001d3c <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003484:	f7fe fc5a 	bl	8001d3c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e164      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003496:	4b26      	ldr	r3, [pc, #152]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x200>
 80034a2:	e015      	b.n	80034d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a4:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCC_OscConfig+0x2b4>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7fe fc47 	bl	8001d3c <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b2:	f7fe fc43 	bl	8001d3c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e14d      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a0 	beq.w	800361e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e2:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a0e      	ldr	r2, [pc, #56]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350a:	2301      	movs	r3, #1
 800350c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_OscConfig+0x2b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d121      	bne.n	800355e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_RCC_OscConfig+0x2b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a07      	ldr	r2, [pc, #28]	; (800353c <HAL_RCC_OscConfig+0x2b8>)
 8003520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003526:	f7fe fc09 	bl	8001d3c <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	e011      	b.n	8003552 <HAL_RCC_OscConfig+0x2ce>
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	42470000 	.word	0x42470000
 8003538:	42470e80 	.word	0x42470e80
 800353c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003540:	f7fe fbfc 	bl	8001d3c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e106      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b85      	ldr	r3, [pc, #532]	; (8003768 <HAL_RCC_OscConfig+0x4e4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d106      	bne.n	8003574 <HAL_RCC_OscConfig+0x2f0>
 8003566:	4b81      	ldr	r3, [pc, #516]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a80      	ldr	r2, [pc, #512]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
 8003572:	e01c      	b.n	80035ae <HAL_RCC_OscConfig+0x32a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b05      	cmp	r3, #5
 800357a:	d10c      	bne.n	8003596 <HAL_RCC_OscConfig+0x312>
 800357c:	4b7b      	ldr	r3, [pc, #492]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a7a      	ldr	r2, [pc, #488]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003582:	f043 0304 	orr.w	r3, r3, #4
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	4b78      	ldr	r3, [pc, #480]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a77      	ldr	r2, [pc, #476]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
 8003594:	e00b      	b.n	80035ae <HAL_RCC_OscConfig+0x32a>
 8003596:	4b75      	ldr	r3, [pc, #468]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a74      	ldr	r2, [pc, #464]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70
 80035a2:	4b72      	ldr	r3, [pc, #456]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	4a71      	ldr	r2, [pc, #452]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d015      	beq.n	80035e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fe fbc1 	bl	8001d3c <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fe fbbd 	bl	8001d3c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0c5      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	4b65      	ldr	r3, [pc, #404]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ee      	beq.n	80035be <HAL_RCC_OscConfig+0x33a>
 80035e0:	e014      	b.n	800360c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e2:	f7fe fbab 	bl	8001d3c <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e8:	e00a      	b.n	8003600 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7fe fba7 	bl	8001d3c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0af      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	4b5a      	ldr	r3, [pc, #360]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ee      	bne.n	80035ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d105      	bne.n	800361e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003612:	4b56      	ldr	r3, [pc, #344]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a55      	ldr	r2, [pc, #340]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 809b 	beq.w	800375e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003628:	4b50      	ldr	r3, [pc, #320]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b08      	cmp	r3, #8
 8003632:	d05c      	beq.n	80036ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d141      	bne.n	80036c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363c:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <HAL_RCC_OscConfig+0x4ec>)
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fe fb7b 	bl	8001d3c <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364a:	f7fe fb77 	bl	8001d3c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e081      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365c:	4b43      	ldr	r3, [pc, #268]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	019b      	lsls	r3, r3, #6
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	3b01      	subs	r3, #1
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	061b      	lsls	r3, r3, #24
 800368c:	4937      	ldr	r1, [pc, #220]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCC_OscConfig+0x4ec>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fb50 	bl	8001d3c <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fb4c 	bl	8001d3c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e056      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x41c>
 80036be:	e04e      	b.n	800375e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_OscConfig+0x4ec>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c6:	f7fe fb39 	bl	8001d3c <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fe fb35 	bl	8001d3c <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e03f      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCC_OscConfig+0x44a>
 80036ec:	e037      	b.n	800375e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e032      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036fa:	4b1c      	ldr	r3, [pc, #112]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d028      	beq.n	800375a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d121      	bne.n	800375a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d11a      	bne.n	800375a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800372a:	4013      	ands	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003730:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	3b01      	subs	r3, #1
 8003744:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d107      	bne.n	800375a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40007000 	.word	0x40007000
 800376c:	40023800 	.word	0x40023800
 8003770:	42470060 	.word	0x42470060

08003774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0cc      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b68      	ldr	r3, [pc, #416]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d90c      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b65      	ldr	r3, [pc, #404]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b63      	ldr	r3, [pc, #396]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0b8      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c8:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a58      	ldr	r2, [pc, #352]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e0:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a52      	ldr	r2, [pc, #328]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b50      	ldr	r3, [pc, #320]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	494d      	ldr	r1, [pc, #308]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d044      	beq.n	8003894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d119      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d003      	beq.n	8003832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382e:	2b03      	cmp	r3, #3
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e06f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e067      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4934      	ldr	r1, [pc, #208]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003864:	f7fe fa6a 	bl	8001d3c <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fe fa66 	bl	8001d3c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e04f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d20c      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e032      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4916      	ldr	r1, [pc, #88]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	490e      	ldr	r1, [pc, #56]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038fa:	f000 f821 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038fe:	4602      	mov	r2, r0
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	490a      	ldr	r1, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	5ccb      	ldrb	r3, [r1, r3]
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a09      	ldr	r2, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x1c8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd ff88 	bl	8001830 <HAL_InitTick>

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023c00 	.word	0x40023c00
 8003930:	40023800 	.word	0x40023800
 8003934:	08009c7c 	.word	0x08009c7c
 8003938:	20000004 	.word	0x20000004
 800393c:	20000008 	.word	0x20000008

08003940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	2300      	movs	r3, #0
 8003952:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003958:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d00d      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x40>
 8003964:	2b08      	cmp	r3, #8
 8003966:	f200 80bd 	bhi.w	8003ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x34>
 800396e:	2b04      	cmp	r3, #4
 8003970:	d003      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x3a>
 8003972:	e0b7      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b61      	ldr	r3, [pc, #388]	; (8003afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003976:	60bb      	str	r3, [r7, #8]
       break;
 8003978:	e0b7      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800397a:	4b61      	ldr	r3, [pc, #388]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800397c:	60bb      	str	r3, [r7, #8]
      break;
 800397e:	e0b4      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003980:	4b5d      	ldr	r3, [pc, #372]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003988:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800398a:	4b5b      	ldr	r3, [pc, #364]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04d      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003996:	4b58      	ldr	r3, [pc, #352]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	099b      	lsrs	r3, r3, #6
 800399c:	461a      	mov	r2, r3
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039a6:	f04f 0100 	mov.w	r1, #0
 80039aa:	ea02 0800 	and.w	r8, r2, r0
 80039ae:	ea03 0901 	and.w	r9, r3, r1
 80039b2:	4640      	mov	r0, r8
 80039b4:	4649      	mov	r1, r9
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	014b      	lsls	r3, r1, #5
 80039c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039c4:	0142      	lsls	r2, r0, #5
 80039c6:	4610      	mov	r0, r2
 80039c8:	4619      	mov	r1, r3
 80039ca:	ebb0 0008 	subs.w	r0, r0, r8
 80039ce:	eb61 0109 	sbc.w	r1, r1, r9
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	018b      	lsls	r3, r1, #6
 80039dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039e0:	0182      	lsls	r2, r0, #6
 80039e2:	1a12      	subs	r2, r2, r0
 80039e4:	eb63 0301 	sbc.w	r3, r3, r1
 80039e8:	f04f 0000 	mov.w	r0, #0
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	00d9      	lsls	r1, r3, #3
 80039f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039f6:	00d0      	lsls	r0, r2, #3
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	eb12 0208 	adds.w	r2, r2, r8
 8003a00:	eb43 0309 	adc.w	r3, r3, r9
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	0259      	lsls	r1, r3, #9
 8003a0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a12:	0250      	lsls	r0, r2, #9
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	f7fd f938 	bl	8000c98 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e04a      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	ea02 0400 	and.w	r4, r2, r0
 8003a4a:	ea03 0501 	and.w	r5, r3, r1
 8003a4e:	4620      	mov	r0, r4
 8003a50:	4629      	mov	r1, r5
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	014b      	lsls	r3, r1, #5
 8003a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a60:	0142      	lsls	r2, r0, #5
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	1b00      	subs	r0, r0, r4
 8003a68:	eb61 0105 	sbc.w	r1, r1, r5
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	018b      	lsls	r3, r1, #6
 8003a76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a7a:	0182      	lsls	r2, r0, #6
 8003a7c:	1a12      	subs	r2, r2, r0
 8003a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	00d9      	lsls	r1, r3, #3
 8003a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a90:	00d0      	lsls	r0, r2, #3
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	1912      	adds	r2, r2, r4
 8003a98:	eb45 0303 	adc.w	r3, r5, r3
 8003a9c:	f04f 0000 	mov.w	r0, #0
 8003aa0:	f04f 0100 	mov.w	r1, #0
 8003aa4:	0299      	lsls	r1, r3, #10
 8003aa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003aaa:	0290      	lsls	r0, r2, #10
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	f7fd f8ec 	bl	8000c98 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	60bb      	str	r3, [r7, #8]
      break;
 8003ae2:	e002      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ae6:	60bb      	str	r3, [r7, #8]
      break;
 8003ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aea:	68bb      	ldr	r3, [r7, #8]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	00f42400 	.word	0x00f42400
 8003b00:	007a1200 	.word	0x007a1200

08003b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000004 	.word	0x20000004

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b20:	f7ff fff0 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0a9b      	lsrs	r3, r3, #10
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	08009c8c 	.word	0x08009c8c

08003b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b48:	f7ff ffdc 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	0b5b      	lsrs	r3, r3, #13
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	08009c8c 	.word	0x08009c8c

08003b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	220f      	movs	r2, #15
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	08db      	lsrs	r3, r3, #3
 8003ba6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_RCC_GetClockConfig+0x60>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0207 	and.w	r2, r3, #7
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40023c00 	.word	0x40023c00

08003bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e041      	b.n	8003c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f839 	bl	8003c6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f000 f9ca 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d001      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e044      	b.n	8003d26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <HAL_TIM_Base_Start_IT+0xb0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d018      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc6:	d013      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1a      	ldr	r2, [pc, #104]	; (8003d38 <HAL_TIM_Base_Start_IT+0xb4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a19      	ldr	r2, [pc, #100]	; (8003d3c <HAL_TIM_Base_Start_IT+0xb8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <HAL_TIM_Base_Start_IT+0xc0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d111      	bne.n	8003d14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d010      	beq.n	8003d24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0201 	orr.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	e007      	b.n	8003d24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40000c00 	.word	0x40000c00
 8003d44:	40014000 	.word	0x40014000

08003d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0202 	mvn.w	r2, #2
 8003d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8ee 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8e0 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8f1 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0204 	mvn.w	r2, #4
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8c4 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8b6 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f8c7 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0208 	mvn.w	r2, #8
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f89a 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f88c 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f89d 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d122      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d11b      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0210 	mvn.w	r2, #16
 8003e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2208      	movs	r2, #8
 8003e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f870 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003e8c:	e005      	b.n	8003e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f862 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f873 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0201 	mvn.w	r2, #1
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd fc72 	bl	80017b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8e2 	bl	80040bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d10e      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d107      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f838 	bl	8003f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d10e      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d107      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0220 	mvn.w	r2, #32
 8003f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f8ac 	bl	80040a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a34      	ldr	r2, [pc, #208]	; (800408c <TIM_Base_SetConfig+0xe4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a31      	ldr	r2, [pc, #196]	; (8004090 <TIM_Base_SetConfig+0xe8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a30      	ldr	r2, [pc, #192]	; (8004094 <TIM_Base_SetConfig+0xec>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a2f      	ldr	r2, [pc, #188]	; (8004098 <TIM_Base_SetConfig+0xf0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a25      	ldr	r2, [pc, #148]	; (800408c <TIM_Base_SetConfig+0xe4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01b      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d017      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <TIM_Base_SetConfig+0xe8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a21      	ldr	r2, [pc, #132]	; (8004094 <TIM_Base_SetConfig+0xec>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00f      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a20      	ldr	r2, [pc, #128]	; (8004098 <TIM_Base_SetConfig+0xf0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1f      	ldr	r2, [pc, #124]	; (800409c <TIM_Base_SetConfig+0xf4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <TIM_Base_SetConfig+0xf8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <TIM_Base_SetConfig+0xfc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a08      	ldr	r2, [pc, #32]	; (800408c <TIM_Base_SetConfig+0xe4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d103      	bne.n	8004078 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	615a      	str	r2, [r3, #20]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40014000 	.word	0x40014000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800

080040a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e03f      	b.n	8004162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd fd3e 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	; 0x24
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 ff6f 	bl	8004ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b08a      	sub	sp, #40	; 0x28
 800416e:	af02      	add	r7, sp, #8
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	d17c      	bne.n	8004284 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_UART_Transmit+0x2c>
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e075      	b.n	8004286 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_UART_Transmit+0x3e>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e06e      	b.n	8004286 <HAL_UART_Transmit+0x11c>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2221      	movs	r2, #33	; 0x21
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041be:	f7fd fdbd 	bl	8001d3c <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	88fa      	ldrh	r2, [r7, #6]
 80041ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d108      	bne.n	80041ec <HAL_UART_Transmit+0x82>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e003      	b.n	80041f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041fc:	e02a      	b.n	8004254 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fc2b 	bl	8004a64 <UART_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e036      	b.n	8004286 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	3302      	adds	r3, #2
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	e007      	b.n	8004246 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1cf      	bne.n	80041fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	2140      	movs	r1, #64	; 0x40
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fbfb 	bl	8004a64 <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e006      	b.n	8004286 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e000      	b.n	8004286 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
  }
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d11d      	bne.n	80042e4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_UART_Receive_DMA+0x26>
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e016      	b.n	80042e6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Receive_DMA+0x38>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e00f      	b.n	80042e6 <HAL_UART_Receive_DMA+0x58>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fc30 	bl	8004b40 <UART_Start_Receive_DMA>
 80042e0:	4603      	mov	r3, r0
 80042e2:	e000      	b.n	80042e6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b0ba      	sub	sp, #232	; 0xe8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800432e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_UART_IRQHandler+0x66>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fd97 	bl	8004e82 <UART_Receive_IT>
      return;
 8004354:	e256      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80de 	beq.w	800451c <HAL_UART_IRQHandler+0x22c>
 8004360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004370:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80d1 	beq.w	800451c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_UART_IRQHandler+0xae>
 8004386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_UART_IRQHandler+0xd2>
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0202 	orr.w	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <HAL_UART_IRQHandler+0xf6>
 80043ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0204 	orr.w	r2, r3, #4
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d011      	beq.n	8004416 <HAL_UART_IRQHandler+0x126>
 80043f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0208 	orr.w	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 81ed 	beq.w	80047fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_UART_IRQHandler+0x14e>
 800442c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fd22 	bl	8004e82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <HAL_UART_IRQHandler+0x17a>
 8004462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d04f      	beq.n	800450a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fc2a 	bl	8004cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447a:	2b40      	cmp	r3, #64	; 0x40
 800447c:	d141      	bne.n	8004502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1d9      	bne.n	800447e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d013      	beq.n	80044fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	4a7d      	ldr	r2, [pc, #500]	; (80046cc <HAL_UART_IRQHandler+0x3dc>)
 80044d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe faa6 	bl	8002a30 <HAL_DMA_Abort_IT>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f4:	4610      	mov	r0, r2
 80044f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e00e      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9a4 	bl	8004848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e00a      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9a0 	bl	8004848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e006      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f99c 	bl	8004848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004516:	e170      	b.n	80047fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	bf00      	nop
    return;
 800451a:	e16e      	b.n	80047fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	2b01      	cmp	r3, #1
 8004522:	f040 814a 	bne.w	80047ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8143 	beq.w	80047ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 813c 	beq.w	80047ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b40      	cmp	r3, #64	; 0x40
 8004564:	f040 80b4 	bne.w	80046d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8140 	beq.w	80047fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004586:	429a      	cmp	r2, r3
 8004588:	f080 8139 	bcs.w	80047fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004592:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	f000 8088 	beq.w	80046b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1d9      	bne.n	80045a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3314      	adds	r3, #20
 80045f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004612:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004616:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800461a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e1      	bne.n	80045ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800463a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3314      	adds	r3, #20
 800464a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800464e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004650:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800465c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e3      	bne.n	800462a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004682:	f023 0310 	bic.w	r3, r3, #16
 8004686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004694:	65ba      	str	r2, [r7, #88]	; 0x58
 8004696:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800469a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e3      	bne.n	8004670 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe f94f 	bl	8002950 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	b29b      	uxth	r3, r3
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f8ca 	bl	800485c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046c8:	e099      	b.n	80047fe <HAL_UART_IRQHandler+0x50e>
 80046ca:	bf00      	nop
 80046cc:	08004d8b 	.word	0x08004d8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d8:	b29b      	uxth	r3, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 808b 	beq.w	8004802 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8086 	beq.w	8004802 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800470c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800471a:	647a      	str	r2, [r7, #68]	; 0x44
 800471c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e3      	bne.n	80046f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	623b      	str	r3, [r7, #32]
   return(result);
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004752:	633a      	str	r2, [r7, #48]	; 0x30
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e3      	bne.n	800472e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	60fb      	str	r3, [r7, #12]
   return(result);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0310 	bic.w	r3, r3, #16
 800478a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004798:	61fa      	str	r2, [r7, #28]
 800479a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	69b9      	ldr	r1, [r7, #24]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	617b      	str	r3, [r7, #20]
   return(result);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e3      	bne.n	8004774 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f852 	bl	800485c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047b8:	e023      	b.n	8004802 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_UART_IRQHandler+0x4ea>
 80047c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 faed 	bl	8004db2 <UART_Transmit_IT>
    return;
 80047d8:	e014      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00e      	beq.n	8004804 <HAL_UART_IRQHandler+0x514>
 80047e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fb2d 	bl	8004e52 <UART_EndTransmit_IT>
    return;
 80047f8:	e004      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
    return;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
      return;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
      return;
 8004802:	bf00      	nop
  }
}
 8004804:	37e8      	adds	r7, #232	; 0xe8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop

0800480c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b09c      	sub	sp, #112	; 0x70
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d172      	bne.n	8004976 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004892:	2200      	movs	r2, #0
 8004894:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	330c      	adds	r3, #12
 800489c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80048b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e5      	bne.n	8004896 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	667b      	str	r3, [r7, #100]	; 0x64
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3314      	adds	r3, #20
 80048e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048ea:	647a      	str	r2, [r7, #68]	; 0x44
 80048ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e5      	bne.n	80048ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3314      	adds	r3, #20
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	623b      	str	r3, [r7, #32]
   return(result);
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004914:	663b      	str	r3, [r7, #96]	; 0x60
 8004916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3314      	adds	r3, #20
 800491c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800491e:	633a      	str	r2, [r7, #48]	; 0x30
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	2b01      	cmp	r3, #1
 8004940:	d119      	bne.n	8004976 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	60fb      	str	r3, [r7, #12]
   return(result);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f023 0310 	bic.w	r3, r3, #16
 8004958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800495a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004962:	61fa      	str	r2, [r7, #28]
 8004964:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	69b9      	ldr	r1, [r7, #24]
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	617b      	str	r3, [r7, #20]
   return(result);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	2b01      	cmp	r3, #1
 800497c:	d106      	bne.n	800498c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004982:	4619      	mov	r1, r3
 8004984:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004986:	f7ff ff69 	bl	800485c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800498a:	e002      	b.n	8004992 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800498c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800498e:	f7ff ff47 	bl	8004820 <HAL_UART_RxCpltCallback>
}
 8004992:	bf00      	nop
 8004994:	3770      	adds	r7, #112	; 0x70
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d108      	bne.n	80049c2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	4619      	mov	r1, r3
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff ff4e 	bl	800485c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049c0:	e002      	b.n	80049c8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7ff ff36 	bl	8004834 <HAL_UART_RxHalfCpltCallback>
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ec:	2b80      	cmp	r3, #128	; 0x80
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b21      	cmp	r3, #33	; 0x21
 8004a02:	d108      	bne.n	8004a16 <UART_DMAError+0x46>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a10:	68b8      	ldr	r0, [r7, #8]
 8004a12:	f000 f92f 	bl	8004c74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b22      	cmp	r3, #34	; 0x22
 8004a36:	d108      	bne.n	8004a4a <UART_DMAError+0x7a>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2200      	movs	r2, #0
 8004a42:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a44:	68b8      	ldr	r0, [r7, #8]
 8004a46:	f000 f93d 	bl	8004cc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a56:	68b8      	ldr	r0, [r7, #8]
 8004a58:	f7ff fef6 	bl	8004848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b090      	sub	sp, #64	; 0x40
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	4613      	mov	r3, r2
 8004a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a74:	e050      	b.n	8004b18 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7c:	d04c      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a84:	f7fd f95a 	bl	8001d3c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d241      	bcs.n	8004b18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ab4:	637a      	str	r2, [r7, #52]	; 0x34
 8004ab6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e5      	bne.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3314      	adds	r3, #20
 8004ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3314      	adds	r3, #20
 8004ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae8:	623a      	str	r2, [r7, #32]
 8004aea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	69f9      	ldr	r1, [r7, #28]
 8004aee:	6a3a      	ldr	r2, [r7, #32]
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e00f      	b.n	8004b38 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4013      	ands	r3, r2
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d09f      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3740      	adds	r7, #64	; 0x40
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b098      	sub	sp, #96	; 0x60
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2222      	movs	r2, #34	; 0x22
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	4a3e      	ldr	r2, [pc, #248]	; (8004c68 <UART_Start_Receive_DMA+0x128>)
 8004b6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	4a3d      	ldr	r2, [pc, #244]	; (8004c6c <UART_Start_Receive_DMA+0x12c>)
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	4a3c      	ldr	r2, [pc, #240]	; (8004c70 <UART_Start_Receive_DMA+0x130>)
 8004b7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	2200      	movs	r2, #0
 8004b86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b88:	f107 0308 	add.w	r3, r7, #8
 8004b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	f7fd fe7e 	bl	80028a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	330c      	adds	r3, #12
 8004be0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004be2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004be4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e5      	bne.n	8004bc2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3314      	adds	r3, #20
 8004bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3314      	adds	r3, #20
 8004c14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c16:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e5      	bne.n	8004bf6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	617b      	str	r3, [r7, #20]
   return(result);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c40:	653b      	str	r3, [r7, #80]	; 0x50
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6a39      	ldr	r1, [r7, #32]
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e5      	bne.n	8004c2a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3760      	adds	r7, #96	; 0x60
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	08004875 	.word	0x08004875
 8004c6c:	0800499b 	.word	0x0800499b
 8004c70:	080049d1 	.word	0x080049d1

08004c74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	; 0x24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	61ba      	str	r2, [r7, #24]
 8004c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6979      	ldr	r1, [r7, #20]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004cb8:	bf00      	nop
 8004cba:	3724      	adds	r7, #36	; 0x24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b095      	sub	sp, #84	; 0x54
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cec:	643a      	str	r2, [r7, #64]	; 0x40
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e5      	bne.n	8004ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e5      	bne.n	8004d00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d119      	bne.n	8004d70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f023 0310 	bic.w	r3, r3, #16
 8004d52:	647b      	str	r3, [r7, #68]	; 0x44
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d5c:	61ba      	str	r2, [r7, #24]
 8004d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6979      	ldr	r1, [r7, #20]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d7e:	bf00      	nop
 8004d80:	3754      	adds	r7, #84	; 0x54
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff fd4f 	bl	8004848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b21      	cmp	r3, #33	; 0x21
 8004dc4:	d13e      	bne.n	8004e44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d114      	bne.n	8004dfa <UART_Transmit_IT+0x48>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d110      	bne.n	8004dfa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	1c9a      	adds	r2, r3, #2
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	621a      	str	r2, [r3, #32]
 8004df8:	e008      	b.n	8004e0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	1c59      	adds	r1, r3, #1
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6211      	str	r1, [r2, #32]
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10f      	bne.n	8004e40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fcca 	bl	800480c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b08c      	sub	sp, #48	; 0x30
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b22      	cmp	r3, #34	; 0x22
 8004e94:	f040 80ab 	bne.w	8004fee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea0:	d117      	bne.n	8004ed2 <UART_Receive_IT+0x50>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d113      	bne.n	8004ed2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28
 8004ed0:	e026      	b.n	8004f20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee4:	d007      	beq.n	8004ef6 <UART_Receive_IT+0x74>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <UART_Receive_IT+0x82>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	e008      	b.n	8004f16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d15a      	bne.n	8004fea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0220 	bic.w	r2, r2, #32
 8004f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d135      	bne.n	8004fe0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9a:	623a      	str	r2, [r7, #32]
 8004f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	69f9      	ldr	r1, [r7, #28]
 8004fa0:	6a3a      	ldr	r2, [r7, #32]
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d10a      	bne.n	8004fd2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fc3f 	bl	800485c <HAL_UARTEx_RxEventCallback>
 8004fde:	e002      	b.n	8004fe6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fc1d 	bl	8004820 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e002      	b.n	8004ff0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e000      	b.n	8004ff0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fee:	2302      	movs	r3, #2
  }
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3730      	adds	r7, #48	; 0x30
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffc:	b09f      	sub	sp, #124	; 0x7c
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800500c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500e:	68d9      	ldr	r1, [r3, #12]
 8005010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	ea40 0301 	orr.w	r3, r0, r1
 8005018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	431a      	orrs	r2, r3
 8005024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	431a      	orrs	r2, r3
 800502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	4313      	orrs	r3, r2
 8005030:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800503c:	f021 010c 	bic.w	r1, r1, #12
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005046:	430b      	orrs	r3, r1
 8005048:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	6999      	ldr	r1, [r3, #24]
 8005058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	ea40 0301 	orr.w	r3, r0, r1
 8005060:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4bc5      	ldr	r3, [pc, #788]	; (800537c <UART_SetConfig+0x384>)
 8005068:	429a      	cmp	r2, r3
 800506a:	d004      	beq.n	8005076 <UART_SetConfig+0x7e>
 800506c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4bc3      	ldr	r3, [pc, #780]	; (8005380 <UART_SetConfig+0x388>)
 8005072:	429a      	cmp	r2, r3
 8005074:	d103      	bne.n	800507e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005076:	f7fe fd65 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 800507a:	6778      	str	r0, [r7, #116]	; 0x74
 800507c:	e002      	b.n	8005084 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800507e:	f7fe fd4d 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8005082:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508c:	f040 80b6 	bne.w	80051fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005092:	461c      	mov	r4, r3
 8005094:	f04f 0500 	mov.w	r5, #0
 8005098:	4622      	mov	r2, r4
 800509a:	462b      	mov	r3, r5
 800509c:	1891      	adds	r1, r2, r2
 800509e:	6439      	str	r1, [r7, #64]	; 0x40
 80050a0:	415b      	adcs	r3, r3
 80050a2:	647b      	str	r3, [r7, #68]	; 0x44
 80050a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050a8:	1912      	adds	r2, r2, r4
 80050aa:	eb45 0303 	adc.w	r3, r5, r3
 80050ae:	f04f 0000 	mov.w	r0, #0
 80050b2:	f04f 0100 	mov.w	r1, #0
 80050b6:	00d9      	lsls	r1, r3, #3
 80050b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050bc:	00d0      	lsls	r0, r2, #3
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	1911      	adds	r1, r2, r4
 80050c4:	6639      	str	r1, [r7, #96]	; 0x60
 80050c6:	416b      	adcs	r3, r5
 80050c8:	667b      	str	r3, [r7, #100]	; 0x64
 80050ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	1891      	adds	r1, r2, r2
 80050d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80050d8:	415b      	adcs	r3, r3
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80050e4:	f7fb fdd8 	bl	8000c98 <__aeabi_uldivmod>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4ba5      	ldr	r3, [pc, #660]	; (8005384 <UART_SetConfig+0x38c>)
 80050ee:	fba3 2302 	umull	r2, r3, r3, r2
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	011e      	lsls	r6, r3, #4
 80050f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f8:	461c      	mov	r4, r3
 80050fa:	f04f 0500 	mov.w	r5, #0
 80050fe:	4622      	mov	r2, r4
 8005100:	462b      	mov	r3, r5
 8005102:	1891      	adds	r1, r2, r2
 8005104:	6339      	str	r1, [r7, #48]	; 0x30
 8005106:	415b      	adcs	r3, r3
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
 800510a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800510e:	1912      	adds	r2, r2, r4
 8005110:	eb45 0303 	adc.w	r3, r5, r3
 8005114:	f04f 0000 	mov.w	r0, #0
 8005118:	f04f 0100 	mov.w	r1, #0
 800511c:	00d9      	lsls	r1, r3, #3
 800511e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005122:	00d0      	lsls	r0, r2, #3
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	1911      	adds	r1, r2, r4
 800512a:	65b9      	str	r1, [r7, #88]	; 0x58
 800512c:	416b      	adcs	r3, r5
 800512e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	461a      	mov	r2, r3
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	1891      	adds	r1, r2, r2
 800513c:	62b9      	str	r1, [r7, #40]	; 0x28
 800513e:	415b      	adcs	r3, r3
 8005140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005146:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800514a:	f7fb fda5 	bl	8000c98 <__aeabi_uldivmod>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4b8c      	ldr	r3, [pc, #560]	; (8005384 <UART_SetConfig+0x38c>)
 8005154:	fba3 1302 	umull	r1, r3, r3, r2
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	2164      	movs	r1, #100	; 0x64
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	3332      	adds	r3, #50	; 0x32
 8005166:	4a87      	ldr	r2, [pc, #540]	; (8005384 <UART_SetConfig+0x38c>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005174:	441e      	add	r6, r3
 8005176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005178:	4618      	mov	r0, r3
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	1894      	adds	r4, r2, r2
 8005184:	623c      	str	r4, [r7, #32]
 8005186:	415b      	adcs	r3, r3
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
 800518a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800518e:	1812      	adds	r2, r2, r0
 8005190:	eb41 0303 	adc.w	r3, r1, r3
 8005194:	f04f 0400 	mov.w	r4, #0
 8005198:	f04f 0500 	mov.w	r5, #0
 800519c:	00dd      	lsls	r5, r3, #3
 800519e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051a2:	00d4      	lsls	r4, r2, #3
 80051a4:	4622      	mov	r2, r4
 80051a6:	462b      	mov	r3, r5
 80051a8:	1814      	adds	r4, r2, r0
 80051aa:	653c      	str	r4, [r7, #80]	; 0x50
 80051ac:	414b      	adcs	r3, r1
 80051ae:	657b      	str	r3, [r7, #84]	; 0x54
 80051b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	461a      	mov	r2, r3
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	1891      	adds	r1, r2, r2
 80051bc:	61b9      	str	r1, [r7, #24]
 80051be:	415b      	adcs	r3, r3
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80051ca:	f7fb fd65 	bl	8000c98 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4b6c      	ldr	r3, [pc, #432]	; (8005384 <UART_SetConfig+0x38c>)
 80051d4:	fba3 1302 	umull	r1, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	2164      	movs	r1, #100	; 0x64
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	3332      	adds	r3, #50	; 0x32
 80051e6:	4a67      	ldr	r2, [pc, #412]	; (8005384 <UART_SetConfig+0x38c>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 0207 	and.w	r2, r3, #7
 80051f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4432      	add	r2, r6
 80051f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051fa:	e0b9      	b.n	8005370 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051fe:	461c      	mov	r4, r3
 8005200:	f04f 0500 	mov.w	r5, #0
 8005204:	4622      	mov	r2, r4
 8005206:	462b      	mov	r3, r5
 8005208:	1891      	adds	r1, r2, r2
 800520a:	6139      	str	r1, [r7, #16]
 800520c:	415b      	adcs	r3, r3
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005214:	1912      	adds	r2, r2, r4
 8005216:	eb45 0303 	adc.w	r3, r5, r3
 800521a:	f04f 0000 	mov.w	r0, #0
 800521e:	f04f 0100 	mov.w	r1, #0
 8005222:	00d9      	lsls	r1, r3, #3
 8005224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005228:	00d0      	lsls	r0, r2, #3
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	eb12 0804 	adds.w	r8, r2, r4
 8005232:	eb43 0905 	adc.w	r9, r3, r5
 8005236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4618      	mov	r0, r3
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	008b      	lsls	r3, r1, #2
 800524a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800524e:	0082      	lsls	r2, r0, #2
 8005250:	4640      	mov	r0, r8
 8005252:	4649      	mov	r1, r9
 8005254:	f7fb fd20 	bl	8000c98 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4b49      	ldr	r3, [pc, #292]	; (8005384 <UART_SetConfig+0x38c>)
 800525e:	fba3 2302 	umull	r2, r3, r3, r2
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	011e      	lsls	r6, r3, #4
 8005266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005268:	4618      	mov	r0, r3
 800526a:	f04f 0100 	mov.w	r1, #0
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	1894      	adds	r4, r2, r2
 8005274:	60bc      	str	r4, [r7, #8]
 8005276:	415b      	adcs	r3, r3
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800527e:	1812      	adds	r2, r2, r0
 8005280:	eb41 0303 	adc.w	r3, r1, r3
 8005284:	f04f 0400 	mov.w	r4, #0
 8005288:	f04f 0500 	mov.w	r5, #0
 800528c:	00dd      	lsls	r5, r3, #3
 800528e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005292:	00d4      	lsls	r4, r2, #3
 8005294:	4622      	mov	r2, r4
 8005296:	462b      	mov	r3, r5
 8005298:	1814      	adds	r4, r2, r0
 800529a:	64bc      	str	r4, [r7, #72]	; 0x48
 800529c:	414b      	adcs	r3, r1
 800529e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f04f 0100 	mov.w	r1, #0
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	008b      	lsls	r3, r1, #2
 80052b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052b8:	0082      	lsls	r2, r0, #2
 80052ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052be:	f7fb fceb 	bl	8000c98 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4b2f      	ldr	r3, [pc, #188]	; (8005384 <UART_SetConfig+0x38c>)
 80052c8:	fba3 1302 	umull	r1, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	2164      	movs	r1, #100	; 0x64
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	3332      	adds	r3, #50	; 0x32
 80052da:	4a2a      	ldr	r2, [pc, #168]	; (8005384 <UART_SetConfig+0x38c>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e6:	441e      	add	r6, r3
 80052e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ea:	4618      	mov	r0, r3
 80052ec:	f04f 0100 	mov.w	r1, #0
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	1894      	adds	r4, r2, r2
 80052f6:	603c      	str	r4, [r7, #0]
 80052f8:	415b      	adcs	r3, r3
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005300:	1812      	adds	r2, r2, r0
 8005302:	eb41 0303 	adc.w	r3, r1, r3
 8005306:	f04f 0400 	mov.w	r4, #0
 800530a:	f04f 0500 	mov.w	r5, #0
 800530e:	00dd      	lsls	r5, r3, #3
 8005310:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005314:	00d4      	lsls	r4, r2, #3
 8005316:	4622      	mov	r2, r4
 8005318:	462b      	mov	r3, r5
 800531a:	eb12 0a00 	adds.w	sl, r2, r0
 800531e:	eb43 0b01 	adc.w	fp, r3, r1
 8005322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4618      	mov	r0, r3
 8005328:	f04f 0100 	mov.w	r1, #0
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	008b      	lsls	r3, r1, #2
 8005336:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800533a:	0082      	lsls	r2, r0, #2
 800533c:	4650      	mov	r0, sl
 800533e:	4659      	mov	r1, fp
 8005340:	f7fb fcaa 	bl	8000c98 <__aeabi_uldivmod>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <UART_SetConfig+0x38c>)
 800534a:	fba3 1302 	umull	r1, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2164      	movs	r1, #100	; 0x64
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	3332      	adds	r3, #50	; 0x32
 800535c:	4a09      	ldr	r2, [pc, #36]	; (8005384 <UART_SetConfig+0x38c>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4432      	add	r2, r6
 800536e:	609a      	str	r2, [r3, #8]
}
 8005370:	bf00      	nop
 8005372:	377c      	adds	r7, #124	; 0x7c
 8005374:	46bd      	mov	sp, r7
 8005376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537a:	bf00      	nop
 800537c:	40011000 	.word	0x40011000
 8005380:	40011400 	.word	0x40011400
 8005384:	51eb851f 	.word	0x51eb851f

08005388 <__errno>:
 8005388:	4b01      	ldr	r3, [pc, #4]	; (8005390 <__errno+0x8>)
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000010 	.word	0x20000010

08005394 <__libc_init_array>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	4d0d      	ldr	r5, [pc, #52]	; (80053cc <__libc_init_array+0x38>)
 8005398:	4c0d      	ldr	r4, [pc, #52]	; (80053d0 <__libc_init_array+0x3c>)
 800539a:	1b64      	subs	r4, r4, r5
 800539c:	10a4      	asrs	r4, r4, #2
 800539e:	2600      	movs	r6, #0
 80053a0:	42a6      	cmp	r6, r4
 80053a2:	d109      	bne.n	80053b8 <__libc_init_array+0x24>
 80053a4:	4d0b      	ldr	r5, [pc, #44]	; (80053d4 <__libc_init_array+0x40>)
 80053a6:	4c0c      	ldr	r4, [pc, #48]	; (80053d8 <__libc_init_array+0x44>)
 80053a8:	f004 fc46 	bl	8009c38 <_init>
 80053ac:	1b64      	subs	r4, r4, r5
 80053ae:	10a4      	asrs	r4, r4, #2
 80053b0:	2600      	movs	r6, #0
 80053b2:	42a6      	cmp	r6, r4
 80053b4:	d105      	bne.n	80053c2 <__libc_init_array+0x2e>
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053bc:	4798      	blx	r3
 80053be:	3601      	adds	r6, #1
 80053c0:	e7ee      	b.n	80053a0 <__libc_init_array+0xc>
 80053c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c6:	4798      	blx	r3
 80053c8:	3601      	adds	r6, #1
 80053ca:	e7f2      	b.n	80053b2 <__libc_init_array+0x1e>
 80053cc:	0800a15c 	.word	0x0800a15c
 80053d0:	0800a15c 	.word	0x0800a15c
 80053d4:	0800a15c 	.word	0x0800a15c
 80053d8:	0800a160 	.word	0x0800a160

080053dc <memset>:
 80053dc:	4402      	add	r2, r0
 80053de:	4603      	mov	r3, r0
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d100      	bne.n	80053e6 <memset+0xa>
 80053e4:	4770      	bx	lr
 80053e6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ea:	e7f9      	b.n	80053e0 <memset+0x4>

080053ec <__cvt>:
 80053ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f0:	ec55 4b10 	vmov	r4, r5, d0
 80053f4:	2d00      	cmp	r5, #0
 80053f6:	460e      	mov	r6, r1
 80053f8:	4619      	mov	r1, r3
 80053fa:	462b      	mov	r3, r5
 80053fc:	bfbb      	ittet	lt
 80053fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005402:	461d      	movlt	r5, r3
 8005404:	2300      	movge	r3, #0
 8005406:	232d      	movlt	r3, #45	; 0x2d
 8005408:	700b      	strb	r3, [r1, #0]
 800540a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800540c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005410:	4691      	mov	r9, r2
 8005412:	f023 0820 	bic.w	r8, r3, #32
 8005416:	bfbc      	itt	lt
 8005418:	4622      	movlt	r2, r4
 800541a:	4614      	movlt	r4, r2
 800541c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005420:	d005      	beq.n	800542e <__cvt+0x42>
 8005422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005426:	d100      	bne.n	800542a <__cvt+0x3e>
 8005428:	3601      	adds	r6, #1
 800542a:	2102      	movs	r1, #2
 800542c:	e000      	b.n	8005430 <__cvt+0x44>
 800542e:	2103      	movs	r1, #3
 8005430:	ab03      	add	r3, sp, #12
 8005432:	9301      	str	r3, [sp, #4]
 8005434:	ab02      	add	r3, sp, #8
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	ec45 4b10 	vmov	d0, r4, r5
 800543c:	4653      	mov	r3, sl
 800543e:	4632      	mov	r2, r6
 8005440:	f001 fdb6 	bl	8006fb0 <_dtoa_r>
 8005444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005448:	4607      	mov	r7, r0
 800544a:	d102      	bne.n	8005452 <__cvt+0x66>
 800544c:	f019 0f01 	tst.w	r9, #1
 8005450:	d022      	beq.n	8005498 <__cvt+0xac>
 8005452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005456:	eb07 0906 	add.w	r9, r7, r6
 800545a:	d110      	bne.n	800547e <__cvt+0x92>
 800545c:	783b      	ldrb	r3, [r7, #0]
 800545e:	2b30      	cmp	r3, #48	; 0x30
 8005460:	d10a      	bne.n	8005478 <__cvt+0x8c>
 8005462:	2200      	movs	r2, #0
 8005464:	2300      	movs	r3, #0
 8005466:	4620      	mov	r0, r4
 8005468:	4629      	mov	r1, r5
 800546a:	f7fb fb35 	bl	8000ad8 <__aeabi_dcmpeq>
 800546e:	b918      	cbnz	r0, 8005478 <__cvt+0x8c>
 8005470:	f1c6 0601 	rsb	r6, r6, #1
 8005474:	f8ca 6000 	str.w	r6, [sl]
 8005478:	f8da 3000 	ldr.w	r3, [sl]
 800547c:	4499      	add	r9, r3
 800547e:	2200      	movs	r2, #0
 8005480:	2300      	movs	r3, #0
 8005482:	4620      	mov	r0, r4
 8005484:	4629      	mov	r1, r5
 8005486:	f7fb fb27 	bl	8000ad8 <__aeabi_dcmpeq>
 800548a:	b108      	cbz	r0, 8005490 <__cvt+0xa4>
 800548c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005490:	2230      	movs	r2, #48	; 0x30
 8005492:	9b03      	ldr	r3, [sp, #12]
 8005494:	454b      	cmp	r3, r9
 8005496:	d307      	bcc.n	80054a8 <__cvt+0xbc>
 8005498:	9b03      	ldr	r3, [sp, #12]
 800549a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800549c:	1bdb      	subs	r3, r3, r7
 800549e:	4638      	mov	r0, r7
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	b004      	add	sp, #16
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	1c59      	adds	r1, r3, #1
 80054aa:	9103      	str	r1, [sp, #12]
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e7f0      	b.n	8005492 <__cvt+0xa6>

080054b0 <__exponent>:
 80054b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054b2:	4603      	mov	r3, r0
 80054b4:	2900      	cmp	r1, #0
 80054b6:	bfb8      	it	lt
 80054b8:	4249      	neglt	r1, r1
 80054ba:	f803 2b02 	strb.w	r2, [r3], #2
 80054be:	bfb4      	ite	lt
 80054c0:	222d      	movlt	r2, #45	; 0x2d
 80054c2:	222b      	movge	r2, #43	; 0x2b
 80054c4:	2909      	cmp	r1, #9
 80054c6:	7042      	strb	r2, [r0, #1]
 80054c8:	dd2a      	ble.n	8005520 <__exponent+0x70>
 80054ca:	f10d 0407 	add.w	r4, sp, #7
 80054ce:	46a4      	mov	ip, r4
 80054d0:	270a      	movs	r7, #10
 80054d2:	46a6      	mov	lr, r4
 80054d4:	460a      	mov	r2, r1
 80054d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80054da:	fb07 1516 	mls	r5, r7, r6, r1
 80054de:	3530      	adds	r5, #48	; 0x30
 80054e0:	2a63      	cmp	r2, #99	; 0x63
 80054e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80054e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80054ea:	4631      	mov	r1, r6
 80054ec:	dcf1      	bgt.n	80054d2 <__exponent+0x22>
 80054ee:	3130      	adds	r1, #48	; 0x30
 80054f0:	f1ae 0502 	sub.w	r5, lr, #2
 80054f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054f8:	1c44      	adds	r4, r0, #1
 80054fa:	4629      	mov	r1, r5
 80054fc:	4561      	cmp	r1, ip
 80054fe:	d30a      	bcc.n	8005516 <__exponent+0x66>
 8005500:	f10d 0209 	add.w	r2, sp, #9
 8005504:	eba2 020e 	sub.w	r2, r2, lr
 8005508:	4565      	cmp	r5, ip
 800550a:	bf88      	it	hi
 800550c:	2200      	movhi	r2, #0
 800550e:	4413      	add	r3, r2
 8005510:	1a18      	subs	r0, r3, r0
 8005512:	b003      	add	sp, #12
 8005514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800551a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800551e:	e7ed      	b.n	80054fc <__exponent+0x4c>
 8005520:	2330      	movs	r3, #48	; 0x30
 8005522:	3130      	adds	r1, #48	; 0x30
 8005524:	7083      	strb	r3, [r0, #2]
 8005526:	70c1      	strb	r1, [r0, #3]
 8005528:	1d03      	adds	r3, r0, #4
 800552a:	e7f1      	b.n	8005510 <__exponent+0x60>

0800552c <_printf_float>:
 800552c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005530:	ed2d 8b02 	vpush	{d8}
 8005534:	b08d      	sub	sp, #52	; 0x34
 8005536:	460c      	mov	r4, r1
 8005538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800553c:	4616      	mov	r6, r2
 800553e:	461f      	mov	r7, r3
 8005540:	4605      	mov	r5, r0
 8005542:	f002 fe91 	bl	8008268 <_localeconv_r>
 8005546:	f8d0 a000 	ldr.w	sl, [r0]
 800554a:	4650      	mov	r0, sl
 800554c:	f7fa fe48 	bl	80001e0 <strlen>
 8005550:	2300      	movs	r3, #0
 8005552:	930a      	str	r3, [sp, #40]	; 0x28
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	9305      	str	r3, [sp, #20]
 8005558:	f8d8 3000 	ldr.w	r3, [r8]
 800555c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005560:	3307      	adds	r3, #7
 8005562:	f023 0307 	bic.w	r3, r3, #7
 8005566:	f103 0208 	add.w	r2, r3, #8
 800556a:	f8c8 2000 	str.w	r2, [r8]
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005576:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800557a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800557e:	9307      	str	r3, [sp, #28]
 8005580:	f8cd 8018 	str.w	r8, [sp, #24]
 8005584:	ee08 0a10 	vmov	s16, r0
 8005588:	4b9f      	ldr	r3, [pc, #636]	; (8005808 <_printf_float+0x2dc>)
 800558a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800558e:	f04f 32ff 	mov.w	r2, #4294967295
 8005592:	f7fb fad3 	bl	8000b3c <__aeabi_dcmpun>
 8005596:	bb88      	cbnz	r0, 80055fc <_printf_float+0xd0>
 8005598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800559c:	4b9a      	ldr	r3, [pc, #616]	; (8005808 <_printf_float+0x2dc>)
 800559e:	f04f 32ff 	mov.w	r2, #4294967295
 80055a2:	f7fb faad 	bl	8000b00 <__aeabi_dcmple>
 80055a6:	bb48      	cbnz	r0, 80055fc <_printf_float+0xd0>
 80055a8:	2200      	movs	r2, #0
 80055aa:	2300      	movs	r3, #0
 80055ac:	4640      	mov	r0, r8
 80055ae:	4649      	mov	r1, r9
 80055b0:	f7fb fa9c 	bl	8000aec <__aeabi_dcmplt>
 80055b4:	b110      	cbz	r0, 80055bc <_printf_float+0x90>
 80055b6:	232d      	movs	r3, #45	; 0x2d
 80055b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055bc:	4b93      	ldr	r3, [pc, #588]	; (800580c <_printf_float+0x2e0>)
 80055be:	4894      	ldr	r0, [pc, #592]	; (8005810 <_printf_float+0x2e4>)
 80055c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055c4:	bf94      	ite	ls
 80055c6:	4698      	movls	r8, r3
 80055c8:	4680      	movhi	r8, r0
 80055ca:	2303      	movs	r3, #3
 80055cc:	6123      	str	r3, [r4, #16]
 80055ce:	9b05      	ldr	r3, [sp, #20]
 80055d0:	f023 0204 	bic.w	r2, r3, #4
 80055d4:	6022      	str	r2, [r4, #0]
 80055d6:	f04f 0900 	mov.w	r9, #0
 80055da:	9700      	str	r7, [sp, #0]
 80055dc:	4633      	mov	r3, r6
 80055de:	aa0b      	add	r2, sp, #44	; 0x2c
 80055e0:	4621      	mov	r1, r4
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f9d8 	bl	8005998 <_printf_common>
 80055e8:	3001      	adds	r0, #1
 80055ea:	f040 8090 	bne.w	800570e <_printf_float+0x1e2>
 80055ee:	f04f 30ff 	mov.w	r0, #4294967295
 80055f2:	b00d      	add	sp, #52	; 0x34
 80055f4:	ecbd 8b02 	vpop	{d8}
 80055f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fc:	4642      	mov	r2, r8
 80055fe:	464b      	mov	r3, r9
 8005600:	4640      	mov	r0, r8
 8005602:	4649      	mov	r1, r9
 8005604:	f7fb fa9a 	bl	8000b3c <__aeabi_dcmpun>
 8005608:	b140      	cbz	r0, 800561c <_printf_float+0xf0>
 800560a:	464b      	mov	r3, r9
 800560c:	2b00      	cmp	r3, #0
 800560e:	bfbc      	itt	lt
 8005610:	232d      	movlt	r3, #45	; 0x2d
 8005612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005616:	487f      	ldr	r0, [pc, #508]	; (8005814 <_printf_float+0x2e8>)
 8005618:	4b7f      	ldr	r3, [pc, #508]	; (8005818 <_printf_float+0x2ec>)
 800561a:	e7d1      	b.n	80055c0 <_printf_float+0x94>
 800561c:	6863      	ldr	r3, [r4, #4]
 800561e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005622:	9206      	str	r2, [sp, #24]
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	d13f      	bne.n	80056a8 <_printf_float+0x17c>
 8005628:	2306      	movs	r3, #6
 800562a:	6063      	str	r3, [r4, #4]
 800562c:	9b05      	ldr	r3, [sp, #20]
 800562e:	6861      	ldr	r1, [r4, #4]
 8005630:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005634:	2300      	movs	r3, #0
 8005636:	9303      	str	r3, [sp, #12]
 8005638:	ab0a      	add	r3, sp, #40	; 0x28
 800563a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800563e:	ab09      	add	r3, sp, #36	; 0x24
 8005640:	ec49 8b10 	vmov	d0, r8, r9
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	6022      	str	r2, [r4, #0]
 8005648:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800564c:	4628      	mov	r0, r5
 800564e:	f7ff fecd 	bl	80053ec <__cvt>
 8005652:	9b06      	ldr	r3, [sp, #24]
 8005654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005656:	2b47      	cmp	r3, #71	; 0x47
 8005658:	4680      	mov	r8, r0
 800565a:	d108      	bne.n	800566e <_printf_float+0x142>
 800565c:	1cc8      	adds	r0, r1, #3
 800565e:	db02      	blt.n	8005666 <_printf_float+0x13a>
 8005660:	6863      	ldr	r3, [r4, #4]
 8005662:	4299      	cmp	r1, r3
 8005664:	dd41      	ble.n	80056ea <_printf_float+0x1be>
 8005666:	f1ab 0b02 	sub.w	fp, fp, #2
 800566a:	fa5f fb8b 	uxtb.w	fp, fp
 800566e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005672:	d820      	bhi.n	80056b6 <_printf_float+0x18a>
 8005674:	3901      	subs	r1, #1
 8005676:	465a      	mov	r2, fp
 8005678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800567c:	9109      	str	r1, [sp, #36]	; 0x24
 800567e:	f7ff ff17 	bl	80054b0 <__exponent>
 8005682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005684:	1813      	adds	r3, r2, r0
 8005686:	2a01      	cmp	r2, #1
 8005688:	4681      	mov	r9, r0
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	dc02      	bgt.n	8005694 <_printf_float+0x168>
 800568e:	6822      	ldr	r2, [r4, #0]
 8005690:	07d2      	lsls	r2, r2, #31
 8005692:	d501      	bpl.n	8005698 <_printf_float+0x16c>
 8005694:	3301      	adds	r3, #1
 8005696:	6123      	str	r3, [r4, #16]
 8005698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800569c:	2b00      	cmp	r3, #0
 800569e:	d09c      	beq.n	80055da <_printf_float+0xae>
 80056a0:	232d      	movs	r3, #45	; 0x2d
 80056a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056a6:	e798      	b.n	80055da <_printf_float+0xae>
 80056a8:	9a06      	ldr	r2, [sp, #24]
 80056aa:	2a47      	cmp	r2, #71	; 0x47
 80056ac:	d1be      	bne.n	800562c <_printf_float+0x100>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1bc      	bne.n	800562c <_printf_float+0x100>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e7b9      	b.n	800562a <_printf_float+0xfe>
 80056b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056ba:	d118      	bne.n	80056ee <_printf_float+0x1c2>
 80056bc:	2900      	cmp	r1, #0
 80056be:	6863      	ldr	r3, [r4, #4]
 80056c0:	dd0b      	ble.n	80056da <_printf_float+0x1ae>
 80056c2:	6121      	str	r1, [r4, #16]
 80056c4:	b913      	cbnz	r3, 80056cc <_printf_float+0x1a0>
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	07d0      	lsls	r0, r2, #31
 80056ca:	d502      	bpl.n	80056d2 <_printf_float+0x1a6>
 80056cc:	3301      	adds	r3, #1
 80056ce:	440b      	add	r3, r1
 80056d0:	6123      	str	r3, [r4, #16]
 80056d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80056d4:	f04f 0900 	mov.w	r9, #0
 80056d8:	e7de      	b.n	8005698 <_printf_float+0x16c>
 80056da:	b913      	cbnz	r3, 80056e2 <_printf_float+0x1b6>
 80056dc:	6822      	ldr	r2, [r4, #0]
 80056de:	07d2      	lsls	r2, r2, #31
 80056e0:	d501      	bpl.n	80056e6 <_printf_float+0x1ba>
 80056e2:	3302      	adds	r3, #2
 80056e4:	e7f4      	b.n	80056d0 <_printf_float+0x1a4>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e7f2      	b.n	80056d0 <_printf_float+0x1a4>
 80056ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f0:	4299      	cmp	r1, r3
 80056f2:	db05      	blt.n	8005700 <_printf_float+0x1d4>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	6121      	str	r1, [r4, #16]
 80056f8:	07d8      	lsls	r0, r3, #31
 80056fa:	d5ea      	bpl.n	80056d2 <_printf_float+0x1a6>
 80056fc:	1c4b      	adds	r3, r1, #1
 80056fe:	e7e7      	b.n	80056d0 <_printf_float+0x1a4>
 8005700:	2900      	cmp	r1, #0
 8005702:	bfd4      	ite	le
 8005704:	f1c1 0202 	rsble	r2, r1, #2
 8005708:	2201      	movgt	r2, #1
 800570a:	4413      	add	r3, r2
 800570c:	e7e0      	b.n	80056d0 <_printf_float+0x1a4>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	055a      	lsls	r2, r3, #21
 8005712:	d407      	bmi.n	8005724 <_printf_float+0x1f8>
 8005714:	6923      	ldr	r3, [r4, #16]
 8005716:	4642      	mov	r2, r8
 8005718:	4631      	mov	r1, r6
 800571a:	4628      	mov	r0, r5
 800571c:	47b8      	blx	r7
 800571e:	3001      	adds	r0, #1
 8005720:	d12c      	bne.n	800577c <_printf_float+0x250>
 8005722:	e764      	b.n	80055ee <_printf_float+0xc2>
 8005724:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005728:	f240 80e0 	bls.w	80058ec <_printf_float+0x3c0>
 800572c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005730:	2200      	movs	r2, #0
 8005732:	2300      	movs	r3, #0
 8005734:	f7fb f9d0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005738:	2800      	cmp	r0, #0
 800573a:	d034      	beq.n	80057a6 <_printf_float+0x27a>
 800573c:	4a37      	ldr	r2, [pc, #220]	; (800581c <_printf_float+0x2f0>)
 800573e:	2301      	movs	r3, #1
 8005740:	4631      	mov	r1, r6
 8005742:	4628      	mov	r0, r5
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	f43f af51 	beq.w	80055ee <_printf_float+0xc2>
 800574c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005750:	429a      	cmp	r2, r3
 8005752:	db02      	blt.n	800575a <_printf_float+0x22e>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	07d8      	lsls	r0, r3, #31
 8005758:	d510      	bpl.n	800577c <_printf_float+0x250>
 800575a:	ee18 3a10 	vmov	r3, s16
 800575e:	4652      	mov	r2, sl
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	f43f af41 	beq.w	80055ee <_printf_float+0xc2>
 800576c:	f04f 0800 	mov.w	r8, #0
 8005770:	f104 091a 	add.w	r9, r4, #26
 8005774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005776:	3b01      	subs	r3, #1
 8005778:	4543      	cmp	r3, r8
 800577a:	dc09      	bgt.n	8005790 <_printf_float+0x264>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	079b      	lsls	r3, r3, #30
 8005780:	f100 8105 	bmi.w	800598e <_printf_float+0x462>
 8005784:	68e0      	ldr	r0, [r4, #12]
 8005786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005788:	4298      	cmp	r0, r3
 800578a:	bfb8      	it	lt
 800578c:	4618      	movlt	r0, r3
 800578e:	e730      	b.n	80055f2 <_printf_float+0xc6>
 8005790:	2301      	movs	r3, #1
 8005792:	464a      	mov	r2, r9
 8005794:	4631      	mov	r1, r6
 8005796:	4628      	mov	r0, r5
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	f43f af27 	beq.w	80055ee <_printf_float+0xc2>
 80057a0:	f108 0801 	add.w	r8, r8, #1
 80057a4:	e7e6      	b.n	8005774 <_printf_float+0x248>
 80057a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dc39      	bgt.n	8005820 <_printf_float+0x2f4>
 80057ac:	4a1b      	ldr	r2, [pc, #108]	; (800581c <_printf_float+0x2f0>)
 80057ae:	2301      	movs	r3, #1
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	f43f af19 	beq.w	80055ee <_printf_float+0xc2>
 80057bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c0:	4313      	orrs	r3, r2
 80057c2:	d102      	bne.n	80057ca <_printf_float+0x29e>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	07d9      	lsls	r1, r3, #31
 80057c8:	d5d8      	bpl.n	800577c <_printf_float+0x250>
 80057ca:	ee18 3a10 	vmov	r3, s16
 80057ce:	4652      	mov	r2, sl
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b8      	blx	r7
 80057d6:	3001      	adds	r0, #1
 80057d8:	f43f af09 	beq.w	80055ee <_printf_float+0xc2>
 80057dc:	f04f 0900 	mov.w	r9, #0
 80057e0:	f104 0a1a 	add.w	sl, r4, #26
 80057e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e6:	425b      	negs	r3, r3
 80057e8:	454b      	cmp	r3, r9
 80057ea:	dc01      	bgt.n	80057f0 <_printf_float+0x2c4>
 80057ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ee:	e792      	b.n	8005716 <_printf_float+0x1ea>
 80057f0:	2301      	movs	r3, #1
 80057f2:	4652      	mov	r2, sl
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b8      	blx	r7
 80057fa:	3001      	adds	r0, #1
 80057fc:	f43f aef7 	beq.w	80055ee <_printf_float+0xc2>
 8005800:	f109 0901 	add.w	r9, r9, #1
 8005804:	e7ee      	b.n	80057e4 <_printf_float+0x2b8>
 8005806:	bf00      	nop
 8005808:	7fefffff 	.word	0x7fefffff
 800580c:	08009ca0 	.word	0x08009ca0
 8005810:	08009ca4 	.word	0x08009ca4
 8005814:	08009cac 	.word	0x08009cac
 8005818:	08009ca8 	.word	0x08009ca8
 800581c:	08009cb0 	.word	0x08009cb0
 8005820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005824:	429a      	cmp	r2, r3
 8005826:	bfa8      	it	ge
 8005828:	461a      	movge	r2, r3
 800582a:	2a00      	cmp	r2, #0
 800582c:	4691      	mov	r9, r2
 800582e:	dc37      	bgt.n	80058a0 <_printf_float+0x374>
 8005830:	f04f 0b00 	mov.w	fp, #0
 8005834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005838:	f104 021a 	add.w	r2, r4, #26
 800583c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800583e:	9305      	str	r3, [sp, #20]
 8005840:	eba3 0309 	sub.w	r3, r3, r9
 8005844:	455b      	cmp	r3, fp
 8005846:	dc33      	bgt.n	80058b0 <_printf_float+0x384>
 8005848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800584c:	429a      	cmp	r2, r3
 800584e:	db3b      	blt.n	80058c8 <_printf_float+0x39c>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	07da      	lsls	r2, r3, #31
 8005854:	d438      	bmi.n	80058c8 <_printf_float+0x39c>
 8005856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005858:	9b05      	ldr	r3, [sp, #20]
 800585a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	eba2 0901 	sub.w	r9, r2, r1
 8005862:	4599      	cmp	r9, r3
 8005864:	bfa8      	it	ge
 8005866:	4699      	movge	r9, r3
 8005868:	f1b9 0f00 	cmp.w	r9, #0
 800586c:	dc35      	bgt.n	80058da <_printf_float+0x3ae>
 800586e:	f04f 0800 	mov.w	r8, #0
 8005872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005876:	f104 0a1a 	add.w	sl, r4, #26
 800587a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	eba3 0309 	sub.w	r3, r3, r9
 8005884:	4543      	cmp	r3, r8
 8005886:	f77f af79 	ble.w	800577c <_printf_float+0x250>
 800588a:	2301      	movs	r3, #1
 800588c:	4652      	mov	r2, sl
 800588e:	4631      	mov	r1, r6
 8005890:	4628      	mov	r0, r5
 8005892:	47b8      	blx	r7
 8005894:	3001      	adds	r0, #1
 8005896:	f43f aeaa 	beq.w	80055ee <_printf_float+0xc2>
 800589a:	f108 0801 	add.w	r8, r8, #1
 800589e:	e7ec      	b.n	800587a <_printf_float+0x34e>
 80058a0:	4613      	mov	r3, r2
 80058a2:	4631      	mov	r1, r6
 80058a4:	4642      	mov	r2, r8
 80058a6:	4628      	mov	r0, r5
 80058a8:	47b8      	blx	r7
 80058aa:	3001      	adds	r0, #1
 80058ac:	d1c0      	bne.n	8005830 <_printf_float+0x304>
 80058ae:	e69e      	b.n	80055ee <_printf_float+0xc2>
 80058b0:	2301      	movs	r3, #1
 80058b2:	4631      	mov	r1, r6
 80058b4:	4628      	mov	r0, r5
 80058b6:	9205      	str	r2, [sp, #20]
 80058b8:	47b8      	blx	r7
 80058ba:	3001      	adds	r0, #1
 80058bc:	f43f ae97 	beq.w	80055ee <_printf_float+0xc2>
 80058c0:	9a05      	ldr	r2, [sp, #20]
 80058c2:	f10b 0b01 	add.w	fp, fp, #1
 80058c6:	e7b9      	b.n	800583c <_printf_float+0x310>
 80058c8:	ee18 3a10 	vmov	r3, s16
 80058cc:	4652      	mov	r2, sl
 80058ce:	4631      	mov	r1, r6
 80058d0:	4628      	mov	r0, r5
 80058d2:	47b8      	blx	r7
 80058d4:	3001      	adds	r0, #1
 80058d6:	d1be      	bne.n	8005856 <_printf_float+0x32a>
 80058d8:	e689      	b.n	80055ee <_printf_float+0xc2>
 80058da:	9a05      	ldr	r2, [sp, #20]
 80058dc:	464b      	mov	r3, r9
 80058de:	4442      	add	r2, r8
 80058e0:	4631      	mov	r1, r6
 80058e2:	4628      	mov	r0, r5
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	d1c1      	bne.n	800586e <_printf_float+0x342>
 80058ea:	e680      	b.n	80055ee <_printf_float+0xc2>
 80058ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ee:	2a01      	cmp	r2, #1
 80058f0:	dc01      	bgt.n	80058f6 <_printf_float+0x3ca>
 80058f2:	07db      	lsls	r3, r3, #31
 80058f4:	d538      	bpl.n	8005968 <_printf_float+0x43c>
 80058f6:	2301      	movs	r3, #1
 80058f8:	4642      	mov	r2, r8
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	f43f ae74 	beq.w	80055ee <_printf_float+0xc2>
 8005906:	ee18 3a10 	vmov	r3, s16
 800590a:	4652      	mov	r2, sl
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	f43f ae6b 	beq.w	80055ee <_printf_float+0xc2>
 8005918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800591c:	2200      	movs	r2, #0
 800591e:	2300      	movs	r3, #0
 8005920:	f7fb f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 8005924:	b9d8      	cbnz	r0, 800595e <_printf_float+0x432>
 8005926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005928:	f108 0201 	add.w	r2, r8, #1
 800592c:	3b01      	subs	r3, #1
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	d10e      	bne.n	8005956 <_printf_float+0x42a>
 8005938:	e659      	b.n	80055ee <_printf_float+0xc2>
 800593a:	2301      	movs	r3, #1
 800593c:	4652      	mov	r2, sl
 800593e:	4631      	mov	r1, r6
 8005940:	4628      	mov	r0, r5
 8005942:	47b8      	blx	r7
 8005944:	3001      	adds	r0, #1
 8005946:	f43f ae52 	beq.w	80055ee <_printf_float+0xc2>
 800594a:	f108 0801 	add.w	r8, r8, #1
 800594e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005950:	3b01      	subs	r3, #1
 8005952:	4543      	cmp	r3, r8
 8005954:	dcf1      	bgt.n	800593a <_printf_float+0x40e>
 8005956:	464b      	mov	r3, r9
 8005958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800595c:	e6dc      	b.n	8005718 <_printf_float+0x1ec>
 800595e:	f04f 0800 	mov.w	r8, #0
 8005962:	f104 0a1a 	add.w	sl, r4, #26
 8005966:	e7f2      	b.n	800594e <_printf_float+0x422>
 8005968:	2301      	movs	r3, #1
 800596a:	4642      	mov	r2, r8
 800596c:	e7df      	b.n	800592e <_printf_float+0x402>
 800596e:	2301      	movs	r3, #1
 8005970:	464a      	mov	r2, r9
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	f43f ae38 	beq.w	80055ee <_printf_float+0xc2>
 800597e:	f108 0801 	add.w	r8, r8, #1
 8005982:	68e3      	ldr	r3, [r4, #12]
 8005984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005986:	1a5b      	subs	r3, r3, r1
 8005988:	4543      	cmp	r3, r8
 800598a:	dcf0      	bgt.n	800596e <_printf_float+0x442>
 800598c:	e6fa      	b.n	8005784 <_printf_float+0x258>
 800598e:	f04f 0800 	mov.w	r8, #0
 8005992:	f104 0919 	add.w	r9, r4, #25
 8005996:	e7f4      	b.n	8005982 <_printf_float+0x456>

08005998 <_printf_common>:
 8005998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800599c:	4616      	mov	r6, r2
 800599e:	4699      	mov	r9, r3
 80059a0:	688a      	ldr	r2, [r1, #8]
 80059a2:	690b      	ldr	r3, [r1, #16]
 80059a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	bfb8      	it	lt
 80059ac:	4613      	movlt	r3, r2
 80059ae:	6033      	str	r3, [r6, #0]
 80059b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059b4:	4607      	mov	r7, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	b10a      	cbz	r2, 80059be <_printf_common+0x26>
 80059ba:	3301      	adds	r3, #1
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	0699      	lsls	r1, r3, #26
 80059c2:	bf42      	ittt	mi
 80059c4:	6833      	ldrmi	r3, [r6, #0]
 80059c6:	3302      	addmi	r3, #2
 80059c8:	6033      	strmi	r3, [r6, #0]
 80059ca:	6825      	ldr	r5, [r4, #0]
 80059cc:	f015 0506 	ands.w	r5, r5, #6
 80059d0:	d106      	bne.n	80059e0 <_printf_common+0x48>
 80059d2:	f104 0a19 	add.w	sl, r4, #25
 80059d6:	68e3      	ldr	r3, [r4, #12]
 80059d8:	6832      	ldr	r2, [r6, #0]
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	42ab      	cmp	r3, r5
 80059de:	dc26      	bgt.n	8005a2e <_printf_common+0x96>
 80059e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059e4:	1e13      	subs	r3, r2, #0
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	bf18      	it	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	0692      	lsls	r2, r2, #26
 80059ee:	d42b      	bmi.n	8005a48 <_printf_common+0xb0>
 80059f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059f4:	4649      	mov	r1, r9
 80059f6:	4638      	mov	r0, r7
 80059f8:	47c0      	blx	r8
 80059fa:	3001      	adds	r0, #1
 80059fc:	d01e      	beq.n	8005a3c <_printf_common+0xa4>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	68e5      	ldr	r5, [r4, #12]
 8005a02:	6832      	ldr	r2, [r6, #0]
 8005a04:	f003 0306 	and.w	r3, r3, #6
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	bf08      	it	eq
 8005a0c:	1aad      	subeq	r5, r5, r2
 8005a0e:	68a3      	ldr	r3, [r4, #8]
 8005a10:	6922      	ldr	r2, [r4, #16]
 8005a12:	bf0c      	ite	eq
 8005a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a18:	2500      	movne	r5, #0
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	bfc4      	itt	gt
 8005a1e:	1a9b      	subgt	r3, r3, r2
 8005a20:	18ed      	addgt	r5, r5, r3
 8005a22:	2600      	movs	r6, #0
 8005a24:	341a      	adds	r4, #26
 8005a26:	42b5      	cmp	r5, r6
 8005a28:	d11a      	bne.n	8005a60 <_printf_common+0xc8>
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	e008      	b.n	8005a40 <_printf_common+0xa8>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4652      	mov	r2, sl
 8005a32:	4649      	mov	r1, r9
 8005a34:	4638      	mov	r0, r7
 8005a36:	47c0      	blx	r8
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d103      	bne.n	8005a44 <_printf_common+0xac>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a44:	3501      	adds	r5, #1
 8005a46:	e7c6      	b.n	80059d6 <_printf_common+0x3e>
 8005a48:	18e1      	adds	r1, r4, r3
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	2030      	movs	r0, #48	; 0x30
 8005a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a52:	4422      	add	r2, r4
 8005a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	e7c7      	b.n	80059f0 <_printf_common+0x58>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4622      	mov	r2, r4
 8005a64:	4649      	mov	r1, r9
 8005a66:	4638      	mov	r0, r7
 8005a68:	47c0      	blx	r8
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d0e6      	beq.n	8005a3c <_printf_common+0xa4>
 8005a6e:	3601      	adds	r6, #1
 8005a70:	e7d9      	b.n	8005a26 <_printf_common+0x8e>
	...

08005a74 <_printf_i>:
 8005a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	460c      	mov	r4, r1
 8005a7a:	4691      	mov	r9, r2
 8005a7c:	7e27      	ldrb	r7, [r4, #24]
 8005a7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a80:	2f78      	cmp	r7, #120	; 0x78
 8005a82:	4680      	mov	r8, r0
 8005a84:	469a      	mov	sl, r3
 8005a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a8a:	d807      	bhi.n	8005a9c <_printf_i+0x28>
 8005a8c:	2f62      	cmp	r7, #98	; 0x62
 8005a8e:	d80a      	bhi.n	8005aa6 <_printf_i+0x32>
 8005a90:	2f00      	cmp	r7, #0
 8005a92:	f000 80d8 	beq.w	8005c46 <_printf_i+0x1d2>
 8005a96:	2f58      	cmp	r7, #88	; 0x58
 8005a98:	f000 80a3 	beq.w	8005be2 <_printf_i+0x16e>
 8005a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aa4:	e03a      	b.n	8005b1c <_printf_i+0xa8>
 8005aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aaa:	2b15      	cmp	r3, #21
 8005aac:	d8f6      	bhi.n	8005a9c <_printf_i+0x28>
 8005aae:	a001      	add	r0, pc, #4	; (adr r0, 8005ab4 <_printf_i+0x40>)
 8005ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ab4:	08005b0d 	.word	0x08005b0d
 8005ab8:	08005b21 	.word	0x08005b21
 8005abc:	08005a9d 	.word	0x08005a9d
 8005ac0:	08005a9d 	.word	0x08005a9d
 8005ac4:	08005a9d 	.word	0x08005a9d
 8005ac8:	08005a9d 	.word	0x08005a9d
 8005acc:	08005b21 	.word	0x08005b21
 8005ad0:	08005a9d 	.word	0x08005a9d
 8005ad4:	08005a9d 	.word	0x08005a9d
 8005ad8:	08005a9d 	.word	0x08005a9d
 8005adc:	08005a9d 	.word	0x08005a9d
 8005ae0:	08005c2d 	.word	0x08005c2d
 8005ae4:	08005b51 	.word	0x08005b51
 8005ae8:	08005c0f 	.word	0x08005c0f
 8005aec:	08005a9d 	.word	0x08005a9d
 8005af0:	08005a9d 	.word	0x08005a9d
 8005af4:	08005c4f 	.word	0x08005c4f
 8005af8:	08005a9d 	.word	0x08005a9d
 8005afc:	08005b51 	.word	0x08005b51
 8005b00:	08005a9d 	.word	0x08005a9d
 8005b04:	08005a9d 	.word	0x08005a9d
 8005b08:	08005c17 	.word	0x08005c17
 8005b0c:	680b      	ldr	r3, [r1, #0]
 8005b0e:	1d1a      	adds	r2, r3, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	600a      	str	r2, [r1, #0]
 8005b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0a3      	b.n	8005c68 <_printf_i+0x1f4>
 8005b20:	6825      	ldr	r5, [r4, #0]
 8005b22:	6808      	ldr	r0, [r1, #0]
 8005b24:	062e      	lsls	r6, r5, #24
 8005b26:	f100 0304 	add.w	r3, r0, #4
 8005b2a:	d50a      	bpl.n	8005b42 <_printf_i+0xce>
 8005b2c:	6805      	ldr	r5, [r0, #0]
 8005b2e:	600b      	str	r3, [r1, #0]
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	da03      	bge.n	8005b3c <_printf_i+0xc8>
 8005b34:	232d      	movs	r3, #45	; 0x2d
 8005b36:	426d      	negs	r5, r5
 8005b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b3c:	485e      	ldr	r0, [pc, #376]	; (8005cb8 <_printf_i+0x244>)
 8005b3e:	230a      	movs	r3, #10
 8005b40:	e019      	b.n	8005b76 <_printf_i+0x102>
 8005b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b46:	6805      	ldr	r5, [r0, #0]
 8005b48:	600b      	str	r3, [r1, #0]
 8005b4a:	bf18      	it	ne
 8005b4c:	b22d      	sxthne	r5, r5
 8005b4e:	e7ef      	b.n	8005b30 <_printf_i+0xbc>
 8005b50:	680b      	ldr	r3, [r1, #0]
 8005b52:	6825      	ldr	r5, [r4, #0]
 8005b54:	1d18      	adds	r0, r3, #4
 8005b56:	6008      	str	r0, [r1, #0]
 8005b58:	0628      	lsls	r0, r5, #24
 8005b5a:	d501      	bpl.n	8005b60 <_printf_i+0xec>
 8005b5c:	681d      	ldr	r5, [r3, #0]
 8005b5e:	e002      	b.n	8005b66 <_printf_i+0xf2>
 8005b60:	0669      	lsls	r1, r5, #25
 8005b62:	d5fb      	bpl.n	8005b5c <_printf_i+0xe8>
 8005b64:	881d      	ldrh	r5, [r3, #0]
 8005b66:	4854      	ldr	r0, [pc, #336]	; (8005cb8 <_printf_i+0x244>)
 8005b68:	2f6f      	cmp	r7, #111	; 0x6f
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2308      	moveq	r3, #8
 8005b6e:	230a      	movne	r3, #10
 8005b70:	2100      	movs	r1, #0
 8005b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b76:	6866      	ldr	r6, [r4, #4]
 8005b78:	60a6      	str	r6, [r4, #8]
 8005b7a:	2e00      	cmp	r6, #0
 8005b7c:	bfa2      	ittt	ge
 8005b7e:	6821      	ldrge	r1, [r4, #0]
 8005b80:	f021 0104 	bicge.w	r1, r1, #4
 8005b84:	6021      	strge	r1, [r4, #0]
 8005b86:	b90d      	cbnz	r5, 8005b8c <_printf_i+0x118>
 8005b88:	2e00      	cmp	r6, #0
 8005b8a:	d04d      	beq.n	8005c28 <_printf_i+0x1b4>
 8005b8c:	4616      	mov	r6, r2
 8005b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b92:	fb03 5711 	mls	r7, r3, r1, r5
 8005b96:	5dc7      	ldrb	r7, [r0, r7]
 8005b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b9c:	462f      	mov	r7, r5
 8005b9e:	42bb      	cmp	r3, r7
 8005ba0:	460d      	mov	r5, r1
 8005ba2:	d9f4      	bls.n	8005b8e <_printf_i+0x11a>
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d10b      	bne.n	8005bc0 <_printf_i+0x14c>
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	07df      	lsls	r7, r3, #31
 8005bac:	d508      	bpl.n	8005bc0 <_printf_i+0x14c>
 8005bae:	6923      	ldr	r3, [r4, #16]
 8005bb0:	6861      	ldr	r1, [r4, #4]
 8005bb2:	4299      	cmp	r1, r3
 8005bb4:	bfde      	ittt	le
 8005bb6:	2330      	movle	r3, #48	; 0x30
 8005bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bc0:	1b92      	subs	r2, r2, r6
 8005bc2:	6122      	str	r2, [r4, #16]
 8005bc4:	f8cd a000 	str.w	sl, [sp]
 8005bc8:	464b      	mov	r3, r9
 8005bca:	aa03      	add	r2, sp, #12
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4640      	mov	r0, r8
 8005bd0:	f7ff fee2 	bl	8005998 <_printf_common>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d14c      	bne.n	8005c72 <_printf_i+0x1fe>
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	b004      	add	sp, #16
 8005bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be2:	4835      	ldr	r0, [pc, #212]	; (8005cb8 <_printf_i+0x244>)
 8005be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	680e      	ldr	r6, [r1, #0]
 8005bec:	061f      	lsls	r7, r3, #24
 8005bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8005bf2:	600e      	str	r6, [r1, #0]
 8005bf4:	d514      	bpl.n	8005c20 <_printf_i+0x1ac>
 8005bf6:	07d9      	lsls	r1, r3, #31
 8005bf8:	bf44      	itt	mi
 8005bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8005bfe:	6023      	strmi	r3, [r4, #0]
 8005c00:	b91d      	cbnz	r5, 8005c0a <_printf_i+0x196>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	f023 0320 	bic.w	r3, r3, #32
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	2310      	movs	r3, #16
 8005c0c:	e7b0      	b.n	8005b70 <_printf_i+0xfc>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	f043 0320 	orr.w	r3, r3, #32
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	2378      	movs	r3, #120	; 0x78
 8005c18:	4828      	ldr	r0, [pc, #160]	; (8005cbc <_printf_i+0x248>)
 8005c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c1e:	e7e3      	b.n	8005be8 <_printf_i+0x174>
 8005c20:	065e      	lsls	r6, r3, #25
 8005c22:	bf48      	it	mi
 8005c24:	b2ad      	uxthmi	r5, r5
 8005c26:	e7e6      	b.n	8005bf6 <_printf_i+0x182>
 8005c28:	4616      	mov	r6, r2
 8005c2a:	e7bb      	b.n	8005ba4 <_printf_i+0x130>
 8005c2c:	680b      	ldr	r3, [r1, #0]
 8005c2e:	6826      	ldr	r6, [r4, #0]
 8005c30:	6960      	ldr	r0, [r4, #20]
 8005c32:	1d1d      	adds	r5, r3, #4
 8005c34:	600d      	str	r5, [r1, #0]
 8005c36:	0635      	lsls	r5, r6, #24
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	d501      	bpl.n	8005c40 <_printf_i+0x1cc>
 8005c3c:	6018      	str	r0, [r3, #0]
 8005c3e:	e002      	b.n	8005c46 <_printf_i+0x1d2>
 8005c40:	0671      	lsls	r1, r6, #25
 8005c42:	d5fb      	bpl.n	8005c3c <_printf_i+0x1c8>
 8005c44:	8018      	strh	r0, [r3, #0]
 8005c46:	2300      	movs	r3, #0
 8005c48:	6123      	str	r3, [r4, #16]
 8005c4a:	4616      	mov	r6, r2
 8005c4c:	e7ba      	b.n	8005bc4 <_printf_i+0x150>
 8005c4e:	680b      	ldr	r3, [r1, #0]
 8005c50:	1d1a      	adds	r2, r3, #4
 8005c52:	600a      	str	r2, [r1, #0]
 8005c54:	681e      	ldr	r6, [r3, #0]
 8005c56:	6862      	ldr	r2, [r4, #4]
 8005c58:	2100      	movs	r1, #0
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f7fa fac8 	bl	80001f0 <memchr>
 8005c60:	b108      	cbz	r0, 8005c66 <_printf_i+0x1f2>
 8005c62:	1b80      	subs	r0, r0, r6
 8005c64:	6060      	str	r0, [r4, #4]
 8005c66:	6863      	ldr	r3, [r4, #4]
 8005c68:	6123      	str	r3, [r4, #16]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c70:	e7a8      	b.n	8005bc4 <_printf_i+0x150>
 8005c72:	6923      	ldr	r3, [r4, #16]
 8005c74:	4632      	mov	r2, r6
 8005c76:	4649      	mov	r1, r9
 8005c78:	4640      	mov	r0, r8
 8005c7a:	47d0      	blx	sl
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d0ab      	beq.n	8005bd8 <_printf_i+0x164>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	079b      	lsls	r3, r3, #30
 8005c84:	d413      	bmi.n	8005cae <_printf_i+0x23a>
 8005c86:	68e0      	ldr	r0, [r4, #12]
 8005c88:	9b03      	ldr	r3, [sp, #12]
 8005c8a:	4298      	cmp	r0, r3
 8005c8c:	bfb8      	it	lt
 8005c8e:	4618      	movlt	r0, r3
 8005c90:	e7a4      	b.n	8005bdc <_printf_i+0x168>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4632      	mov	r2, r6
 8005c96:	4649      	mov	r1, r9
 8005c98:	4640      	mov	r0, r8
 8005c9a:	47d0      	blx	sl
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d09b      	beq.n	8005bd8 <_printf_i+0x164>
 8005ca0:	3501      	adds	r5, #1
 8005ca2:	68e3      	ldr	r3, [r4, #12]
 8005ca4:	9903      	ldr	r1, [sp, #12]
 8005ca6:	1a5b      	subs	r3, r3, r1
 8005ca8:	42ab      	cmp	r3, r5
 8005caa:	dcf2      	bgt.n	8005c92 <_printf_i+0x21e>
 8005cac:	e7eb      	b.n	8005c86 <_printf_i+0x212>
 8005cae:	2500      	movs	r5, #0
 8005cb0:	f104 0619 	add.w	r6, r4, #25
 8005cb4:	e7f5      	b.n	8005ca2 <_printf_i+0x22e>
 8005cb6:	bf00      	nop
 8005cb8:	08009cb2 	.word	0x08009cb2
 8005cbc:	08009cc3 	.word	0x08009cc3

08005cc0 <_scanf_float>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	b087      	sub	sp, #28
 8005cc6:	4617      	mov	r7, r2
 8005cc8:	9303      	str	r3, [sp, #12]
 8005cca:	688b      	ldr	r3, [r1, #8]
 8005ccc:	1e5a      	subs	r2, r3, #1
 8005cce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005cd2:	bf83      	ittte	hi
 8005cd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005cd8:	195b      	addhi	r3, r3, r5
 8005cda:	9302      	strhi	r3, [sp, #8]
 8005cdc:	2300      	movls	r3, #0
 8005cde:	bf86      	itte	hi
 8005ce0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ce4:	608b      	strhi	r3, [r1, #8]
 8005ce6:	9302      	strls	r3, [sp, #8]
 8005ce8:	680b      	ldr	r3, [r1, #0]
 8005cea:	468b      	mov	fp, r1
 8005cec:	2500      	movs	r5, #0
 8005cee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005cf2:	f84b 3b1c 	str.w	r3, [fp], #28
 8005cf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005cfa:	4680      	mov	r8, r0
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	465e      	mov	r6, fp
 8005d00:	46aa      	mov	sl, r5
 8005d02:	46a9      	mov	r9, r5
 8005d04:	9501      	str	r5, [sp, #4]
 8005d06:	68a2      	ldr	r2, [r4, #8]
 8005d08:	b152      	cbz	r2, 8005d20 <_scanf_float+0x60>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b4e      	cmp	r3, #78	; 0x4e
 8005d10:	d864      	bhi.n	8005ddc <_scanf_float+0x11c>
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d83c      	bhi.n	8005d90 <_scanf_float+0xd0>
 8005d16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d1a:	b2c8      	uxtb	r0, r1
 8005d1c:	280e      	cmp	r0, #14
 8005d1e:	d93a      	bls.n	8005d96 <_scanf_float+0xd6>
 8005d20:	f1b9 0f00 	cmp.w	r9, #0
 8005d24:	d003      	beq.n	8005d2e <_scanf_float+0x6e>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d32:	f1ba 0f01 	cmp.w	sl, #1
 8005d36:	f200 8113 	bhi.w	8005f60 <_scanf_float+0x2a0>
 8005d3a:	455e      	cmp	r6, fp
 8005d3c:	f200 8105 	bhi.w	8005f4a <_scanf_float+0x28a>
 8005d40:	2501      	movs	r5, #1
 8005d42:	4628      	mov	r0, r5
 8005d44:	b007      	add	sp, #28
 8005d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d4e:	2a0d      	cmp	r2, #13
 8005d50:	d8e6      	bhi.n	8005d20 <_scanf_float+0x60>
 8005d52:	a101      	add	r1, pc, #4	; (adr r1, 8005d58 <_scanf_float+0x98>)
 8005d54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d58:	08005e97 	.word	0x08005e97
 8005d5c:	08005d21 	.word	0x08005d21
 8005d60:	08005d21 	.word	0x08005d21
 8005d64:	08005d21 	.word	0x08005d21
 8005d68:	08005ef7 	.word	0x08005ef7
 8005d6c:	08005ecf 	.word	0x08005ecf
 8005d70:	08005d21 	.word	0x08005d21
 8005d74:	08005d21 	.word	0x08005d21
 8005d78:	08005ea5 	.word	0x08005ea5
 8005d7c:	08005d21 	.word	0x08005d21
 8005d80:	08005d21 	.word	0x08005d21
 8005d84:	08005d21 	.word	0x08005d21
 8005d88:	08005d21 	.word	0x08005d21
 8005d8c:	08005e5d 	.word	0x08005e5d
 8005d90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005d94:	e7db      	b.n	8005d4e <_scanf_float+0x8e>
 8005d96:	290e      	cmp	r1, #14
 8005d98:	d8c2      	bhi.n	8005d20 <_scanf_float+0x60>
 8005d9a:	a001      	add	r0, pc, #4	; (adr r0, 8005da0 <_scanf_float+0xe0>)
 8005d9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005da0:	08005e4f 	.word	0x08005e4f
 8005da4:	08005d21 	.word	0x08005d21
 8005da8:	08005e4f 	.word	0x08005e4f
 8005dac:	08005ee3 	.word	0x08005ee3
 8005db0:	08005d21 	.word	0x08005d21
 8005db4:	08005dfd 	.word	0x08005dfd
 8005db8:	08005e39 	.word	0x08005e39
 8005dbc:	08005e39 	.word	0x08005e39
 8005dc0:	08005e39 	.word	0x08005e39
 8005dc4:	08005e39 	.word	0x08005e39
 8005dc8:	08005e39 	.word	0x08005e39
 8005dcc:	08005e39 	.word	0x08005e39
 8005dd0:	08005e39 	.word	0x08005e39
 8005dd4:	08005e39 	.word	0x08005e39
 8005dd8:	08005e39 	.word	0x08005e39
 8005ddc:	2b6e      	cmp	r3, #110	; 0x6e
 8005dde:	d809      	bhi.n	8005df4 <_scanf_float+0x134>
 8005de0:	2b60      	cmp	r3, #96	; 0x60
 8005de2:	d8b2      	bhi.n	8005d4a <_scanf_float+0x8a>
 8005de4:	2b54      	cmp	r3, #84	; 0x54
 8005de6:	d077      	beq.n	8005ed8 <_scanf_float+0x218>
 8005de8:	2b59      	cmp	r3, #89	; 0x59
 8005dea:	d199      	bne.n	8005d20 <_scanf_float+0x60>
 8005dec:	2d07      	cmp	r5, #7
 8005dee:	d197      	bne.n	8005d20 <_scanf_float+0x60>
 8005df0:	2508      	movs	r5, #8
 8005df2:	e029      	b.n	8005e48 <_scanf_float+0x188>
 8005df4:	2b74      	cmp	r3, #116	; 0x74
 8005df6:	d06f      	beq.n	8005ed8 <_scanf_float+0x218>
 8005df8:	2b79      	cmp	r3, #121	; 0x79
 8005dfa:	e7f6      	b.n	8005dea <_scanf_float+0x12a>
 8005dfc:	6821      	ldr	r1, [r4, #0]
 8005dfe:	05c8      	lsls	r0, r1, #23
 8005e00:	d51a      	bpl.n	8005e38 <_scanf_float+0x178>
 8005e02:	9b02      	ldr	r3, [sp, #8]
 8005e04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e08:	6021      	str	r1, [r4, #0]
 8005e0a:	f109 0901 	add.w	r9, r9, #1
 8005e0e:	b11b      	cbz	r3, 8005e18 <_scanf_float+0x158>
 8005e10:	3b01      	subs	r3, #1
 8005e12:	3201      	adds	r2, #1
 8005e14:	9302      	str	r3, [sp, #8]
 8005e16:	60a2      	str	r2, [r4, #8]
 8005e18:	68a3      	ldr	r3, [r4, #8]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	60a3      	str	r3, [r4, #8]
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	3301      	adds	r3, #1
 8005e22:	6123      	str	r3, [r4, #16]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	f340 8084 	ble.w	8005f38 <_scanf_float+0x278>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	603b      	str	r3, [r7, #0]
 8005e36:	e766      	b.n	8005d06 <_scanf_float+0x46>
 8005e38:	eb1a 0f05 	cmn.w	sl, r5
 8005e3c:	f47f af70 	bne.w	8005d20 <_scanf_float+0x60>
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e46:	6022      	str	r2, [r4, #0]
 8005e48:	f806 3b01 	strb.w	r3, [r6], #1
 8005e4c:	e7e4      	b.n	8005e18 <_scanf_float+0x158>
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	0610      	lsls	r0, r2, #24
 8005e52:	f57f af65 	bpl.w	8005d20 <_scanf_float+0x60>
 8005e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e5a:	e7f4      	b.n	8005e46 <_scanf_float+0x186>
 8005e5c:	f1ba 0f00 	cmp.w	sl, #0
 8005e60:	d10e      	bne.n	8005e80 <_scanf_float+0x1c0>
 8005e62:	f1b9 0f00 	cmp.w	r9, #0
 8005e66:	d10e      	bne.n	8005e86 <_scanf_float+0x1c6>
 8005e68:	6822      	ldr	r2, [r4, #0]
 8005e6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e72:	d108      	bne.n	8005e86 <_scanf_float+0x1c6>
 8005e74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e78:	6022      	str	r2, [r4, #0]
 8005e7a:	f04f 0a01 	mov.w	sl, #1
 8005e7e:	e7e3      	b.n	8005e48 <_scanf_float+0x188>
 8005e80:	f1ba 0f02 	cmp.w	sl, #2
 8005e84:	d055      	beq.n	8005f32 <_scanf_float+0x272>
 8005e86:	2d01      	cmp	r5, #1
 8005e88:	d002      	beq.n	8005e90 <_scanf_float+0x1d0>
 8005e8a:	2d04      	cmp	r5, #4
 8005e8c:	f47f af48 	bne.w	8005d20 <_scanf_float+0x60>
 8005e90:	3501      	adds	r5, #1
 8005e92:	b2ed      	uxtb	r5, r5
 8005e94:	e7d8      	b.n	8005e48 <_scanf_float+0x188>
 8005e96:	f1ba 0f01 	cmp.w	sl, #1
 8005e9a:	f47f af41 	bne.w	8005d20 <_scanf_float+0x60>
 8005e9e:	f04f 0a02 	mov.w	sl, #2
 8005ea2:	e7d1      	b.n	8005e48 <_scanf_float+0x188>
 8005ea4:	b97d      	cbnz	r5, 8005ec6 <_scanf_float+0x206>
 8005ea6:	f1b9 0f00 	cmp.w	r9, #0
 8005eaa:	f47f af3c 	bne.w	8005d26 <_scanf_float+0x66>
 8005eae:	6822      	ldr	r2, [r4, #0]
 8005eb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005eb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005eb8:	f47f af39 	bne.w	8005d2e <_scanf_float+0x6e>
 8005ebc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ec0:	6022      	str	r2, [r4, #0]
 8005ec2:	2501      	movs	r5, #1
 8005ec4:	e7c0      	b.n	8005e48 <_scanf_float+0x188>
 8005ec6:	2d03      	cmp	r5, #3
 8005ec8:	d0e2      	beq.n	8005e90 <_scanf_float+0x1d0>
 8005eca:	2d05      	cmp	r5, #5
 8005ecc:	e7de      	b.n	8005e8c <_scanf_float+0x1cc>
 8005ece:	2d02      	cmp	r5, #2
 8005ed0:	f47f af26 	bne.w	8005d20 <_scanf_float+0x60>
 8005ed4:	2503      	movs	r5, #3
 8005ed6:	e7b7      	b.n	8005e48 <_scanf_float+0x188>
 8005ed8:	2d06      	cmp	r5, #6
 8005eda:	f47f af21 	bne.w	8005d20 <_scanf_float+0x60>
 8005ede:	2507      	movs	r5, #7
 8005ee0:	e7b2      	b.n	8005e48 <_scanf_float+0x188>
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	0591      	lsls	r1, r2, #22
 8005ee6:	f57f af1b 	bpl.w	8005d20 <_scanf_float+0x60>
 8005eea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005eee:	6022      	str	r2, [r4, #0]
 8005ef0:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ef4:	e7a8      	b.n	8005e48 <_scanf_float+0x188>
 8005ef6:	6822      	ldr	r2, [r4, #0]
 8005ef8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005efc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f00:	d006      	beq.n	8005f10 <_scanf_float+0x250>
 8005f02:	0550      	lsls	r0, r2, #21
 8005f04:	f57f af0c 	bpl.w	8005d20 <_scanf_float+0x60>
 8005f08:	f1b9 0f00 	cmp.w	r9, #0
 8005f0c:	f43f af0f 	beq.w	8005d2e <_scanf_float+0x6e>
 8005f10:	0591      	lsls	r1, r2, #22
 8005f12:	bf58      	it	pl
 8005f14:	9901      	ldrpl	r1, [sp, #4]
 8005f16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f1a:	bf58      	it	pl
 8005f1c:	eba9 0101 	subpl.w	r1, r9, r1
 8005f20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f24:	bf58      	it	pl
 8005f26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f2a:	6022      	str	r2, [r4, #0]
 8005f2c:	f04f 0900 	mov.w	r9, #0
 8005f30:	e78a      	b.n	8005e48 <_scanf_float+0x188>
 8005f32:	f04f 0a03 	mov.w	sl, #3
 8005f36:	e787      	b.n	8005e48 <_scanf_float+0x188>
 8005f38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f3c:	4639      	mov	r1, r7
 8005f3e:	4640      	mov	r0, r8
 8005f40:	4798      	blx	r3
 8005f42:	2800      	cmp	r0, #0
 8005f44:	f43f aedf 	beq.w	8005d06 <_scanf_float+0x46>
 8005f48:	e6ea      	b.n	8005d20 <_scanf_float+0x60>
 8005f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f52:	463a      	mov	r2, r7
 8005f54:	4640      	mov	r0, r8
 8005f56:	4798      	blx	r3
 8005f58:	6923      	ldr	r3, [r4, #16]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	6123      	str	r3, [r4, #16]
 8005f5e:	e6ec      	b.n	8005d3a <_scanf_float+0x7a>
 8005f60:	1e6b      	subs	r3, r5, #1
 8005f62:	2b06      	cmp	r3, #6
 8005f64:	d825      	bhi.n	8005fb2 <_scanf_float+0x2f2>
 8005f66:	2d02      	cmp	r5, #2
 8005f68:	d836      	bhi.n	8005fd8 <_scanf_float+0x318>
 8005f6a:	455e      	cmp	r6, fp
 8005f6c:	f67f aee8 	bls.w	8005d40 <_scanf_float+0x80>
 8005f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f78:	463a      	mov	r2, r7
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4798      	blx	r3
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	6123      	str	r3, [r4, #16]
 8005f84:	e7f1      	b.n	8005f6a <_scanf_float+0x2aa>
 8005f86:	9802      	ldr	r0, [sp, #8]
 8005f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005f90:	9002      	str	r0, [sp, #8]
 8005f92:	463a      	mov	r2, r7
 8005f94:	4640      	mov	r0, r8
 8005f96:	4798      	blx	r3
 8005f98:	6923      	ldr	r3, [r4, #16]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	6123      	str	r3, [r4, #16]
 8005f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fa2:	fa5f fa8a 	uxtb.w	sl, sl
 8005fa6:	f1ba 0f02 	cmp.w	sl, #2
 8005faa:	d1ec      	bne.n	8005f86 <_scanf_float+0x2c6>
 8005fac:	3d03      	subs	r5, #3
 8005fae:	b2ed      	uxtb	r5, r5
 8005fb0:	1b76      	subs	r6, r6, r5
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	05da      	lsls	r2, r3, #23
 8005fb6:	d52f      	bpl.n	8006018 <_scanf_float+0x358>
 8005fb8:	055b      	lsls	r3, r3, #21
 8005fba:	d510      	bpl.n	8005fde <_scanf_float+0x31e>
 8005fbc:	455e      	cmp	r6, fp
 8005fbe:	f67f aebf 	bls.w	8005d40 <_scanf_float+0x80>
 8005fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fca:	463a      	mov	r2, r7
 8005fcc:	4640      	mov	r0, r8
 8005fce:	4798      	blx	r3
 8005fd0:	6923      	ldr	r3, [r4, #16]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	6123      	str	r3, [r4, #16]
 8005fd6:	e7f1      	b.n	8005fbc <_scanf_float+0x2fc>
 8005fd8:	46aa      	mov	sl, r5
 8005fda:	9602      	str	r6, [sp, #8]
 8005fdc:	e7df      	b.n	8005f9e <_scanf_float+0x2de>
 8005fde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	2965      	cmp	r1, #101	; 0x65
 8005fe6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fea:	f106 35ff 	add.w	r5, r6, #4294967295
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	d00c      	beq.n	800600c <_scanf_float+0x34c>
 8005ff2:	2945      	cmp	r1, #69	; 0x45
 8005ff4:	d00a      	beq.n	800600c <_scanf_float+0x34c>
 8005ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ffa:	463a      	mov	r2, r7
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4798      	blx	r3
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006006:	3b01      	subs	r3, #1
 8006008:	1eb5      	subs	r5, r6, #2
 800600a:	6123      	str	r3, [r4, #16]
 800600c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006010:	463a      	mov	r2, r7
 8006012:	4640      	mov	r0, r8
 8006014:	4798      	blx	r3
 8006016:	462e      	mov	r6, r5
 8006018:	6825      	ldr	r5, [r4, #0]
 800601a:	f015 0510 	ands.w	r5, r5, #16
 800601e:	d158      	bne.n	80060d2 <_scanf_float+0x412>
 8006020:	7035      	strb	r5, [r6, #0]
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602c:	d11c      	bne.n	8006068 <_scanf_float+0x3a8>
 800602e:	9b01      	ldr	r3, [sp, #4]
 8006030:	454b      	cmp	r3, r9
 8006032:	eba3 0209 	sub.w	r2, r3, r9
 8006036:	d124      	bne.n	8006082 <_scanf_float+0x3c2>
 8006038:	2200      	movs	r2, #0
 800603a:	4659      	mov	r1, fp
 800603c:	4640      	mov	r0, r8
 800603e:	f000 fe9d 	bl	8006d7c <_strtod_r>
 8006042:	9b03      	ldr	r3, [sp, #12]
 8006044:	6821      	ldr	r1, [r4, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f011 0f02 	tst.w	r1, #2
 800604c:	ec57 6b10 	vmov	r6, r7, d0
 8006050:	f103 0204 	add.w	r2, r3, #4
 8006054:	d020      	beq.n	8006098 <_scanf_float+0x3d8>
 8006056:	9903      	ldr	r1, [sp, #12]
 8006058:	600a      	str	r2, [r1, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	e9c3 6700 	strd	r6, r7, [r3]
 8006060:	68e3      	ldr	r3, [r4, #12]
 8006062:	3301      	adds	r3, #1
 8006064:	60e3      	str	r3, [r4, #12]
 8006066:	e66c      	b.n	8005d42 <_scanf_float+0x82>
 8006068:	9b04      	ldr	r3, [sp, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0e4      	beq.n	8006038 <_scanf_float+0x378>
 800606e:	9905      	ldr	r1, [sp, #20]
 8006070:	230a      	movs	r3, #10
 8006072:	462a      	mov	r2, r5
 8006074:	3101      	adds	r1, #1
 8006076:	4640      	mov	r0, r8
 8006078:	f000 ff0a 	bl	8006e90 <_strtol_r>
 800607c:	9b04      	ldr	r3, [sp, #16]
 800607e:	9e05      	ldr	r6, [sp, #20]
 8006080:	1ac2      	subs	r2, r0, r3
 8006082:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006086:	429e      	cmp	r6, r3
 8006088:	bf28      	it	cs
 800608a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800608e:	4912      	ldr	r1, [pc, #72]	; (80060d8 <_scanf_float+0x418>)
 8006090:	4630      	mov	r0, r6
 8006092:	f000 f82b 	bl	80060ec <siprintf>
 8006096:	e7cf      	b.n	8006038 <_scanf_float+0x378>
 8006098:	f011 0f04 	tst.w	r1, #4
 800609c:	9903      	ldr	r1, [sp, #12]
 800609e:	600a      	str	r2, [r1, #0]
 80060a0:	d1db      	bne.n	800605a <_scanf_float+0x39a>
 80060a2:	f8d3 8000 	ldr.w	r8, [r3]
 80060a6:	ee10 2a10 	vmov	r2, s0
 80060aa:	ee10 0a10 	vmov	r0, s0
 80060ae:	463b      	mov	r3, r7
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa fd43 	bl	8000b3c <__aeabi_dcmpun>
 80060b6:	b128      	cbz	r0, 80060c4 <_scanf_float+0x404>
 80060b8:	4808      	ldr	r0, [pc, #32]	; (80060dc <_scanf_float+0x41c>)
 80060ba:	f000 f811 	bl	80060e0 <nanf>
 80060be:	ed88 0a00 	vstr	s0, [r8]
 80060c2:	e7cd      	b.n	8006060 <_scanf_float+0x3a0>
 80060c4:	4630      	mov	r0, r6
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa fd96 	bl	8000bf8 <__aeabi_d2f>
 80060cc:	f8c8 0000 	str.w	r0, [r8]
 80060d0:	e7c6      	b.n	8006060 <_scanf_float+0x3a0>
 80060d2:	2500      	movs	r5, #0
 80060d4:	e635      	b.n	8005d42 <_scanf_float+0x82>
 80060d6:	bf00      	nop
 80060d8:	08009cd4 	.word	0x08009cd4
 80060dc:	0800a0f0 	.word	0x0800a0f0

080060e0 <nanf>:
 80060e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80060e8 <nanf+0x8>
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	7fc00000 	.word	0x7fc00000

080060ec <siprintf>:
 80060ec:	b40e      	push	{r1, r2, r3}
 80060ee:	b500      	push	{lr}
 80060f0:	b09c      	sub	sp, #112	; 0x70
 80060f2:	ab1d      	add	r3, sp, #116	; 0x74
 80060f4:	9002      	str	r0, [sp, #8]
 80060f6:	9006      	str	r0, [sp, #24]
 80060f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060fc:	4809      	ldr	r0, [pc, #36]	; (8006124 <siprintf+0x38>)
 80060fe:	9107      	str	r1, [sp, #28]
 8006100:	9104      	str	r1, [sp, #16]
 8006102:	4909      	ldr	r1, [pc, #36]	; (8006128 <siprintf+0x3c>)
 8006104:	f853 2b04 	ldr.w	r2, [r3], #4
 8006108:	9105      	str	r1, [sp, #20]
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	a902      	add	r1, sp, #8
 8006110:	f002 fea6 	bl	8008e60 <_svfiprintf_r>
 8006114:	9b02      	ldr	r3, [sp, #8]
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	b01c      	add	sp, #112	; 0x70
 800611c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006120:	b003      	add	sp, #12
 8006122:	4770      	bx	lr
 8006124:	20000010 	.word	0x20000010
 8006128:	ffff0208 	.word	0xffff0208

0800612c <sulp>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	4604      	mov	r4, r0
 8006130:	460d      	mov	r5, r1
 8006132:	ec45 4b10 	vmov	d0, r4, r5
 8006136:	4616      	mov	r6, r2
 8006138:	f002 fc2e 	bl	8008998 <__ulp>
 800613c:	ec51 0b10 	vmov	r0, r1, d0
 8006140:	b17e      	cbz	r6, 8006162 <sulp+0x36>
 8006142:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006146:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800614a:	2b00      	cmp	r3, #0
 800614c:	dd09      	ble.n	8006162 <sulp+0x36>
 800614e:	051b      	lsls	r3, r3, #20
 8006150:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006154:	2400      	movs	r4, #0
 8006156:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800615a:	4622      	mov	r2, r4
 800615c:	462b      	mov	r3, r5
 800615e:	f7fa fa53 	bl	8000608 <__aeabi_dmul>
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	0000      	movs	r0, r0
	...

08006168 <_strtod_l>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	b0a3      	sub	sp, #140	; 0x8c
 800616e:	461f      	mov	r7, r3
 8006170:	2300      	movs	r3, #0
 8006172:	931e      	str	r3, [sp, #120]	; 0x78
 8006174:	4ba4      	ldr	r3, [pc, #656]	; (8006408 <_strtod_l+0x2a0>)
 8006176:	9219      	str	r2, [sp, #100]	; 0x64
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	9307      	str	r3, [sp, #28]
 800617c:	4604      	mov	r4, r0
 800617e:	4618      	mov	r0, r3
 8006180:	4688      	mov	r8, r1
 8006182:	f7fa f82d 	bl	80001e0 <strlen>
 8006186:	f04f 0a00 	mov.w	sl, #0
 800618a:	4605      	mov	r5, r0
 800618c:	f04f 0b00 	mov.w	fp, #0
 8006190:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006194:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006196:	781a      	ldrb	r2, [r3, #0]
 8006198:	2a2b      	cmp	r2, #43	; 0x2b
 800619a:	d04c      	beq.n	8006236 <_strtod_l+0xce>
 800619c:	d839      	bhi.n	8006212 <_strtod_l+0xaa>
 800619e:	2a0d      	cmp	r2, #13
 80061a0:	d832      	bhi.n	8006208 <_strtod_l+0xa0>
 80061a2:	2a08      	cmp	r2, #8
 80061a4:	d832      	bhi.n	800620c <_strtod_l+0xa4>
 80061a6:	2a00      	cmp	r2, #0
 80061a8:	d03c      	beq.n	8006224 <_strtod_l+0xbc>
 80061aa:	2300      	movs	r3, #0
 80061ac:	930e      	str	r3, [sp, #56]	; 0x38
 80061ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80061b0:	7833      	ldrb	r3, [r6, #0]
 80061b2:	2b30      	cmp	r3, #48	; 0x30
 80061b4:	f040 80b4 	bne.w	8006320 <_strtod_l+0x1b8>
 80061b8:	7873      	ldrb	r3, [r6, #1]
 80061ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80061be:	2b58      	cmp	r3, #88	; 0x58
 80061c0:	d16c      	bne.n	800629c <_strtod_l+0x134>
 80061c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	ab1e      	add	r3, sp, #120	; 0x78
 80061c8:	9702      	str	r7, [sp, #8]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	4a8f      	ldr	r2, [pc, #572]	; (800640c <_strtod_l+0x2a4>)
 80061ce:	ab1f      	add	r3, sp, #124	; 0x7c
 80061d0:	a91d      	add	r1, sp, #116	; 0x74
 80061d2:	4620      	mov	r0, r4
 80061d4:	f001 fd40 	bl	8007c58 <__gethex>
 80061d8:	f010 0707 	ands.w	r7, r0, #7
 80061dc:	4605      	mov	r5, r0
 80061de:	d005      	beq.n	80061ec <_strtod_l+0x84>
 80061e0:	2f06      	cmp	r7, #6
 80061e2:	d12a      	bne.n	800623a <_strtod_l+0xd2>
 80061e4:	3601      	adds	r6, #1
 80061e6:	2300      	movs	r3, #0
 80061e8:	961d      	str	r6, [sp, #116]	; 0x74
 80061ea:	930e      	str	r3, [sp, #56]	; 0x38
 80061ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 8596 	bne.w	8006d20 <_strtod_l+0xbb8>
 80061f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061f6:	b1db      	cbz	r3, 8006230 <_strtod_l+0xc8>
 80061f8:	4652      	mov	r2, sl
 80061fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80061fe:	ec43 2b10 	vmov	d0, r2, r3
 8006202:	b023      	add	sp, #140	; 0x8c
 8006204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006208:	2a20      	cmp	r2, #32
 800620a:	d1ce      	bne.n	80061aa <_strtod_l+0x42>
 800620c:	3301      	adds	r3, #1
 800620e:	931d      	str	r3, [sp, #116]	; 0x74
 8006210:	e7c0      	b.n	8006194 <_strtod_l+0x2c>
 8006212:	2a2d      	cmp	r2, #45	; 0x2d
 8006214:	d1c9      	bne.n	80061aa <_strtod_l+0x42>
 8006216:	2201      	movs	r2, #1
 8006218:	920e      	str	r2, [sp, #56]	; 0x38
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	921d      	str	r2, [sp, #116]	; 0x74
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1c4      	bne.n	80061ae <_strtod_l+0x46>
 8006224:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006226:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 8576 	bne.w	8006d1c <_strtod_l+0xbb4>
 8006230:	4652      	mov	r2, sl
 8006232:	465b      	mov	r3, fp
 8006234:	e7e3      	b.n	80061fe <_strtod_l+0x96>
 8006236:	2200      	movs	r2, #0
 8006238:	e7ee      	b.n	8006218 <_strtod_l+0xb0>
 800623a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800623c:	b13a      	cbz	r2, 800624e <_strtod_l+0xe6>
 800623e:	2135      	movs	r1, #53	; 0x35
 8006240:	a820      	add	r0, sp, #128	; 0x80
 8006242:	f002 fcb4 	bl	8008bae <__copybits>
 8006246:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006248:	4620      	mov	r0, r4
 800624a:	f002 f879 	bl	8008340 <_Bfree>
 800624e:	3f01      	subs	r7, #1
 8006250:	2f05      	cmp	r7, #5
 8006252:	d807      	bhi.n	8006264 <_strtod_l+0xfc>
 8006254:	e8df f007 	tbb	[pc, r7]
 8006258:	1d180b0e 	.word	0x1d180b0e
 800625c:	030e      	.short	0x030e
 800625e:	f04f 0b00 	mov.w	fp, #0
 8006262:	46da      	mov	sl, fp
 8006264:	0728      	lsls	r0, r5, #28
 8006266:	d5c1      	bpl.n	80061ec <_strtod_l+0x84>
 8006268:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800626c:	e7be      	b.n	80061ec <_strtod_l+0x84>
 800626e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006272:	e7f7      	b.n	8006264 <_strtod_l+0xfc>
 8006274:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006278:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800627a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800627e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006282:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006286:	e7ed      	b.n	8006264 <_strtod_l+0xfc>
 8006288:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006410 <_strtod_l+0x2a8>
 800628c:	f04f 0a00 	mov.w	sl, #0
 8006290:	e7e8      	b.n	8006264 <_strtod_l+0xfc>
 8006292:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006296:	f04f 3aff 	mov.w	sl, #4294967295
 800629a:	e7e3      	b.n	8006264 <_strtod_l+0xfc>
 800629c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	921d      	str	r2, [sp, #116]	; 0x74
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b30      	cmp	r3, #48	; 0x30
 80062a6:	d0f9      	beq.n	800629c <_strtod_l+0x134>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d09f      	beq.n	80061ec <_strtod_l+0x84>
 80062ac:	2301      	movs	r3, #1
 80062ae:	f04f 0900 	mov.w	r9, #0
 80062b2:	9304      	str	r3, [sp, #16]
 80062b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062b6:	930a      	str	r3, [sp, #40]	; 0x28
 80062b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80062bc:	464f      	mov	r7, r9
 80062be:	220a      	movs	r2, #10
 80062c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80062c2:	7806      	ldrb	r6, [r0, #0]
 80062c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80062c8:	b2d9      	uxtb	r1, r3
 80062ca:	2909      	cmp	r1, #9
 80062cc:	d92a      	bls.n	8006324 <_strtod_l+0x1bc>
 80062ce:	9907      	ldr	r1, [sp, #28]
 80062d0:	462a      	mov	r2, r5
 80062d2:	f002 fedd 	bl	8009090 <strncmp>
 80062d6:	b398      	cbz	r0, 8006340 <_strtod_l+0x1d8>
 80062d8:	2000      	movs	r0, #0
 80062da:	4633      	mov	r3, r6
 80062dc:	463d      	mov	r5, r7
 80062de:	9007      	str	r0, [sp, #28]
 80062e0:	4602      	mov	r2, r0
 80062e2:	2b65      	cmp	r3, #101	; 0x65
 80062e4:	d001      	beq.n	80062ea <_strtod_l+0x182>
 80062e6:	2b45      	cmp	r3, #69	; 0x45
 80062e8:	d118      	bne.n	800631c <_strtod_l+0x1b4>
 80062ea:	b91d      	cbnz	r5, 80062f4 <_strtod_l+0x18c>
 80062ec:	9b04      	ldr	r3, [sp, #16]
 80062ee:	4303      	orrs	r3, r0
 80062f0:	d098      	beq.n	8006224 <_strtod_l+0xbc>
 80062f2:	2500      	movs	r5, #0
 80062f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80062f8:	f108 0301 	add.w	r3, r8, #1
 80062fc:	931d      	str	r3, [sp, #116]	; 0x74
 80062fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006302:	2b2b      	cmp	r3, #43	; 0x2b
 8006304:	d075      	beq.n	80063f2 <_strtod_l+0x28a>
 8006306:	2b2d      	cmp	r3, #45	; 0x2d
 8006308:	d07b      	beq.n	8006402 <_strtod_l+0x29a>
 800630a:	f04f 0c00 	mov.w	ip, #0
 800630e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006312:	2909      	cmp	r1, #9
 8006314:	f240 8082 	bls.w	800641c <_strtod_l+0x2b4>
 8006318:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800631c:	2600      	movs	r6, #0
 800631e:	e09d      	b.n	800645c <_strtod_l+0x2f4>
 8006320:	2300      	movs	r3, #0
 8006322:	e7c4      	b.n	80062ae <_strtod_l+0x146>
 8006324:	2f08      	cmp	r7, #8
 8006326:	bfd8      	it	le
 8006328:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800632a:	f100 0001 	add.w	r0, r0, #1
 800632e:	bfda      	itte	le
 8006330:	fb02 3301 	mlale	r3, r2, r1, r3
 8006334:	9309      	strle	r3, [sp, #36]	; 0x24
 8006336:	fb02 3909 	mlagt	r9, r2, r9, r3
 800633a:	3701      	adds	r7, #1
 800633c:	901d      	str	r0, [sp, #116]	; 0x74
 800633e:	e7bf      	b.n	80062c0 <_strtod_l+0x158>
 8006340:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006342:	195a      	adds	r2, r3, r5
 8006344:	921d      	str	r2, [sp, #116]	; 0x74
 8006346:	5d5b      	ldrb	r3, [r3, r5]
 8006348:	2f00      	cmp	r7, #0
 800634a:	d037      	beq.n	80063bc <_strtod_l+0x254>
 800634c:	9007      	str	r0, [sp, #28]
 800634e:	463d      	mov	r5, r7
 8006350:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006354:	2a09      	cmp	r2, #9
 8006356:	d912      	bls.n	800637e <_strtod_l+0x216>
 8006358:	2201      	movs	r2, #1
 800635a:	e7c2      	b.n	80062e2 <_strtod_l+0x17a>
 800635c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	921d      	str	r2, [sp, #116]	; 0x74
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	3001      	adds	r0, #1
 8006366:	2b30      	cmp	r3, #48	; 0x30
 8006368:	d0f8      	beq.n	800635c <_strtod_l+0x1f4>
 800636a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800636e:	2a08      	cmp	r2, #8
 8006370:	f200 84db 	bhi.w	8006d2a <_strtod_l+0xbc2>
 8006374:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006376:	9007      	str	r0, [sp, #28]
 8006378:	2000      	movs	r0, #0
 800637a:	920a      	str	r2, [sp, #40]	; 0x28
 800637c:	4605      	mov	r5, r0
 800637e:	3b30      	subs	r3, #48	; 0x30
 8006380:	f100 0201 	add.w	r2, r0, #1
 8006384:	d014      	beq.n	80063b0 <_strtod_l+0x248>
 8006386:	9907      	ldr	r1, [sp, #28]
 8006388:	4411      	add	r1, r2
 800638a:	9107      	str	r1, [sp, #28]
 800638c:	462a      	mov	r2, r5
 800638e:	eb00 0e05 	add.w	lr, r0, r5
 8006392:	210a      	movs	r1, #10
 8006394:	4572      	cmp	r2, lr
 8006396:	d113      	bne.n	80063c0 <_strtod_l+0x258>
 8006398:	182a      	adds	r2, r5, r0
 800639a:	2a08      	cmp	r2, #8
 800639c:	f105 0501 	add.w	r5, r5, #1
 80063a0:	4405      	add	r5, r0
 80063a2:	dc1c      	bgt.n	80063de <_strtod_l+0x276>
 80063a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063a6:	220a      	movs	r2, #10
 80063a8:	fb02 3301 	mla	r3, r2, r1, r3
 80063ac:	9309      	str	r3, [sp, #36]	; 0x24
 80063ae:	2200      	movs	r2, #0
 80063b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063b2:	1c59      	adds	r1, r3, #1
 80063b4:	911d      	str	r1, [sp, #116]	; 0x74
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	4610      	mov	r0, r2
 80063ba:	e7c9      	b.n	8006350 <_strtod_l+0x1e8>
 80063bc:	4638      	mov	r0, r7
 80063be:	e7d2      	b.n	8006366 <_strtod_l+0x1fe>
 80063c0:	2a08      	cmp	r2, #8
 80063c2:	dc04      	bgt.n	80063ce <_strtod_l+0x266>
 80063c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80063c6:	434e      	muls	r6, r1
 80063c8:	9609      	str	r6, [sp, #36]	; 0x24
 80063ca:	3201      	adds	r2, #1
 80063cc:	e7e2      	b.n	8006394 <_strtod_l+0x22c>
 80063ce:	f102 0c01 	add.w	ip, r2, #1
 80063d2:	f1bc 0f10 	cmp.w	ip, #16
 80063d6:	bfd8      	it	le
 80063d8:	fb01 f909 	mulle.w	r9, r1, r9
 80063dc:	e7f5      	b.n	80063ca <_strtod_l+0x262>
 80063de:	2d10      	cmp	r5, #16
 80063e0:	bfdc      	itt	le
 80063e2:	220a      	movle	r2, #10
 80063e4:	fb02 3909 	mlale	r9, r2, r9, r3
 80063e8:	e7e1      	b.n	80063ae <_strtod_l+0x246>
 80063ea:	2300      	movs	r3, #0
 80063ec:	9307      	str	r3, [sp, #28]
 80063ee:	2201      	movs	r2, #1
 80063f0:	e77c      	b.n	80062ec <_strtod_l+0x184>
 80063f2:	f04f 0c00 	mov.w	ip, #0
 80063f6:	f108 0302 	add.w	r3, r8, #2
 80063fa:	931d      	str	r3, [sp, #116]	; 0x74
 80063fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006400:	e785      	b.n	800630e <_strtod_l+0x1a6>
 8006402:	f04f 0c01 	mov.w	ip, #1
 8006406:	e7f6      	b.n	80063f6 <_strtod_l+0x28e>
 8006408:	08009f30 	.word	0x08009f30
 800640c:	08009cdc 	.word	0x08009cdc
 8006410:	7ff00000 	.word	0x7ff00000
 8006414:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006416:	1c59      	adds	r1, r3, #1
 8006418:	911d      	str	r1, [sp, #116]	; 0x74
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b30      	cmp	r3, #48	; 0x30
 800641e:	d0f9      	beq.n	8006414 <_strtod_l+0x2ac>
 8006420:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006424:	2908      	cmp	r1, #8
 8006426:	f63f af79 	bhi.w	800631c <_strtod_l+0x1b4>
 800642a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800642e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006430:	9308      	str	r3, [sp, #32]
 8006432:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	911d      	str	r1, [sp, #116]	; 0x74
 8006438:	785b      	ldrb	r3, [r3, #1]
 800643a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800643e:	2e09      	cmp	r6, #9
 8006440:	d937      	bls.n	80064b2 <_strtod_l+0x34a>
 8006442:	9e08      	ldr	r6, [sp, #32]
 8006444:	1b89      	subs	r1, r1, r6
 8006446:	2908      	cmp	r1, #8
 8006448:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800644c:	dc02      	bgt.n	8006454 <_strtod_l+0x2ec>
 800644e:	4576      	cmp	r6, lr
 8006450:	bfa8      	it	ge
 8006452:	4676      	movge	r6, lr
 8006454:	f1bc 0f00 	cmp.w	ip, #0
 8006458:	d000      	beq.n	800645c <_strtod_l+0x2f4>
 800645a:	4276      	negs	r6, r6
 800645c:	2d00      	cmp	r5, #0
 800645e:	d14f      	bne.n	8006500 <_strtod_l+0x398>
 8006460:	9904      	ldr	r1, [sp, #16]
 8006462:	4301      	orrs	r1, r0
 8006464:	f47f aec2 	bne.w	80061ec <_strtod_l+0x84>
 8006468:	2a00      	cmp	r2, #0
 800646a:	f47f aedb 	bne.w	8006224 <_strtod_l+0xbc>
 800646e:	2b69      	cmp	r3, #105	; 0x69
 8006470:	d027      	beq.n	80064c2 <_strtod_l+0x35a>
 8006472:	dc24      	bgt.n	80064be <_strtod_l+0x356>
 8006474:	2b49      	cmp	r3, #73	; 0x49
 8006476:	d024      	beq.n	80064c2 <_strtod_l+0x35a>
 8006478:	2b4e      	cmp	r3, #78	; 0x4e
 800647a:	f47f aed3 	bne.w	8006224 <_strtod_l+0xbc>
 800647e:	499e      	ldr	r1, [pc, #632]	; (80066f8 <_strtod_l+0x590>)
 8006480:	a81d      	add	r0, sp, #116	; 0x74
 8006482:	f001 fe41 	bl	8008108 <__match>
 8006486:	2800      	cmp	r0, #0
 8006488:	f43f aecc 	beq.w	8006224 <_strtod_l+0xbc>
 800648c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b28      	cmp	r3, #40	; 0x28
 8006492:	d12d      	bne.n	80064f0 <_strtod_l+0x388>
 8006494:	4999      	ldr	r1, [pc, #612]	; (80066fc <_strtod_l+0x594>)
 8006496:	aa20      	add	r2, sp, #128	; 0x80
 8006498:	a81d      	add	r0, sp, #116	; 0x74
 800649a:	f001 fe49 	bl	8008130 <__hexnan>
 800649e:	2805      	cmp	r0, #5
 80064a0:	d126      	bne.n	80064f0 <_strtod_l+0x388>
 80064a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80064a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80064ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80064b0:	e69c      	b.n	80061ec <_strtod_l+0x84>
 80064b2:	210a      	movs	r1, #10
 80064b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80064b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80064bc:	e7b9      	b.n	8006432 <_strtod_l+0x2ca>
 80064be:	2b6e      	cmp	r3, #110	; 0x6e
 80064c0:	e7db      	b.n	800647a <_strtod_l+0x312>
 80064c2:	498f      	ldr	r1, [pc, #572]	; (8006700 <_strtod_l+0x598>)
 80064c4:	a81d      	add	r0, sp, #116	; 0x74
 80064c6:	f001 fe1f 	bl	8008108 <__match>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	f43f aeaa 	beq.w	8006224 <_strtod_l+0xbc>
 80064d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064d2:	498c      	ldr	r1, [pc, #560]	; (8006704 <_strtod_l+0x59c>)
 80064d4:	3b01      	subs	r3, #1
 80064d6:	a81d      	add	r0, sp, #116	; 0x74
 80064d8:	931d      	str	r3, [sp, #116]	; 0x74
 80064da:	f001 fe15 	bl	8008108 <__match>
 80064de:	b910      	cbnz	r0, 80064e6 <_strtod_l+0x37e>
 80064e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064e2:	3301      	adds	r3, #1
 80064e4:	931d      	str	r3, [sp, #116]	; 0x74
 80064e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006714 <_strtod_l+0x5ac>
 80064ea:	f04f 0a00 	mov.w	sl, #0
 80064ee:	e67d      	b.n	80061ec <_strtod_l+0x84>
 80064f0:	4885      	ldr	r0, [pc, #532]	; (8006708 <_strtod_l+0x5a0>)
 80064f2:	f002 fdb5 	bl	8009060 <nan>
 80064f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80064fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80064fe:	e675      	b.n	80061ec <_strtod_l+0x84>
 8006500:	9b07      	ldr	r3, [sp, #28]
 8006502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006504:	1af3      	subs	r3, r6, r3
 8006506:	2f00      	cmp	r7, #0
 8006508:	bf08      	it	eq
 800650a:	462f      	moveq	r7, r5
 800650c:	2d10      	cmp	r5, #16
 800650e:	9308      	str	r3, [sp, #32]
 8006510:	46a8      	mov	r8, r5
 8006512:	bfa8      	it	ge
 8006514:	f04f 0810 	movge.w	r8, #16
 8006518:	f7f9 fffc 	bl	8000514 <__aeabi_ui2d>
 800651c:	2d09      	cmp	r5, #9
 800651e:	4682      	mov	sl, r0
 8006520:	468b      	mov	fp, r1
 8006522:	dd13      	ble.n	800654c <_strtod_l+0x3e4>
 8006524:	4b79      	ldr	r3, [pc, #484]	; (800670c <_strtod_l+0x5a4>)
 8006526:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800652a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800652e:	f7fa f86b 	bl	8000608 <__aeabi_dmul>
 8006532:	4682      	mov	sl, r0
 8006534:	4648      	mov	r0, r9
 8006536:	468b      	mov	fp, r1
 8006538:	f7f9 ffec 	bl	8000514 <__aeabi_ui2d>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4650      	mov	r0, sl
 8006542:	4659      	mov	r1, fp
 8006544:	f7f9 feaa 	bl	800029c <__adddf3>
 8006548:	4682      	mov	sl, r0
 800654a:	468b      	mov	fp, r1
 800654c:	2d0f      	cmp	r5, #15
 800654e:	dc38      	bgt.n	80065c2 <_strtod_l+0x45a>
 8006550:	9b08      	ldr	r3, [sp, #32]
 8006552:	2b00      	cmp	r3, #0
 8006554:	f43f ae4a 	beq.w	80061ec <_strtod_l+0x84>
 8006558:	dd24      	ble.n	80065a4 <_strtod_l+0x43c>
 800655a:	2b16      	cmp	r3, #22
 800655c:	dc0b      	bgt.n	8006576 <_strtod_l+0x40e>
 800655e:	4d6b      	ldr	r5, [pc, #428]	; (800670c <_strtod_l+0x5a4>)
 8006560:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006564:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006568:	4652      	mov	r2, sl
 800656a:	465b      	mov	r3, fp
 800656c:	f7fa f84c 	bl	8000608 <__aeabi_dmul>
 8006570:	4682      	mov	sl, r0
 8006572:	468b      	mov	fp, r1
 8006574:	e63a      	b.n	80061ec <_strtod_l+0x84>
 8006576:	9a08      	ldr	r2, [sp, #32]
 8006578:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800657c:	4293      	cmp	r3, r2
 800657e:	db20      	blt.n	80065c2 <_strtod_l+0x45a>
 8006580:	4c62      	ldr	r4, [pc, #392]	; (800670c <_strtod_l+0x5a4>)
 8006582:	f1c5 050f 	rsb	r5, r5, #15
 8006586:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800658a:	4652      	mov	r2, sl
 800658c:	465b      	mov	r3, fp
 800658e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006592:	f7fa f839 	bl	8000608 <__aeabi_dmul>
 8006596:	9b08      	ldr	r3, [sp, #32]
 8006598:	1b5d      	subs	r5, r3, r5
 800659a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800659e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80065a2:	e7e3      	b.n	800656c <_strtod_l+0x404>
 80065a4:	9b08      	ldr	r3, [sp, #32]
 80065a6:	3316      	adds	r3, #22
 80065a8:	db0b      	blt.n	80065c2 <_strtod_l+0x45a>
 80065aa:	9b07      	ldr	r3, [sp, #28]
 80065ac:	4a57      	ldr	r2, [pc, #348]	; (800670c <_strtod_l+0x5a4>)
 80065ae:	1b9e      	subs	r6, r3, r6
 80065b0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80065b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065b8:	4650      	mov	r0, sl
 80065ba:	4659      	mov	r1, fp
 80065bc:	f7fa f94e 	bl	800085c <__aeabi_ddiv>
 80065c0:	e7d6      	b.n	8006570 <_strtod_l+0x408>
 80065c2:	9b08      	ldr	r3, [sp, #32]
 80065c4:	eba5 0808 	sub.w	r8, r5, r8
 80065c8:	4498      	add	r8, r3
 80065ca:	f1b8 0f00 	cmp.w	r8, #0
 80065ce:	dd71      	ble.n	80066b4 <_strtod_l+0x54c>
 80065d0:	f018 030f 	ands.w	r3, r8, #15
 80065d4:	d00a      	beq.n	80065ec <_strtod_l+0x484>
 80065d6:	494d      	ldr	r1, [pc, #308]	; (800670c <_strtod_l+0x5a4>)
 80065d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065dc:	4652      	mov	r2, sl
 80065de:	465b      	mov	r3, fp
 80065e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065e4:	f7fa f810 	bl	8000608 <__aeabi_dmul>
 80065e8:	4682      	mov	sl, r0
 80065ea:	468b      	mov	fp, r1
 80065ec:	f038 080f 	bics.w	r8, r8, #15
 80065f0:	d04d      	beq.n	800668e <_strtod_l+0x526>
 80065f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80065f6:	dd22      	ble.n	800663e <_strtod_l+0x4d6>
 80065f8:	2500      	movs	r5, #0
 80065fa:	462e      	mov	r6, r5
 80065fc:	9509      	str	r5, [sp, #36]	; 0x24
 80065fe:	9507      	str	r5, [sp, #28]
 8006600:	2322      	movs	r3, #34	; 0x22
 8006602:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006714 <_strtod_l+0x5ac>
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	f04f 0a00 	mov.w	sl, #0
 800660c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	f43f adec 	beq.w	80061ec <_strtod_l+0x84>
 8006614:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006616:	4620      	mov	r0, r4
 8006618:	f001 fe92 	bl	8008340 <_Bfree>
 800661c:	9907      	ldr	r1, [sp, #28]
 800661e:	4620      	mov	r0, r4
 8006620:	f001 fe8e 	bl	8008340 <_Bfree>
 8006624:	4631      	mov	r1, r6
 8006626:	4620      	mov	r0, r4
 8006628:	f001 fe8a 	bl	8008340 <_Bfree>
 800662c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800662e:	4620      	mov	r0, r4
 8006630:	f001 fe86 	bl	8008340 <_Bfree>
 8006634:	4629      	mov	r1, r5
 8006636:	4620      	mov	r0, r4
 8006638:	f001 fe82 	bl	8008340 <_Bfree>
 800663c:	e5d6      	b.n	80061ec <_strtod_l+0x84>
 800663e:	2300      	movs	r3, #0
 8006640:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006644:	4650      	mov	r0, sl
 8006646:	4659      	mov	r1, fp
 8006648:	4699      	mov	r9, r3
 800664a:	f1b8 0f01 	cmp.w	r8, #1
 800664e:	dc21      	bgt.n	8006694 <_strtod_l+0x52c>
 8006650:	b10b      	cbz	r3, 8006656 <_strtod_l+0x4ee>
 8006652:	4682      	mov	sl, r0
 8006654:	468b      	mov	fp, r1
 8006656:	4b2e      	ldr	r3, [pc, #184]	; (8006710 <_strtod_l+0x5a8>)
 8006658:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800665c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006660:	4652      	mov	r2, sl
 8006662:	465b      	mov	r3, fp
 8006664:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006668:	f7f9 ffce 	bl	8000608 <__aeabi_dmul>
 800666c:	4b29      	ldr	r3, [pc, #164]	; (8006714 <_strtod_l+0x5ac>)
 800666e:	460a      	mov	r2, r1
 8006670:	400b      	ands	r3, r1
 8006672:	4929      	ldr	r1, [pc, #164]	; (8006718 <_strtod_l+0x5b0>)
 8006674:	428b      	cmp	r3, r1
 8006676:	4682      	mov	sl, r0
 8006678:	d8be      	bhi.n	80065f8 <_strtod_l+0x490>
 800667a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800667e:	428b      	cmp	r3, r1
 8006680:	bf86      	itte	hi
 8006682:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800671c <_strtod_l+0x5b4>
 8006686:	f04f 3aff 	movhi.w	sl, #4294967295
 800668a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800668e:	2300      	movs	r3, #0
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	e081      	b.n	8006798 <_strtod_l+0x630>
 8006694:	f018 0f01 	tst.w	r8, #1
 8006698:	d007      	beq.n	80066aa <_strtod_l+0x542>
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <_strtod_l+0x5a8>)
 800669c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f7f9 ffb0 	bl	8000608 <__aeabi_dmul>
 80066a8:	2301      	movs	r3, #1
 80066aa:	f109 0901 	add.w	r9, r9, #1
 80066ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066b2:	e7ca      	b.n	800664a <_strtod_l+0x4e2>
 80066b4:	d0eb      	beq.n	800668e <_strtod_l+0x526>
 80066b6:	f1c8 0800 	rsb	r8, r8, #0
 80066ba:	f018 020f 	ands.w	r2, r8, #15
 80066be:	d00a      	beq.n	80066d6 <_strtod_l+0x56e>
 80066c0:	4b12      	ldr	r3, [pc, #72]	; (800670c <_strtod_l+0x5a4>)
 80066c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066c6:	4650      	mov	r0, sl
 80066c8:	4659      	mov	r1, fp
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f7fa f8c5 	bl	800085c <__aeabi_ddiv>
 80066d2:	4682      	mov	sl, r0
 80066d4:	468b      	mov	fp, r1
 80066d6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80066da:	d0d8      	beq.n	800668e <_strtod_l+0x526>
 80066dc:	f1b8 0f1f 	cmp.w	r8, #31
 80066e0:	dd1e      	ble.n	8006720 <_strtod_l+0x5b8>
 80066e2:	2500      	movs	r5, #0
 80066e4:	462e      	mov	r6, r5
 80066e6:	9509      	str	r5, [sp, #36]	; 0x24
 80066e8:	9507      	str	r5, [sp, #28]
 80066ea:	2322      	movs	r3, #34	; 0x22
 80066ec:	f04f 0a00 	mov.w	sl, #0
 80066f0:	f04f 0b00 	mov.w	fp, #0
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	e789      	b.n	800660c <_strtod_l+0x4a4>
 80066f8:	08009cad 	.word	0x08009cad
 80066fc:	08009cf0 	.word	0x08009cf0
 8006700:	08009ca5 	.word	0x08009ca5
 8006704:	08009e34 	.word	0x08009e34
 8006708:	0800a0f0 	.word	0x0800a0f0
 800670c:	08009fd0 	.word	0x08009fd0
 8006710:	08009fa8 	.word	0x08009fa8
 8006714:	7ff00000 	.word	0x7ff00000
 8006718:	7ca00000 	.word	0x7ca00000
 800671c:	7fefffff 	.word	0x7fefffff
 8006720:	f018 0310 	ands.w	r3, r8, #16
 8006724:	bf18      	it	ne
 8006726:	236a      	movne	r3, #106	; 0x6a
 8006728:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006ae0 <_strtod_l+0x978>
 800672c:	9304      	str	r3, [sp, #16]
 800672e:	4650      	mov	r0, sl
 8006730:	4659      	mov	r1, fp
 8006732:	2300      	movs	r3, #0
 8006734:	f018 0f01 	tst.w	r8, #1
 8006738:	d004      	beq.n	8006744 <_strtod_l+0x5dc>
 800673a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800673e:	f7f9 ff63 	bl	8000608 <__aeabi_dmul>
 8006742:	2301      	movs	r3, #1
 8006744:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006748:	f109 0908 	add.w	r9, r9, #8
 800674c:	d1f2      	bne.n	8006734 <_strtod_l+0x5cc>
 800674e:	b10b      	cbz	r3, 8006754 <_strtod_l+0x5ec>
 8006750:	4682      	mov	sl, r0
 8006752:	468b      	mov	fp, r1
 8006754:	9b04      	ldr	r3, [sp, #16]
 8006756:	b1bb      	cbz	r3, 8006788 <_strtod_l+0x620>
 8006758:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800675c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006760:	2b00      	cmp	r3, #0
 8006762:	4659      	mov	r1, fp
 8006764:	dd10      	ble.n	8006788 <_strtod_l+0x620>
 8006766:	2b1f      	cmp	r3, #31
 8006768:	f340 8128 	ble.w	80069bc <_strtod_l+0x854>
 800676c:	2b34      	cmp	r3, #52	; 0x34
 800676e:	bfde      	ittt	le
 8006770:	3b20      	suble	r3, #32
 8006772:	f04f 32ff 	movle.w	r2, #4294967295
 8006776:	fa02 f303 	lslle.w	r3, r2, r3
 800677a:	f04f 0a00 	mov.w	sl, #0
 800677e:	bfcc      	ite	gt
 8006780:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006784:	ea03 0b01 	andle.w	fp, r3, r1
 8006788:	2200      	movs	r2, #0
 800678a:	2300      	movs	r3, #0
 800678c:	4650      	mov	r0, sl
 800678e:	4659      	mov	r1, fp
 8006790:	f7fa f9a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006794:	2800      	cmp	r0, #0
 8006796:	d1a4      	bne.n	80066e2 <_strtod_l+0x57a>
 8006798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800679e:	462b      	mov	r3, r5
 80067a0:	463a      	mov	r2, r7
 80067a2:	4620      	mov	r0, r4
 80067a4:	f001 fe38 	bl	8008418 <__s2b>
 80067a8:	9009      	str	r0, [sp, #36]	; 0x24
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f43f af24 	beq.w	80065f8 <_strtod_l+0x490>
 80067b0:	9b07      	ldr	r3, [sp, #28]
 80067b2:	1b9e      	subs	r6, r3, r6
 80067b4:	9b08      	ldr	r3, [sp, #32]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bfb4      	ite	lt
 80067ba:	4633      	movlt	r3, r6
 80067bc:	2300      	movge	r3, #0
 80067be:	9310      	str	r3, [sp, #64]	; 0x40
 80067c0:	9b08      	ldr	r3, [sp, #32]
 80067c2:	2500      	movs	r5, #0
 80067c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067c8:	9318      	str	r3, [sp, #96]	; 0x60
 80067ca:	462e      	mov	r6, r5
 80067cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ce:	4620      	mov	r0, r4
 80067d0:	6859      	ldr	r1, [r3, #4]
 80067d2:	f001 fd75 	bl	80082c0 <_Balloc>
 80067d6:	9007      	str	r0, [sp, #28]
 80067d8:	2800      	cmp	r0, #0
 80067da:	f43f af11 	beq.w	8006600 <_strtod_l+0x498>
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	691a      	ldr	r2, [r3, #16]
 80067e2:	3202      	adds	r2, #2
 80067e4:	f103 010c 	add.w	r1, r3, #12
 80067e8:	0092      	lsls	r2, r2, #2
 80067ea:	300c      	adds	r0, #12
 80067ec:	f001 fd5a 	bl	80082a4 <memcpy>
 80067f0:	ec4b ab10 	vmov	d0, sl, fp
 80067f4:	aa20      	add	r2, sp, #128	; 0x80
 80067f6:	a91f      	add	r1, sp, #124	; 0x7c
 80067f8:	4620      	mov	r0, r4
 80067fa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80067fe:	f002 f947 	bl	8008a90 <__d2b>
 8006802:	901e      	str	r0, [sp, #120]	; 0x78
 8006804:	2800      	cmp	r0, #0
 8006806:	f43f aefb 	beq.w	8006600 <_strtod_l+0x498>
 800680a:	2101      	movs	r1, #1
 800680c:	4620      	mov	r0, r4
 800680e:	f001 fe9d 	bl	800854c <__i2b>
 8006812:	4606      	mov	r6, r0
 8006814:	2800      	cmp	r0, #0
 8006816:	f43f aef3 	beq.w	8006600 <_strtod_l+0x498>
 800681a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800681c:	9904      	ldr	r1, [sp, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	bfab      	itete	ge
 8006822:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006824:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006826:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006828:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800682c:	bfac      	ite	ge
 800682e:	eb03 0902 	addge.w	r9, r3, r2
 8006832:	1ad7      	sublt	r7, r2, r3
 8006834:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006836:	eba3 0801 	sub.w	r8, r3, r1
 800683a:	4490      	add	r8, r2
 800683c:	4ba3      	ldr	r3, [pc, #652]	; (8006acc <_strtod_l+0x964>)
 800683e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006842:	4598      	cmp	r8, r3
 8006844:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006848:	f280 80cc 	bge.w	80069e4 <_strtod_l+0x87c>
 800684c:	eba3 0308 	sub.w	r3, r3, r8
 8006850:	2b1f      	cmp	r3, #31
 8006852:	eba2 0203 	sub.w	r2, r2, r3
 8006856:	f04f 0101 	mov.w	r1, #1
 800685a:	f300 80b6 	bgt.w	80069ca <_strtod_l+0x862>
 800685e:	fa01 f303 	lsl.w	r3, r1, r3
 8006862:	9311      	str	r3, [sp, #68]	; 0x44
 8006864:	2300      	movs	r3, #0
 8006866:	930c      	str	r3, [sp, #48]	; 0x30
 8006868:	eb09 0802 	add.w	r8, r9, r2
 800686c:	9b04      	ldr	r3, [sp, #16]
 800686e:	45c1      	cmp	r9, r8
 8006870:	4417      	add	r7, r2
 8006872:	441f      	add	r7, r3
 8006874:	464b      	mov	r3, r9
 8006876:	bfa8      	it	ge
 8006878:	4643      	movge	r3, r8
 800687a:	42bb      	cmp	r3, r7
 800687c:	bfa8      	it	ge
 800687e:	463b      	movge	r3, r7
 8006880:	2b00      	cmp	r3, #0
 8006882:	bfc2      	ittt	gt
 8006884:	eba8 0803 	subgt.w	r8, r8, r3
 8006888:	1aff      	subgt	r7, r7, r3
 800688a:	eba9 0903 	subgt.w	r9, r9, r3
 800688e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	dd17      	ble.n	80068c4 <_strtod_l+0x75c>
 8006894:	4631      	mov	r1, r6
 8006896:	461a      	mov	r2, r3
 8006898:	4620      	mov	r0, r4
 800689a:	f001 ff13 	bl	80086c4 <__pow5mult>
 800689e:	4606      	mov	r6, r0
 80068a0:	2800      	cmp	r0, #0
 80068a2:	f43f aead 	beq.w	8006600 <_strtod_l+0x498>
 80068a6:	4601      	mov	r1, r0
 80068a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068aa:	4620      	mov	r0, r4
 80068ac:	f001 fe64 	bl	8008578 <__multiply>
 80068b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f43f aea4 	beq.w	8006600 <_strtod_l+0x498>
 80068b8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80068ba:	4620      	mov	r0, r4
 80068bc:	f001 fd40 	bl	8008340 <_Bfree>
 80068c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068c2:	931e      	str	r3, [sp, #120]	; 0x78
 80068c4:	f1b8 0f00 	cmp.w	r8, #0
 80068c8:	f300 8091 	bgt.w	80069ee <_strtod_l+0x886>
 80068cc:	9b08      	ldr	r3, [sp, #32]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	dd08      	ble.n	80068e4 <_strtod_l+0x77c>
 80068d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80068d4:	9907      	ldr	r1, [sp, #28]
 80068d6:	4620      	mov	r0, r4
 80068d8:	f001 fef4 	bl	80086c4 <__pow5mult>
 80068dc:	9007      	str	r0, [sp, #28]
 80068de:	2800      	cmp	r0, #0
 80068e0:	f43f ae8e 	beq.w	8006600 <_strtod_l+0x498>
 80068e4:	2f00      	cmp	r7, #0
 80068e6:	dd08      	ble.n	80068fa <_strtod_l+0x792>
 80068e8:	9907      	ldr	r1, [sp, #28]
 80068ea:	463a      	mov	r2, r7
 80068ec:	4620      	mov	r0, r4
 80068ee:	f001 ff43 	bl	8008778 <__lshift>
 80068f2:	9007      	str	r0, [sp, #28]
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f43f ae83 	beq.w	8006600 <_strtod_l+0x498>
 80068fa:	f1b9 0f00 	cmp.w	r9, #0
 80068fe:	dd08      	ble.n	8006912 <_strtod_l+0x7aa>
 8006900:	4631      	mov	r1, r6
 8006902:	464a      	mov	r2, r9
 8006904:	4620      	mov	r0, r4
 8006906:	f001 ff37 	bl	8008778 <__lshift>
 800690a:	4606      	mov	r6, r0
 800690c:	2800      	cmp	r0, #0
 800690e:	f43f ae77 	beq.w	8006600 <_strtod_l+0x498>
 8006912:	9a07      	ldr	r2, [sp, #28]
 8006914:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006916:	4620      	mov	r0, r4
 8006918:	f001 ffb6 	bl	8008888 <__mdiff>
 800691c:	4605      	mov	r5, r0
 800691e:	2800      	cmp	r0, #0
 8006920:	f43f ae6e 	beq.w	8006600 <_strtod_l+0x498>
 8006924:	68c3      	ldr	r3, [r0, #12]
 8006926:	930f      	str	r3, [sp, #60]	; 0x3c
 8006928:	2300      	movs	r3, #0
 800692a:	60c3      	str	r3, [r0, #12]
 800692c:	4631      	mov	r1, r6
 800692e:	f001 ff8f 	bl	8008850 <__mcmp>
 8006932:	2800      	cmp	r0, #0
 8006934:	da65      	bge.n	8006a02 <_strtod_l+0x89a>
 8006936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006938:	ea53 030a 	orrs.w	r3, r3, sl
 800693c:	f040 8087 	bne.w	8006a4e <_strtod_l+0x8e6>
 8006940:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006944:	2b00      	cmp	r3, #0
 8006946:	f040 8082 	bne.w	8006a4e <_strtod_l+0x8e6>
 800694a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800694e:	0d1b      	lsrs	r3, r3, #20
 8006950:	051b      	lsls	r3, r3, #20
 8006952:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006956:	d97a      	bls.n	8006a4e <_strtod_l+0x8e6>
 8006958:	696b      	ldr	r3, [r5, #20]
 800695a:	b913      	cbnz	r3, 8006962 <_strtod_l+0x7fa>
 800695c:	692b      	ldr	r3, [r5, #16]
 800695e:	2b01      	cmp	r3, #1
 8006960:	dd75      	ble.n	8006a4e <_strtod_l+0x8e6>
 8006962:	4629      	mov	r1, r5
 8006964:	2201      	movs	r2, #1
 8006966:	4620      	mov	r0, r4
 8006968:	f001 ff06 	bl	8008778 <__lshift>
 800696c:	4631      	mov	r1, r6
 800696e:	4605      	mov	r5, r0
 8006970:	f001 ff6e 	bl	8008850 <__mcmp>
 8006974:	2800      	cmp	r0, #0
 8006976:	dd6a      	ble.n	8006a4e <_strtod_l+0x8e6>
 8006978:	9904      	ldr	r1, [sp, #16]
 800697a:	4a55      	ldr	r2, [pc, #340]	; (8006ad0 <_strtod_l+0x968>)
 800697c:	465b      	mov	r3, fp
 800697e:	2900      	cmp	r1, #0
 8006980:	f000 8085 	beq.w	8006a8e <_strtod_l+0x926>
 8006984:	ea02 010b 	and.w	r1, r2, fp
 8006988:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800698c:	dc7f      	bgt.n	8006a8e <_strtod_l+0x926>
 800698e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006992:	f77f aeaa 	ble.w	80066ea <_strtod_l+0x582>
 8006996:	4a4f      	ldr	r2, [pc, #316]	; (8006ad4 <_strtod_l+0x96c>)
 8006998:	2300      	movs	r3, #0
 800699a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800699e:	4650      	mov	r0, sl
 80069a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80069a4:	4659      	mov	r1, fp
 80069a6:	f7f9 fe2f 	bl	8000608 <__aeabi_dmul>
 80069aa:	460b      	mov	r3, r1
 80069ac:	4303      	orrs	r3, r0
 80069ae:	bf08      	it	eq
 80069b0:	2322      	moveq	r3, #34	; 0x22
 80069b2:	4682      	mov	sl, r0
 80069b4:	468b      	mov	fp, r1
 80069b6:	bf08      	it	eq
 80069b8:	6023      	streq	r3, [r4, #0]
 80069ba:	e62b      	b.n	8006614 <_strtod_l+0x4ac>
 80069bc:	f04f 32ff 	mov.w	r2, #4294967295
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	ea03 0a0a 	and.w	sl, r3, sl
 80069c8:	e6de      	b.n	8006788 <_strtod_l+0x620>
 80069ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80069ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80069d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80069d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80069da:	fa01 f308 	lsl.w	r3, r1, r8
 80069de:	930c      	str	r3, [sp, #48]	; 0x30
 80069e0:	9111      	str	r1, [sp, #68]	; 0x44
 80069e2:	e741      	b.n	8006868 <_strtod_l+0x700>
 80069e4:	2300      	movs	r3, #0
 80069e6:	930c      	str	r3, [sp, #48]	; 0x30
 80069e8:	2301      	movs	r3, #1
 80069ea:	9311      	str	r3, [sp, #68]	; 0x44
 80069ec:	e73c      	b.n	8006868 <_strtod_l+0x700>
 80069ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80069f0:	4642      	mov	r2, r8
 80069f2:	4620      	mov	r0, r4
 80069f4:	f001 fec0 	bl	8008778 <__lshift>
 80069f8:	901e      	str	r0, [sp, #120]	; 0x78
 80069fa:	2800      	cmp	r0, #0
 80069fc:	f47f af66 	bne.w	80068cc <_strtod_l+0x764>
 8006a00:	e5fe      	b.n	8006600 <_strtod_l+0x498>
 8006a02:	465f      	mov	r7, fp
 8006a04:	d16e      	bne.n	8006ae4 <_strtod_l+0x97c>
 8006a06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a0c:	b342      	cbz	r2, 8006a60 <_strtod_l+0x8f8>
 8006a0e:	4a32      	ldr	r2, [pc, #200]	; (8006ad8 <_strtod_l+0x970>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d128      	bne.n	8006a66 <_strtod_l+0x8fe>
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	4650      	mov	r0, sl
 8006a18:	b1eb      	cbz	r3, 8006a56 <_strtod_l+0x8ee>
 8006a1a:	4a2d      	ldr	r2, [pc, #180]	; (8006ad0 <_strtod_l+0x968>)
 8006a1c:	403a      	ands	r2, r7
 8006a1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006a22:	f04f 31ff 	mov.w	r1, #4294967295
 8006a26:	d819      	bhi.n	8006a5c <_strtod_l+0x8f4>
 8006a28:	0d12      	lsrs	r2, r2, #20
 8006a2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a32:	4298      	cmp	r0, r3
 8006a34:	d117      	bne.n	8006a66 <_strtod_l+0x8fe>
 8006a36:	4b29      	ldr	r3, [pc, #164]	; (8006adc <_strtod_l+0x974>)
 8006a38:	429f      	cmp	r7, r3
 8006a3a:	d102      	bne.n	8006a42 <_strtod_l+0x8da>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f43f addf 	beq.w	8006600 <_strtod_l+0x498>
 8006a42:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <_strtod_l+0x968>)
 8006a44:	403b      	ands	r3, r7
 8006a46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006a4a:	f04f 0a00 	mov.w	sl, #0
 8006a4e:	9b04      	ldr	r3, [sp, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1a0      	bne.n	8006996 <_strtod_l+0x82e>
 8006a54:	e5de      	b.n	8006614 <_strtod_l+0x4ac>
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5a:	e7ea      	b.n	8006a32 <_strtod_l+0x8ca>
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	e7e8      	b.n	8006a32 <_strtod_l+0x8ca>
 8006a60:	ea53 030a 	orrs.w	r3, r3, sl
 8006a64:	d088      	beq.n	8006978 <_strtod_l+0x810>
 8006a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a68:	b1db      	cbz	r3, 8006aa2 <_strtod_l+0x93a>
 8006a6a:	423b      	tst	r3, r7
 8006a6c:	d0ef      	beq.n	8006a4e <_strtod_l+0x8e6>
 8006a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a70:	9a04      	ldr	r2, [sp, #16]
 8006a72:	4650      	mov	r0, sl
 8006a74:	4659      	mov	r1, fp
 8006a76:	b1c3      	cbz	r3, 8006aaa <_strtod_l+0x942>
 8006a78:	f7ff fb58 	bl	800612c <sulp>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a84:	f7f9 fc0a 	bl	800029c <__adddf3>
 8006a88:	4682      	mov	sl, r0
 8006a8a:	468b      	mov	fp, r1
 8006a8c:	e7df      	b.n	8006a4e <_strtod_l+0x8e6>
 8006a8e:	4013      	ands	r3, r2
 8006a90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006a94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006a98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006a9c:	f04f 3aff 	mov.w	sl, #4294967295
 8006aa0:	e7d5      	b.n	8006a4e <_strtod_l+0x8e6>
 8006aa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aa4:	ea13 0f0a 	tst.w	r3, sl
 8006aa8:	e7e0      	b.n	8006a6c <_strtod_l+0x904>
 8006aaa:	f7ff fb3f 	bl	800612c <sulp>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ab6:	f7f9 fbef 	bl	8000298 <__aeabi_dsub>
 8006aba:	2200      	movs	r2, #0
 8006abc:	2300      	movs	r3, #0
 8006abe:	4682      	mov	sl, r0
 8006ac0:	468b      	mov	fp, r1
 8006ac2:	f7fa f809 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d0c1      	beq.n	8006a4e <_strtod_l+0x8e6>
 8006aca:	e60e      	b.n	80066ea <_strtod_l+0x582>
 8006acc:	fffffc02 	.word	0xfffffc02
 8006ad0:	7ff00000 	.word	0x7ff00000
 8006ad4:	39500000 	.word	0x39500000
 8006ad8:	000fffff 	.word	0x000fffff
 8006adc:	7fefffff 	.word	0x7fefffff
 8006ae0:	08009d08 	.word	0x08009d08
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f002 f82e 	bl	8008b48 <__ratio>
 8006aec:	ec59 8b10 	vmov	r8, r9, d0
 8006af0:	ee10 0a10 	vmov	r0, s0
 8006af4:	2200      	movs	r2, #0
 8006af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006afa:	4649      	mov	r1, r9
 8006afc:	f7fa f800 	bl	8000b00 <__aeabi_dcmple>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d07c      	beq.n	8006bfe <_strtod_l+0xa96>
 8006b04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d04c      	beq.n	8006ba4 <_strtod_l+0xa3c>
 8006b0a:	4b95      	ldr	r3, [pc, #596]	; (8006d60 <_strtod_l+0xbf8>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006b12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006d60 <_strtod_l+0xbf8>
 8006b16:	f04f 0800 	mov.w	r8, #0
 8006b1a:	4b92      	ldr	r3, [pc, #584]	; (8006d64 <_strtod_l+0xbfc>)
 8006b1c:	403b      	ands	r3, r7
 8006b1e:	9311      	str	r3, [sp, #68]	; 0x44
 8006b20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006b22:	4b91      	ldr	r3, [pc, #580]	; (8006d68 <_strtod_l+0xc00>)
 8006b24:	429a      	cmp	r2, r3
 8006b26:	f040 80b2 	bne.w	8006c8e <_strtod_l+0xb26>
 8006b2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b32:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006b36:	ec4b ab10 	vmov	d0, sl, fp
 8006b3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006b3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b42:	f001 ff29 	bl	8008998 <__ulp>
 8006b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b4a:	ec53 2b10 	vmov	r2, r3, d0
 8006b4e:	f7f9 fd5b 	bl	8000608 <__aeabi_dmul>
 8006b52:	4652      	mov	r2, sl
 8006b54:	465b      	mov	r3, fp
 8006b56:	f7f9 fba1 	bl	800029c <__adddf3>
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4981      	ldr	r1, [pc, #516]	; (8006d64 <_strtod_l+0xbfc>)
 8006b5e:	4a83      	ldr	r2, [pc, #524]	; (8006d6c <_strtod_l+0xc04>)
 8006b60:	4019      	ands	r1, r3
 8006b62:	4291      	cmp	r1, r2
 8006b64:	4682      	mov	sl, r0
 8006b66:	d95e      	bls.n	8006c26 <_strtod_l+0xabe>
 8006b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d103      	bne.n	8006b7a <_strtod_l+0xa12>
 8006b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b74:	3301      	adds	r3, #1
 8006b76:	f43f ad43 	beq.w	8006600 <_strtod_l+0x498>
 8006b7a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006d78 <_strtod_l+0xc10>
 8006b7e:	f04f 3aff 	mov.w	sl, #4294967295
 8006b82:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006b84:	4620      	mov	r0, r4
 8006b86:	f001 fbdb 	bl	8008340 <_Bfree>
 8006b8a:	9907      	ldr	r1, [sp, #28]
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f001 fbd7 	bl	8008340 <_Bfree>
 8006b92:	4631      	mov	r1, r6
 8006b94:	4620      	mov	r0, r4
 8006b96:	f001 fbd3 	bl	8008340 <_Bfree>
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f001 fbcf 	bl	8008340 <_Bfree>
 8006ba2:	e613      	b.n	80067cc <_strtod_l+0x664>
 8006ba4:	f1ba 0f00 	cmp.w	sl, #0
 8006ba8:	d11b      	bne.n	8006be2 <_strtod_l+0xa7a>
 8006baa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bae:	b9f3      	cbnz	r3, 8006bee <_strtod_l+0xa86>
 8006bb0:	4b6b      	ldr	r3, [pc, #428]	; (8006d60 <_strtod_l+0xbf8>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	f7f9 ff98 	bl	8000aec <__aeabi_dcmplt>
 8006bbc:	b9d0      	cbnz	r0, 8006bf4 <_strtod_l+0xa8c>
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	4b6b      	ldr	r3, [pc, #428]	; (8006d70 <_strtod_l+0xc08>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f7f9 fd1f 	bl	8000608 <__aeabi_dmul>
 8006bca:	4680      	mov	r8, r0
 8006bcc:	4689      	mov	r9, r1
 8006bce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006bd2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006bd6:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bd8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006bdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006be0:	e79b      	b.n	8006b1a <_strtod_l+0x9b2>
 8006be2:	f1ba 0f01 	cmp.w	sl, #1
 8006be6:	d102      	bne.n	8006bee <_strtod_l+0xa86>
 8006be8:	2f00      	cmp	r7, #0
 8006bea:	f43f ad7e 	beq.w	80066ea <_strtod_l+0x582>
 8006bee:	4b61      	ldr	r3, [pc, #388]	; (8006d74 <_strtod_l+0xc0c>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	e78c      	b.n	8006b0e <_strtod_l+0x9a6>
 8006bf4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006d70 <_strtod_l+0xc08>
 8006bf8:	f04f 0800 	mov.w	r8, #0
 8006bfc:	e7e7      	b.n	8006bce <_strtod_l+0xa66>
 8006bfe:	4b5c      	ldr	r3, [pc, #368]	; (8006d70 <_strtod_l+0xc08>)
 8006c00:	4640      	mov	r0, r8
 8006c02:	4649      	mov	r1, r9
 8006c04:	2200      	movs	r2, #0
 8006c06:	f7f9 fcff 	bl	8000608 <__aeabi_dmul>
 8006c0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	4689      	mov	r9, r1
 8006c10:	b933      	cbnz	r3, 8006c20 <_strtod_l+0xab8>
 8006c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c16:	9012      	str	r0, [sp, #72]	; 0x48
 8006c18:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006c1e:	e7dd      	b.n	8006bdc <_strtod_l+0xa74>
 8006c20:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006c24:	e7f9      	b.n	8006c1a <_strtod_l+0xab2>
 8006c26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006c2a:	9b04      	ldr	r3, [sp, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1a8      	bne.n	8006b82 <_strtod_l+0xa1a>
 8006c30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c36:	0d1b      	lsrs	r3, r3, #20
 8006c38:	051b      	lsls	r3, r3, #20
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d1a1      	bne.n	8006b82 <_strtod_l+0xa1a>
 8006c3e:	4640      	mov	r0, r8
 8006c40:	4649      	mov	r1, r9
 8006c42:	f7fa f841 	bl	8000cc8 <__aeabi_d2lz>
 8006c46:	f7f9 fcb1 	bl	80005ac <__aeabi_l2d>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4640      	mov	r0, r8
 8006c50:	4649      	mov	r1, r9
 8006c52:	f7f9 fb21 	bl	8000298 <__aeabi_dsub>
 8006c56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c5c:	ea43 030a 	orr.w	r3, r3, sl
 8006c60:	4313      	orrs	r3, r2
 8006c62:	4680      	mov	r8, r0
 8006c64:	4689      	mov	r9, r1
 8006c66:	d053      	beq.n	8006d10 <_strtod_l+0xba8>
 8006c68:	a335      	add	r3, pc, #212	; (adr r3, 8006d40 <_strtod_l+0xbd8>)
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f7f9 ff3d 	bl	8000aec <__aeabi_dcmplt>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	f47f acce 	bne.w	8006614 <_strtod_l+0x4ac>
 8006c78:	a333      	add	r3, pc, #204	; (adr r3, 8006d48 <_strtod_l+0xbe0>)
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	4640      	mov	r0, r8
 8006c80:	4649      	mov	r1, r9
 8006c82:	f7f9 ff51 	bl	8000b28 <__aeabi_dcmpgt>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	f43f af7b 	beq.w	8006b82 <_strtod_l+0xa1a>
 8006c8c:	e4c2      	b.n	8006614 <_strtod_l+0x4ac>
 8006c8e:	9b04      	ldr	r3, [sp, #16]
 8006c90:	b333      	cbz	r3, 8006ce0 <_strtod_l+0xb78>
 8006c92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c98:	d822      	bhi.n	8006ce0 <_strtod_l+0xb78>
 8006c9a:	a32d      	add	r3, pc, #180	; (adr r3, 8006d50 <_strtod_l+0xbe8>)
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	f7f9 ff2c 	bl	8000b00 <__aeabi_dcmple>
 8006ca8:	b1a0      	cbz	r0, 8006cd4 <_strtod_l+0xb6c>
 8006caa:	4649      	mov	r1, r9
 8006cac:	4640      	mov	r0, r8
 8006cae:	f7f9 ff83 	bl	8000bb8 <__aeabi_d2uiz>
 8006cb2:	2801      	cmp	r0, #1
 8006cb4:	bf38      	it	cc
 8006cb6:	2001      	movcc	r0, #1
 8006cb8:	f7f9 fc2c 	bl	8000514 <__aeabi_ui2d>
 8006cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cbe:	4680      	mov	r8, r0
 8006cc0:	4689      	mov	r9, r1
 8006cc2:	bb13      	cbnz	r3, 8006d0a <_strtod_l+0xba2>
 8006cc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cc8:	9014      	str	r0, [sp, #80]	; 0x50
 8006cca:	9315      	str	r3, [sp, #84]	; 0x54
 8006ccc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006cd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	930d      	str	r3, [sp, #52]	; 0x34
 8006ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ce4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006ce8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006cec:	f001 fe54 	bl	8008998 <__ulp>
 8006cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cf4:	ec53 2b10 	vmov	r2, r3, d0
 8006cf8:	f7f9 fc86 	bl	8000608 <__aeabi_dmul>
 8006cfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d00:	f7f9 facc 	bl	800029c <__adddf3>
 8006d04:	4682      	mov	sl, r0
 8006d06:	468b      	mov	fp, r1
 8006d08:	e78f      	b.n	8006c2a <_strtod_l+0xac2>
 8006d0a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006d0e:	e7dd      	b.n	8006ccc <_strtod_l+0xb64>
 8006d10:	a311      	add	r3, pc, #68	; (adr r3, 8006d58 <_strtod_l+0xbf0>)
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	f7f9 fee9 	bl	8000aec <__aeabi_dcmplt>
 8006d1a:	e7b4      	b.n	8006c86 <_strtod_l+0xb1e>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	930e      	str	r3, [sp, #56]	; 0x38
 8006d20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	f7ff ba65 	b.w	80061f4 <_strtod_l+0x8c>
 8006d2a:	2b65      	cmp	r3, #101	; 0x65
 8006d2c:	f43f ab5d 	beq.w	80063ea <_strtod_l+0x282>
 8006d30:	2b45      	cmp	r3, #69	; 0x45
 8006d32:	f43f ab5a 	beq.w	80063ea <_strtod_l+0x282>
 8006d36:	2201      	movs	r2, #1
 8006d38:	f7ff bb92 	b.w	8006460 <_strtod_l+0x2f8>
 8006d3c:	f3af 8000 	nop.w
 8006d40:	94a03595 	.word	0x94a03595
 8006d44:	3fdfffff 	.word	0x3fdfffff
 8006d48:	35afe535 	.word	0x35afe535
 8006d4c:	3fe00000 	.word	0x3fe00000
 8006d50:	ffc00000 	.word	0xffc00000
 8006d54:	41dfffff 	.word	0x41dfffff
 8006d58:	94a03595 	.word	0x94a03595
 8006d5c:	3fcfffff 	.word	0x3fcfffff
 8006d60:	3ff00000 	.word	0x3ff00000
 8006d64:	7ff00000 	.word	0x7ff00000
 8006d68:	7fe00000 	.word	0x7fe00000
 8006d6c:	7c9fffff 	.word	0x7c9fffff
 8006d70:	3fe00000 	.word	0x3fe00000
 8006d74:	bff00000 	.word	0xbff00000
 8006d78:	7fefffff 	.word	0x7fefffff

08006d7c <_strtod_r>:
 8006d7c:	4b01      	ldr	r3, [pc, #4]	; (8006d84 <_strtod_r+0x8>)
 8006d7e:	f7ff b9f3 	b.w	8006168 <_strtod_l>
 8006d82:	bf00      	nop
 8006d84:	20000078 	.word	0x20000078

08006d88 <_strtol_l.isra.0>:
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8e:	d001      	beq.n	8006d94 <_strtol_l.isra.0+0xc>
 8006d90:	2b24      	cmp	r3, #36	; 0x24
 8006d92:	d906      	bls.n	8006da2 <_strtol_l.isra.0+0x1a>
 8006d94:	f7fe faf8 	bl	8005388 <__errno>
 8006d98:	2316      	movs	r3, #22
 8006d9a:	6003      	str	r3, [r0, #0]
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da2:	4f3a      	ldr	r7, [pc, #232]	; (8006e8c <_strtol_l.isra.0+0x104>)
 8006da4:	468e      	mov	lr, r1
 8006da6:	4676      	mov	r6, lr
 8006da8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006dac:	5de5      	ldrb	r5, [r4, r7]
 8006dae:	f015 0508 	ands.w	r5, r5, #8
 8006db2:	d1f8      	bne.n	8006da6 <_strtol_l.isra.0+0x1e>
 8006db4:	2c2d      	cmp	r4, #45	; 0x2d
 8006db6:	d134      	bne.n	8006e22 <_strtol_l.isra.0+0x9a>
 8006db8:	f89e 4000 	ldrb.w	r4, [lr]
 8006dbc:	f04f 0801 	mov.w	r8, #1
 8006dc0:	f106 0e02 	add.w	lr, r6, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d05c      	beq.n	8006e82 <_strtol_l.isra.0+0xfa>
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d10c      	bne.n	8006de6 <_strtol_l.isra.0+0x5e>
 8006dcc:	2c30      	cmp	r4, #48	; 0x30
 8006dce:	d10a      	bne.n	8006de6 <_strtol_l.isra.0+0x5e>
 8006dd0:	f89e 4000 	ldrb.w	r4, [lr]
 8006dd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006dd8:	2c58      	cmp	r4, #88	; 0x58
 8006dda:	d14d      	bne.n	8006e78 <_strtol_l.isra.0+0xf0>
 8006ddc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006de0:	2310      	movs	r3, #16
 8006de2:	f10e 0e02 	add.w	lr, lr, #2
 8006de6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006dea:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006dee:	2600      	movs	r6, #0
 8006df0:	fbbc f9f3 	udiv	r9, ip, r3
 8006df4:	4635      	mov	r5, r6
 8006df6:	fb03 ca19 	mls	sl, r3, r9, ip
 8006dfa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006dfe:	2f09      	cmp	r7, #9
 8006e00:	d818      	bhi.n	8006e34 <_strtol_l.isra.0+0xac>
 8006e02:	463c      	mov	r4, r7
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	dd24      	ble.n	8006e52 <_strtol_l.isra.0+0xca>
 8006e08:	2e00      	cmp	r6, #0
 8006e0a:	db1f      	blt.n	8006e4c <_strtol_l.isra.0+0xc4>
 8006e0c:	45a9      	cmp	r9, r5
 8006e0e:	d31d      	bcc.n	8006e4c <_strtol_l.isra.0+0xc4>
 8006e10:	d101      	bne.n	8006e16 <_strtol_l.isra.0+0x8e>
 8006e12:	45a2      	cmp	sl, r4
 8006e14:	db1a      	blt.n	8006e4c <_strtol_l.isra.0+0xc4>
 8006e16:	fb05 4503 	mla	r5, r5, r3, r4
 8006e1a:	2601      	movs	r6, #1
 8006e1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006e20:	e7eb      	b.n	8006dfa <_strtol_l.isra.0+0x72>
 8006e22:	2c2b      	cmp	r4, #43	; 0x2b
 8006e24:	bf08      	it	eq
 8006e26:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006e2a:	46a8      	mov	r8, r5
 8006e2c:	bf08      	it	eq
 8006e2e:	f106 0e02 	addeq.w	lr, r6, #2
 8006e32:	e7c7      	b.n	8006dc4 <_strtol_l.isra.0+0x3c>
 8006e34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006e38:	2f19      	cmp	r7, #25
 8006e3a:	d801      	bhi.n	8006e40 <_strtol_l.isra.0+0xb8>
 8006e3c:	3c37      	subs	r4, #55	; 0x37
 8006e3e:	e7e1      	b.n	8006e04 <_strtol_l.isra.0+0x7c>
 8006e40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006e44:	2f19      	cmp	r7, #25
 8006e46:	d804      	bhi.n	8006e52 <_strtol_l.isra.0+0xca>
 8006e48:	3c57      	subs	r4, #87	; 0x57
 8006e4a:	e7db      	b.n	8006e04 <_strtol_l.isra.0+0x7c>
 8006e4c:	f04f 36ff 	mov.w	r6, #4294967295
 8006e50:	e7e4      	b.n	8006e1c <_strtol_l.isra.0+0x94>
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	da05      	bge.n	8006e62 <_strtol_l.isra.0+0xda>
 8006e56:	2322      	movs	r3, #34	; 0x22
 8006e58:	6003      	str	r3, [r0, #0]
 8006e5a:	4665      	mov	r5, ip
 8006e5c:	b942      	cbnz	r2, 8006e70 <_strtol_l.isra.0+0xe8>
 8006e5e:	4628      	mov	r0, r5
 8006e60:	e79d      	b.n	8006d9e <_strtol_l.isra.0+0x16>
 8006e62:	f1b8 0f00 	cmp.w	r8, #0
 8006e66:	d000      	beq.n	8006e6a <_strtol_l.isra.0+0xe2>
 8006e68:	426d      	negs	r5, r5
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	d0f7      	beq.n	8006e5e <_strtol_l.isra.0+0xd6>
 8006e6e:	b10e      	cbz	r6, 8006e74 <_strtol_l.isra.0+0xec>
 8006e70:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006e74:	6011      	str	r1, [r2, #0]
 8006e76:	e7f2      	b.n	8006e5e <_strtol_l.isra.0+0xd6>
 8006e78:	2430      	movs	r4, #48	; 0x30
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1b3      	bne.n	8006de6 <_strtol_l.isra.0+0x5e>
 8006e7e:	2308      	movs	r3, #8
 8006e80:	e7b1      	b.n	8006de6 <_strtol_l.isra.0+0x5e>
 8006e82:	2c30      	cmp	r4, #48	; 0x30
 8006e84:	d0a4      	beq.n	8006dd0 <_strtol_l.isra.0+0x48>
 8006e86:	230a      	movs	r3, #10
 8006e88:	e7ad      	b.n	8006de6 <_strtol_l.isra.0+0x5e>
 8006e8a:	bf00      	nop
 8006e8c:	08009d31 	.word	0x08009d31

08006e90 <_strtol_r>:
 8006e90:	f7ff bf7a 	b.w	8006d88 <_strtol_l.isra.0>

08006e94 <quorem>:
 8006e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	6903      	ldr	r3, [r0, #16]
 8006e9a:	690c      	ldr	r4, [r1, #16]
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	4607      	mov	r7, r0
 8006ea0:	f2c0 8081 	blt.w	8006fa6 <quorem+0x112>
 8006ea4:	3c01      	subs	r4, #1
 8006ea6:	f101 0814 	add.w	r8, r1, #20
 8006eaa:	f100 0514 	add.w	r5, r0, #20
 8006eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006eb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ec8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ecc:	d331      	bcc.n	8006f32 <quorem+0x9e>
 8006ece:	f04f 0e00 	mov.w	lr, #0
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	46ac      	mov	ip, r5
 8006ed6:	46f2      	mov	sl, lr
 8006ed8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006edc:	b293      	uxth	r3, r2
 8006ede:	fb06 e303 	mla	r3, r6, r3, lr
 8006ee2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	ebaa 0303 	sub.w	r3, sl, r3
 8006eec:	0c12      	lsrs	r2, r2, #16
 8006eee:	f8dc a000 	ldr.w	sl, [ip]
 8006ef2:	fb06 e202 	mla	r2, r6, r2, lr
 8006ef6:	fa13 f38a 	uxtah	r3, r3, sl
 8006efa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006efe:	fa1f fa82 	uxth.w	sl, r2
 8006f02:	f8dc 2000 	ldr.w	r2, [ip]
 8006f06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006f0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f14:	4581      	cmp	r9, r0
 8006f16:	f84c 3b04 	str.w	r3, [ip], #4
 8006f1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f1e:	d2db      	bcs.n	8006ed8 <quorem+0x44>
 8006f20:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f24:	b92b      	cbnz	r3, 8006f32 <quorem+0x9e>
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	3b04      	subs	r3, #4
 8006f2a:	429d      	cmp	r5, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	d32e      	bcc.n	8006f8e <quorem+0xfa>
 8006f30:	613c      	str	r4, [r7, #16]
 8006f32:	4638      	mov	r0, r7
 8006f34:	f001 fc8c 	bl	8008850 <__mcmp>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	db24      	blt.n	8006f86 <quorem+0xf2>
 8006f3c:	3601      	adds	r6, #1
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f04f 0c00 	mov.w	ip, #0
 8006f44:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f48:	f8d0 e000 	ldr.w	lr, [r0]
 8006f4c:	b293      	uxth	r3, r2
 8006f4e:	ebac 0303 	sub.w	r3, ip, r3
 8006f52:	0c12      	lsrs	r2, r2, #16
 8006f54:	fa13 f38e 	uxtah	r3, r3, lr
 8006f58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f66:	45c1      	cmp	r9, r8
 8006f68:	f840 3b04 	str.w	r3, [r0], #4
 8006f6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f70:	d2e8      	bcs.n	8006f44 <quorem+0xb0>
 8006f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f7a:	b922      	cbnz	r2, 8006f86 <quorem+0xf2>
 8006f7c:	3b04      	subs	r3, #4
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	d30a      	bcc.n	8006f9a <quorem+0x106>
 8006f84:	613c      	str	r4, [r7, #16]
 8006f86:	4630      	mov	r0, r6
 8006f88:	b003      	add	sp, #12
 8006f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	3b04      	subs	r3, #4
 8006f92:	2a00      	cmp	r2, #0
 8006f94:	d1cc      	bne.n	8006f30 <quorem+0x9c>
 8006f96:	3c01      	subs	r4, #1
 8006f98:	e7c7      	b.n	8006f2a <quorem+0x96>
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	3b04      	subs	r3, #4
 8006f9e:	2a00      	cmp	r2, #0
 8006fa0:	d1f0      	bne.n	8006f84 <quorem+0xf0>
 8006fa2:	3c01      	subs	r4, #1
 8006fa4:	e7eb      	b.n	8006f7e <quorem+0xea>
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e7ee      	b.n	8006f88 <quorem+0xf4>
 8006faa:	0000      	movs	r0, r0
 8006fac:	0000      	movs	r0, r0
	...

08006fb0 <_dtoa_r>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	ed2d 8b02 	vpush	{d8}
 8006fb8:	ec57 6b10 	vmov	r6, r7, d0
 8006fbc:	b095      	sub	sp, #84	; 0x54
 8006fbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fc4:	9105      	str	r1, [sp, #20]
 8006fc6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006fca:	4604      	mov	r4, r0
 8006fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8006fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fd0:	b975      	cbnz	r5, 8006ff0 <_dtoa_r+0x40>
 8006fd2:	2010      	movs	r0, #16
 8006fd4:	f001 f94c 	bl	8008270 <malloc>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	6260      	str	r0, [r4, #36]	; 0x24
 8006fdc:	b920      	cbnz	r0, 8006fe8 <_dtoa_r+0x38>
 8006fde:	4bb2      	ldr	r3, [pc, #712]	; (80072a8 <_dtoa_r+0x2f8>)
 8006fe0:	21ea      	movs	r1, #234	; 0xea
 8006fe2:	48b2      	ldr	r0, [pc, #712]	; (80072ac <_dtoa_r+0x2fc>)
 8006fe4:	f002 f874 	bl	80090d0 <__assert_func>
 8006fe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fec:	6005      	str	r5, [r0, #0]
 8006fee:	60c5      	str	r5, [r0, #12]
 8006ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	b151      	cbz	r1, 800700c <_dtoa_r+0x5c>
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	604a      	str	r2, [r1, #4]
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4093      	lsls	r3, r2
 8006ffe:	608b      	str	r3, [r1, #8]
 8007000:	4620      	mov	r0, r4
 8007002:	f001 f99d 	bl	8008340 <_Bfree>
 8007006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	1e3b      	subs	r3, r7, #0
 800700e:	bfb9      	ittee	lt
 8007010:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007014:	9303      	strlt	r3, [sp, #12]
 8007016:	2300      	movge	r3, #0
 8007018:	f8c8 3000 	strge.w	r3, [r8]
 800701c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007020:	4ba3      	ldr	r3, [pc, #652]	; (80072b0 <_dtoa_r+0x300>)
 8007022:	bfbc      	itt	lt
 8007024:	2201      	movlt	r2, #1
 8007026:	f8c8 2000 	strlt.w	r2, [r8]
 800702a:	ea33 0309 	bics.w	r3, r3, r9
 800702e:	d11b      	bne.n	8007068 <_dtoa_r+0xb8>
 8007030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007032:	f242 730f 	movw	r3, #9999	; 0x270f
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800703c:	4333      	orrs	r3, r6
 800703e:	f000 857a 	beq.w	8007b36 <_dtoa_r+0xb86>
 8007042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007044:	b963      	cbnz	r3, 8007060 <_dtoa_r+0xb0>
 8007046:	4b9b      	ldr	r3, [pc, #620]	; (80072b4 <_dtoa_r+0x304>)
 8007048:	e024      	b.n	8007094 <_dtoa_r+0xe4>
 800704a:	4b9b      	ldr	r3, [pc, #620]	; (80072b8 <_dtoa_r+0x308>)
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	9800      	ldr	r0, [sp, #0]
 8007056:	b015      	add	sp, #84	; 0x54
 8007058:	ecbd 8b02 	vpop	{d8}
 800705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007060:	4b94      	ldr	r3, [pc, #592]	; (80072b4 <_dtoa_r+0x304>)
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	3303      	adds	r3, #3
 8007066:	e7f3      	b.n	8007050 <_dtoa_r+0xa0>
 8007068:	ed9d 7b02 	vldr	d7, [sp, #8]
 800706c:	2200      	movs	r2, #0
 800706e:	ec51 0b17 	vmov	r0, r1, d7
 8007072:	2300      	movs	r3, #0
 8007074:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007078:	f7f9 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800707c:	4680      	mov	r8, r0
 800707e:	b158      	cbz	r0, 8007098 <_dtoa_r+0xe8>
 8007080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007082:	2301      	movs	r3, #1
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 8551 	beq.w	8007b30 <_dtoa_r+0xb80>
 800708e:	488b      	ldr	r0, [pc, #556]	; (80072bc <_dtoa_r+0x30c>)
 8007090:	6018      	str	r0, [r3, #0]
 8007092:	1e43      	subs	r3, r0, #1
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	e7dd      	b.n	8007054 <_dtoa_r+0xa4>
 8007098:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800709c:	aa12      	add	r2, sp, #72	; 0x48
 800709e:	a913      	add	r1, sp, #76	; 0x4c
 80070a0:	4620      	mov	r0, r4
 80070a2:	f001 fcf5 	bl	8008a90 <__d2b>
 80070a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070aa:	4683      	mov	fp, r0
 80070ac:	2d00      	cmp	r5, #0
 80070ae:	d07c      	beq.n	80071aa <_dtoa_r+0x1fa>
 80070b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80070b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80070be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070ca:	4b7d      	ldr	r3, [pc, #500]	; (80072c0 <_dtoa_r+0x310>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	4630      	mov	r0, r6
 80070d0:	4639      	mov	r1, r7
 80070d2:	f7f9 f8e1 	bl	8000298 <__aeabi_dsub>
 80070d6:	a36e      	add	r3, pc, #440	; (adr r3, 8007290 <_dtoa_r+0x2e0>)
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f7f9 fa94 	bl	8000608 <__aeabi_dmul>
 80070e0:	a36d      	add	r3, pc, #436	; (adr r3, 8007298 <_dtoa_r+0x2e8>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f7f9 f8d9 	bl	800029c <__adddf3>
 80070ea:	4606      	mov	r6, r0
 80070ec:	4628      	mov	r0, r5
 80070ee:	460f      	mov	r7, r1
 80070f0:	f7f9 fa20 	bl	8000534 <__aeabi_i2d>
 80070f4:	a36a      	add	r3, pc, #424	; (adr r3, 80072a0 <_dtoa_r+0x2f0>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	f7f9 fa85 	bl	8000608 <__aeabi_dmul>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4630      	mov	r0, r6
 8007104:	4639      	mov	r1, r7
 8007106:	f7f9 f8c9 	bl	800029c <__adddf3>
 800710a:	4606      	mov	r6, r0
 800710c:	460f      	mov	r7, r1
 800710e:	f7f9 fd2b 	bl	8000b68 <__aeabi_d2iz>
 8007112:	2200      	movs	r2, #0
 8007114:	4682      	mov	sl, r0
 8007116:	2300      	movs	r3, #0
 8007118:	4630      	mov	r0, r6
 800711a:	4639      	mov	r1, r7
 800711c:	f7f9 fce6 	bl	8000aec <__aeabi_dcmplt>
 8007120:	b148      	cbz	r0, 8007136 <_dtoa_r+0x186>
 8007122:	4650      	mov	r0, sl
 8007124:	f7f9 fa06 	bl	8000534 <__aeabi_i2d>
 8007128:	4632      	mov	r2, r6
 800712a:	463b      	mov	r3, r7
 800712c:	f7f9 fcd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007130:	b908      	cbnz	r0, 8007136 <_dtoa_r+0x186>
 8007132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007136:	f1ba 0f16 	cmp.w	sl, #22
 800713a:	d854      	bhi.n	80071e6 <_dtoa_r+0x236>
 800713c:	4b61      	ldr	r3, [pc, #388]	; (80072c4 <_dtoa_r+0x314>)
 800713e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800714a:	f7f9 fccf 	bl	8000aec <__aeabi_dcmplt>
 800714e:	2800      	cmp	r0, #0
 8007150:	d04b      	beq.n	80071ea <_dtoa_r+0x23a>
 8007152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007156:	2300      	movs	r3, #0
 8007158:	930e      	str	r3, [sp, #56]	; 0x38
 800715a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800715c:	1b5d      	subs	r5, r3, r5
 800715e:	1e6b      	subs	r3, r5, #1
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	bf43      	ittte	mi
 8007164:	2300      	movmi	r3, #0
 8007166:	f1c5 0801 	rsbmi	r8, r5, #1
 800716a:	9304      	strmi	r3, [sp, #16]
 800716c:	f04f 0800 	movpl.w	r8, #0
 8007170:	f1ba 0f00 	cmp.w	sl, #0
 8007174:	db3b      	blt.n	80071ee <_dtoa_r+0x23e>
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800717c:	4453      	add	r3, sl
 800717e:	9304      	str	r3, [sp, #16]
 8007180:	2300      	movs	r3, #0
 8007182:	9306      	str	r3, [sp, #24]
 8007184:	9b05      	ldr	r3, [sp, #20]
 8007186:	2b09      	cmp	r3, #9
 8007188:	d869      	bhi.n	800725e <_dtoa_r+0x2ae>
 800718a:	2b05      	cmp	r3, #5
 800718c:	bfc4      	itt	gt
 800718e:	3b04      	subgt	r3, #4
 8007190:	9305      	strgt	r3, [sp, #20]
 8007192:	9b05      	ldr	r3, [sp, #20]
 8007194:	f1a3 0302 	sub.w	r3, r3, #2
 8007198:	bfcc      	ite	gt
 800719a:	2500      	movgt	r5, #0
 800719c:	2501      	movle	r5, #1
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d869      	bhi.n	8007276 <_dtoa_r+0x2c6>
 80071a2:	e8df f003 	tbb	[pc, r3]
 80071a6:	4e2c      	.short	0x4e2c
 80071a8:	5a4c      	.short	0x5a4c
 80071aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80071ae:	441d      	add	r5, r3
 80071b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	bfc1      	itttt	gt
 80071b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80071c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071c8:	bfda      	itte	le
 80071ca:	f1c3 0320 	rsble	r3, r3, #32
 80071ce:	fa06 f003 	lslle.w	r0, r6, r3
 80071d2:	4318      	orrgt	r0, r3
 80071d4:	f7f9 f99e 	bl	8000514 <__aeabi_ui2d>
 80071d8:	2301      	movs	r3, #1
 80071da:	4606      	mov	r6, r0
 80071dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071e0:	3d01      	subs	r5, #1
 80071e2:	9310      	str	r3, [sp, #64]	; 0x40
 80071e4:	e771      	b.n	80070ca <_dtoa_r+0x11a>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e7b6      	b.n	8007158 <_dtoa_r+0x1a8>
 80071ea:	900e      	str	r0, [sp, #56]	; 0x38
 80071ec:	e7b5      	b.n	800715a <_dtoa_r+0x1aa>
 80071ee:	f1ca 0300 	rsb	r3, sl, #0
 80071f2:	9306      	str	r3, [sp, #24]
 80071f4:	2300      	movs	r3, #0
 80071f6:	eba8 080a 	sub.w	r8, r8, sl
 80071fa:	930d      	str	r3, [sp, #52]	; 0x34
 80071fc:	e7c2      	b.n	8007184 <_dtoa_r+0x1d4>
 80071fe:	2300      	movs	r3, #0
 8007200:	9308      	str	r3, [sp, #32]
 8007202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007204:	2b00      	cmp	r3, #0
 8007206:	dc39      	bgt.n	800727c <_dtoa_r+0x2cc>
 8007208:	f04f 0901 	mov.w	r9, #1
 800720c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007210:	464b      	mov	r3, r9
 8007212:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007216:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007218:	2200      	movs	r2, #0
 800721a:	6042      	str	r2, [r0, #4]
 800721c:	2204      	movs	r2, #4
 800721e:	f102 0614 	add.w	r6, r2, #20
 8007222:	429e      	cmp	r6, r3
 8007224:	6841      	ldr	r1, [r0, #4]
 8007226:	d92f      	bls.n	8007288 <_dtoa_r+0x2d8>
 8007228:	4620      	mov	r0, r4
 800722a:	f001 f849 	bl	80082c0 <_Balloc>
 800722e:	9000      	str	r0, [sp, #0]
 8007230:	2800      	cmp	r0, #0
 8007232:	d14b      	bne.n	80072cc <_dtoa_r+0x31c>
 8007234:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <_dtoa_r+0x318>)
 8007236:	4602      	mov	r2, r0
 8007238:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800723c:	e6d1      	b.n	8006fe2 <_dtoa_r+0x32>
 800723e:	2301      	movs	r3, #1
 8007240:	e7de      	b.n	8007200 <_dtoa_r+0x250>
 8007242:	2300      	movs	r3, #0
 8007244:	9308      	str	r3, [sp, #32]
 8007246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007248:	eb0a 0903 	add.w	r9, sl, r3
 800724c:	f109 0301 	add.w	r3, r9, #1
 8007250:	2b01      	cmp	r3, #1
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	bfb8      	it	lt
 8007256:	2301      	movlt	r3, #1
 8007258:	e7dd      	b.n	8007216 <_dtoa_r+0x266>
 800725a:	2301      	movs	r3, #1
 800725c:	e7f2      	b.n	8007244 <_dtoa_r+0x294>
 800725e:	2501      	movs	r5, #1
 8007260:	2300      	movs	r3, #0
 8007262:	9305      	str	r3, [sp, #20]
 8007264:	9508      	str	r5, [sp, #32]
 8007266:	f04f 39ff 	mov.w	r9, #4294967295
 800726a:	2200      	movs	r2, #0
 800726c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007270:	2312      	movs	r3, #18
 8007272:	9209      	str	r2, [sp, #36]	; 0x24
 8007274:	e7cf      	b.n	8007216 <_dtoa_r+0x266>
 8007276:	2301      	movs	r3, #1
 8007278:	9308      	str	r3, [sp, #32]
 800727a:	e7f4      	b.n	8007266 <_dtoa_r+0x2b6>
 800727c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007280:	f8cd 9004 	str.w	r9, [sp, #4]
 8007284:	464b      	mov	r3, r9
 8007286:	e7c6      	b.n	8007216 <_dtoa_r+0x266>
 8007288:	3101      	adds	r1, #1
 800728a:	6041      	str	r1, [r0, #4]
 800728c:	0052      	lsls	r2, r2, #1
 800728e:	e7c6      	b.n	800721e <_dtoa_r+0x26e>
 8007290:	636f4361 	.word	0x636f4361
 8007294:	3fd287a7 	.word	0x3fd287a7
 8007298:	8b60c8b3 	.word	0x8b60c8b3
 800729c:	3fc68a28 	.word	0x3fc68a28
 80072a0:	509f79fb 	.word	0x509f79fb
 80072a4:	3fd34413 	.word	0x3fd34413
 80072a8:	08009e3e 	.word	0x08009e3e
 80072ac:	08009e55 	.word	0x08009e55
 80072b0:	7ff00000 	.word	0x7ff00000
 80072b4:	08009e3a 	.word	0x08009e3a
 80072b8:	08009e31 	.word	0x08009e31
 80072bc:	08009cb1 	.word	0x08009cb1
 80072c0:	3ff80000 	.word	0x3ff80000
 80072c4:	08009fd0 	.word	0x08009fd0
 80072c8:	08009eb4 	.word	0x08009eb4
 80072cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ce:	9a00      	ldr	r2, [sp, #0]
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	9b01      	ldr	r3, [sp, #4]
 80072d4:	2b0e      	cmp	r3, #14
 80072d6:	f200 80ad 	bhi.w	8007434 <_dtoa_r+0x484>
 80072da:	2d00      	cmp	r5, #0
 80072dc:	f000 80aa 	beq.w	8007434 <_dtoa_r+0x484>
 80072e0:	f1ba 0f00 	cmp.w	sl, #0
 80072e4:	dd36      	ble.n	8007354 <_dtoa_r+0x3a4>
 80072e6:	4ac3      	ldr	r2, [pc, #780]	; (80075f4 <_dtoa_r+0x644>)
 80072e8:	f00a 030f 	and.w	r3, sl, #15
 80072ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072f0:	ed93 7b00 	vldr	d7, [r3]
 80072f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80072f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80072fc:	eeb0 8a47 	vmov.f32	s16, s14
 8007300:	eef0 8a67 	vmov.f32	s17, s15
 8007304:	d016      	beq.n	8007334 <_dtoa_r+0x384>
 8007306:	4bbc      	ldr	r3, [pc, #752]	; (80075f8 <_dtoa_r+0x648>)
 8007308:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800730c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007310:	f7f9 faa4 	bl	800085c <__aeabi_ddiv>
 8007314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007318:	f007 070f 	and.w	r7, r7, #15
 800731c:	2503      	movs	r5, #3
 800731e:	4eb6      	ldr	r6, [pc, #728]	; (80075f8 <_dtoa_r+0x648>)
 8007320:	b957      	cbnz	r7, 8007338 <_dtoa_r+0x388>
 8007322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007326:	ec53 2b18 	vmov	r2, r3, d8
 800732a:	f7f9 fa97 	bl	800085c <__aeabi_ddiv>
 800732e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007332:	e029      	b.n	8007388 <_dtoa_r+0x3d8>
 8007334:	2502      	movs	r5, #2
 8007336:	e7f2      	b.n	800731e <_dtoa_r+0x36e>
 8007338:	07f9      	lsls	r1, r7, #31
 800733a:	d508      	bpl.n	800734e <_dtoa_r+0x39e>
 800733c:	ec51 0b18 	vmov	r0, r1, d8
 8007340:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007344:	f7f9 f960 	bl	8000608 <__aeabi_dmul>
 8007348:	ec41 0b18 	vmov	d8, r0, r1
 800734c:	3501      	adds	r5, #1
 800734e:	107f      	asrs	r7, r7, #1
 8007350:	3608      	adds	r6, #8
 8007352:	e7e5      	b.n	8007320 <_dtoa_r+0x370>
 8007354:	f000 80a6 	beq.w	80074a4 <_dtoa_r+0x4f4>
 8007358:	f1ca 0600 	rsb	r6, sl, #0
 800735c:	4ba5      	ldr	r3, [pc, #660]	; (80075f4 <_dtoa_r+0x644>)
 800735e:	4fa6      	ldr	r7, [pc, #664]	; (80075f8 <_dtoa_r+0x648>)
 8007360:	f006 020f 	and.w	r2, r6, #15
 8007364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007370:	f7f9 f94a 	bl	8000608 <__aeabi_dmul>
 8007374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007378:	1136      	asrs	r6, r6, #4
 800737a:	2300      	movs	r3, #0
 800737c:	2502      	movs	r5, #2
 800737e:	2e00      	cmp	r6, #0
 8007380:	f040 8085 	bne.w	800748e <_dtoa_r+0x4de>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1d2      	bne.n	800732e <_dtoa_r+0x37e>
 8007388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 808c 	beq.w	80074a8 <_dtoa_r+0x4f8>
 8007390:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007394:	4b99      	ldr	r3, [pc, #612]	; (80075fc <_dtoa_r+0x64c>)
 8007396:	2200      	movs	r2, #0
 8007398:	4630      	mov	r0, r6
 800739a:	4639      	mov	r1, r7
 800739c:	f7f9 fba6 	bl	8000aec <__aeabi_dcmplt>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	f000 8081 	beq.w	80074a8 <_dtoa_r+0x4f8>
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d07d      	beq.n	80074a8 <_dtoa_r+0x4f8>
 80073ac:	f1b9 0f00 	cmp.w	r9, #0
 80073b0:	dd3c      	ble.n	800742c <_dtoa_r+0x47c>
 80073b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80073b6:	9307      	str	r3, [sp, #28]
 80073b8:	2200      	movs	r2, #0
 80073ba:	4b91      	ldr	r3, [pc, #580]	; (8007600 <_dtoa_r+0x650>)
 80073bc:	4630      	mov	r0, r6
 80073be:	4639      	mov	r1, r7
 80073c0:	f7f9 f922 	bl	8000608 <__aeabi_dmul>
 80073c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c8:	3501      	adds	r5, #1
 80073ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80073ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073d2:	4628      	mov	r0, r5
 80073d4:	f7f9 f8ae 	bl	8000534 <__aeabi_i2d>
 80073d8:	4632      	mov	r2, r6
 80073da:	463b      	mov	r3, r7
 80073dc:	f7f9 f914 	bl	8000608 <__aeabi_dmul>
 80073e0:	4b88      	ldr	r3, [pc, #544]	; (8007604 <_dtoa_r+0x654>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	f7f8 ff5a 	bl	800029c <__adddf3>
 80073e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80073ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073f0:	9303      	str	r3, [sp, #12]
 80073f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d15c      	bne.n	80074b2 <_dtoa_r+0x502>
 80073f8:	4b83      	ldr	r3, [pc, #524]	; (8007608 <_dtoa_r+0x658>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	4630      	mov	r0, r6
 80073fe:	4639      	mov	r1, r7
 8007400:	f7f8 ff4a 	bl	8000298 <__aeabi_dsub>
 8007404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007408:	4606      	mov	r6, r0
 800740a:	460f      	mov	r7, r1
 800740c:	f7f9 fb8c 	bl	8000b28 <__aeabi_dcmpgt>
 8007410:	2800      	cmp	r0, #0
 8007412:	f040 8296 	bne.w	8007942 <_dtoa_r+0x992>
 8007416:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800741a:	4630      	mov	r0, r6
 800741c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007420:	4639      	mov	r1, r7
 8007422:	f7f9 fb63 	bl	8000aec <__aeabi_dcmplt>
 8007426:	2800      	cmp	r0, #0
 8007428:	f040 8288 	bne.w	800793c <_dtoa_r+0x98c>
 800742c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007430:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007436:	2b00      	cmp	r3, #0
 8007438:	f2c0 8158 	blt.w	80076ec <_dtoa_r+0x73c>
 800743c:	f1ba 0f0e 	cmp.w	sl, #14
 8007440:	f300 8154 	bgt.w	80076ec <_dtoa_r+0x73c>
 8007444:	4b6b      	ldr	r3, [pc, #428]	; (80075f4 <_dtoa_r+0x644>)
 8007446:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800744a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800744e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	f280 80e3 	bge.w	800761c <_dtoa_r+0x66c>
 8007456:	9b01      	ldr	r3, [sp, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	f300 80df 	bgt.w	800761c <_dtoa_r+0x66c>
 800745e:	f040 826d 	bne.w	800793c <_dtoa_r+0x98c>
 8007462:	4b69      	ldr	r3, [pc, #420]	; (8007608 <_dtoa_r+0x658>)
 8007464:	2200      	movs	r2, #0
 8007466:	4640      	mov	r0, r8
 8007468:	4649      	mov	r1, r9
 800746a:	f7f9 f8cd 	bl	8000608 <__aeabi_dmul>
 800746e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007472:	f7f9 fb4f 	bl	8000b14 <__aeabi_dcmpge>
 8007476:	9e01      	ldr	r6, [sp, #4]
 8007478:	4637      	mov	r7, r6
 800747a:	2800      	cmp	r0, #0
 800747c:	f040 8243 	bne.w	8007906 <_dtoa_r+0x956>
 8007480:	9d00      	ldr	r5, [sp, #0]
 8007482:	2331      	movs	r3, #49	; 0x31
 8007484:	f805 3b01 	strb.w	r3, [r5], #1
 8007488:	f10a 0a01 	add.w	sl, sl, #1
 800748c:	e23f      	b.n	800790e <_dtoa_r+0x95e>
 800748e:	07f2      	lsls	r2, r6, #31
 8007490:	d505      	bpl.n	800749e <_dtoa_r+0x4ee>
 8007492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007496:	f7f9 f8b7 	bl	8000608 <__aeabi_dmul>
 800749a:	3501      	adds	r5, #1
 800749c:	2301      	movs	r3, #1
 800749e:	1076      	asrs	r6, r6, #1
 80074a0:	3708      	adds	r7, #8
 80074a2:	e76c      	b.n	800737e <_dtoa_r+0x3ce>
 80074a4:	2502      	movs	r5, #2
 80074a6:	e76f      	b.n	8007388 <_dtoa_r+0x3d8>
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80074ae:	930c      	str	r3, [sp, #48]	; 0x30
 80074b0:	e78d      	b.n	80073ce <_dtoa_r+0x41e>
 80074b2:	9900      	ldr	r1, [sp, #0]
 80074b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80074b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074b8:	4b4e      	ldr	r3, [pc, #312]	; (80075f4 <_dtoa_r+0x644>)
 80074ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074be:	4401      	add	r1, r0
 80074c0:	9102      	str	r1, [sp, #8]
 80074c2:	9908      	ldr	r1, [sp, #32]
 80074c4:	eeb0 8a47 	vmov.f32	s16, s14
 80074c8:	eef0 8a67 	vmov.f32	s17, s15
 80074cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074d4:	2900      	cmp	r1, #0
 80074d6:	d045      	beq.n	8007564 <_dtoa_r+0x5b4>
 80074d8:	494c      	ldr	r1, [pc, #304]	; (800760c <_dtoa_r+0x65c>)
 80074da:	2000      	movs	r0, #0
 80074dc:	f7f9 f9be 	bl	800085c <__aeabi_ddiv>
 80074e0:	ec53 2b18 	vmov	r2, r3, d8
 80074e4:	f7f8 fed8 	bl	8000298 <__aeabi_dsub>
 80074e8:	9d00      	ldr	r5, [sp, #0]
 80074ea:	ec41 0b18 	vmov	d8, r0, r1
 80074ee:	4639      	mov	r1, r7
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7f9 fb39 	bl	8000b68 <__aeabi_d2iz>
 80074f6:	900c      	str	r0, [sp, #48]	; 0x30
 80074f8:	f7f9 f81c 	bl	8000534 <__aeabi_i2d>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4630      	mov	r0, r6
 8007502:	4639      	mov	r1, r7
 8007504:	f7f8 fec8 	bl	8000298 <__aeabi_dsub>
 8007508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800750a:	3330      	adds	r3, #48	; 0x30
 800750c:	f805 3b01 	strb.w	r3, [r5], #1
 8007510:	ec53 2b18 	vmov	r2, r3, d8
 8007514:	4606      	mov	r6, r0
 8007516:	460f      	mov	r7, r1
 8007518:	f7f9 fae8 	bl	8000aec <__aeabi_dcmplt>
 800751c:	2800      	cmp	r0, #0
 800751e:	d165      	bne.n	80075ec <_dtoa_r+0x63c>
 8007520:	4632      	mov	r2, r6
 8007522:	463b      	mov	r3, r7
 8007524:	4935      	ldr	r1, [pc, #212]	; (80075fc <_dtoa_r+0x64c>)
 8007526:	2000      	movs	r0, #0
 8007528:	f7f8 feb6 	bl	8000298 <__aeabi_dsub>
 800752c:	ec53 2b18 	vmov	r2, r3, d8
 8007530:	f7f9 fadc 	bl	8000aec <__aeabi_dcmplt>
 8007534:	2800      	cmp	r0, #0
 8007536:	f040 80b9 	bne.w	80076ac <_dtoa_r+0x6fc>
 800753a:	9b02      	ldr	r3, [sp, #8]
 800753c:	429d      	cmp	r5, r3
 800753e:	f43f af75 	beq.w	800742c <_dtoa_r+0x47c>
 8007542:	4b2f      	ldr	r3, [pc, #188]	; (8007600 <_dtoa_r+0x650>)
 8007544:	ec51 0b18 	vmov	r0, r1, d8
 8007548:	2200      	movs	r2, #0
 800754a:	f7f9 f85d 	bl	8000608 <__aeabi_dmul>
 800754e:	4b2c      	ldr	r3, [pc, #176]	; (8007600 <_dtoa_r+0x650>)
 8007550:	ec41 0b18 	vmov	d8, r0, r1
 8007554:	2200      	movs	r2, #0
 8007556:	4630      	mov	r0, r6
 8007558:	4639      	mov	r1, r7
 800755a:	f7f9 f855 	bl	8000608 <__aeabi_dmul>
 800755e:	4606      	mov	r6, r0
 8007560:	460f      	mov	r7, r1
 8007562:	e7c4      	b.n	80074ee <_dtoa_r+0x53e>
 8007564:	ec51 0b17 	vmov	r0, r1, d7
 8007568:	f7f9 f84e 	bl	8000608 <__aeabi_dmul>
 800756c:	9b02      	ldr	r3, [sp, #8]
 800756e:	9d00      	ldr	r5, [sp, #0]
 8007570:	930c      	str	r3, [sp, #48]	; 0x30
 8007572:	ec41 0b18 	vmov	d8, r0, r1
 8007576:	4639      	mov	r1, r7
 8007578:	4630      	mov	r0, r6
 800757a:	f7f9 faf5 	bl	8000b68 <__aeabi_d2iz>
 800757e:	9011      	str	r0, [sp, #68]	; 0x44
 8007580:	f7f8 ffd8 	bl	8000534 <__aeabi_i2d>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f8 fe84 	bl	8000298 <__aeabi_dsub>
 8007590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007592:	3330      	adds	r3, #48	; 0x30
 8007594:	f805 3b01 	strb.w	r3, [r5], #1
 8007598:	9b02      	ldr	r3, [sp, #8]
 800759a:	429d      	cmp	r5, r3
 800759c:	4606      	mov	r6, r0
 800759e:	460f      	mov	r7, r1
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	d134      	bne.n	8007610 <_dtoa_r+0x660>
 80075a6:	4b19      	ldr	r3, [pc, #100]	; (800760c <_dtoa_r+0x65c>)
 80075a8:	ec51 0b18 	vmov	r0, r1, d8
 80075ac:	f7f8 fe76 	bl	800029c <__adddf3>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4630      	mov	r0, r6
 80075b6:	4639      	mov	r1, r7
 80075b8:	f7f9 fab6 	bl	8000b28 <__aeabi_dcmpgt>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d175      	bne.n	80076ac <_dtoa_r+0x6fc>
 80075c0:	ec53 2b18 	vmov	r2, r3, d8
 80075c4:	4911      	ldr	r1, [pc, #68]	; (800760c <_dtoa_r+0x65c>)
 80075c6:	2000      	movs	r0, #0
 80075c8:	f7f8 fe66 	bl	8000298 <__aeabi_dsub>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	f7f9 fa8a 	bl	8000aec <__aeabi_dcmplt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	f43f af27 	beq.w	800742c <_dtoa_r+0x47c>
 80075de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075e0:	1e6b      	subs	r3, r5, #1
 80075e2:	930c      	str	r3, [sp, #48]	; 0x30
 80075e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075e8:	2b30      	cmp	r3, #48	; 0x30
 80075ea:	d0f8      	beq.n	80075de <_dtoa_r+0x62e>
 80075ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80075f0:	e04a      	b.n	8007688 <_dtoa_r+0x6d8>
 80075f2:	bf00      	nop
 80075f4:	08009fd0 	.word	0x08009fd0
 80075f8:	08009fa8 	.word	0x08009fa8
 80075fc:	3ff00000 	.word	0x3ff00000
 8007600:	40240000 	.word	0x40240000
 8007604:	401c0000 	.word	0x401c0000
 8007608:	40140000 	.word	0x40140000
 800760c:	3fe00000 	.word	0x3fe00000
 8007610:	4baf      	ldr	r3, [pc, #700]	; (80078d0 <_dtoa_r+0x920>)
 8007612:	f7f8 fff9 	bl	8000608 <__aeabi_dmul>
 8007616:	4606      	mov	r6, r0
 8007618:	460f      	mov	r7, r1
 800761a:	e7ac      	b.n	8007576 <_dtoa_r+0x5c6>
 800761c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007620:	9d00      	ldr	r5, [sp, #0]
 8007622:	4642      	mov	r2, r8
 8007624:	464b      	mov	r3, r9
 8007626:	4630      	mov	r0, r6
 8007628:	4639      	mov	r1, r7
 800762a:	f7f9 f917 	bl	800085c <__aeabi_ddiv>
 800762e:	f7f9 fa9b 	bl	8000b68 <__aeabi_d2iz>
 8007632:	9002      	str	r0, [sp, #8]
 8007634:	f7f8 ff7e 	bl	8000534 <__aeabi_i2d>
 8007638:	4642      	mov	r2, r8
 800763a:	464b      	mov	r3, r9
 800763c:	f7f8 ffe4 	bl	8000608 <__aeabi_dmul>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4630      	mov	r0, r6
 8007646:	4639      	mov	r1, r7
 8007648:	f7f8 fe26 	bl	8000298 <__aeabi_dsub>
 800764c:	9e02      	ldr	r6, [sp, #8]
 800764e:	9f01      	ldr	r7, [sp, #4]
 8007650:	3630      	adds	r6, #48	; 0x30
 8007652:	f805 6b01 	strb.w	r6, [r5], #1
 8007656:	9e00      	ldr	r6, [sp, #0]
 8007658:	1bae      	subs	r6, r5, r6
 800765a:	42b7      	cmp	r7, r6
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	d137      	bne.n	80076d2 <_dtoa_r+0x722>
 8007662:	f7f8 fe1b 	bl	800029c <__adddf3>
 8007666:	4642      	mov	r2, r8
 8007668:	464b      	mov	r3, r9
 800766a:	4606      	mov	r6, r0
 800766c:	460f      	mov	r7, r1
 800766e:	f7f9 fa5b 	bl	8000b28 <__aeabi_dcmpgt>
 8007672:	b9c8      	cbnz	r0, 80076a8 <_dtoa_r+0x6f8>
 8007674:	4642      	mov	r2, r8
 8007676:	464b      	mov	r3, r9
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f9 fa2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007680:	b110      	cbz	r0, 8007688 <_dtoa_r+0x6d8>
 8007682:	9b02      	ldr	r3, [sp, #8]
 8007684:	07d9      	lsls	r1, r3, #31
 8007686:	d40f      	bmi.n	80076a8 <_dtoa_r+0x6f8>
 8007688:	4620      	mov	r0, r4
 800768a:	4659      	mov	r1, fp
 800768c:	f000 fe58 	bl	8008340 <_Bfree>
 8007690:	2300      	movs	r3, #0
 8007692:	702b      	strb	r3, [r5, #0]
 8007694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007696:	f10a 0001 	add.w	r0, sl, #1
 800769a:	6018      	str	r0, [r3, #0]
 800769c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f43f acd8 	beq.w	8007054 <_dtoa_r+0xa4>
 80076a4:	601d      	str	r5, [r3, #0]
 80076a6:	e4d5      	b.n	8007054 <_dtoa_r+0xa4>
 80076a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80076ac:	462b      	mov	r3, r5
 80076ae:	461d      	mov	r5, r3
 80076b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076b4:	2a39      	cmp	r2, #57	; 0x39
 80076b6:	d108      	bne.n	80076ca <_dtoa_r+0x71a>
 80076b8:	9a00      	ldr	r2, [sp, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d1f7      	bne.n	80076ae <_dtoa_r+0x6fe>
 80076be:	9a07      	ldr	r2, [sp, #28]
 80076c0:	9900      	ldr	r1, [sp, #0]
 80076c2:	3201      	adds	r2, #1
 80076c4:	9207      	str	r2, [sp, #28]
 80076c6:	2230      	movs	r2, #48	; 0x30
 80076c8:	700a      	strb	r2, [r1, #0]
 80076ca:	781a      	ldrb	r2, [r3, #0]
 80076cc:	3201      	adds	r2, #1
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	e78c      	b.n	80075ec <_dtoa_r+0x63c>
 80076d2:	4b7f      	ldr	r3, [pc, #508]	; (80078d0 <_dtoa_r+0x920>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	f7f8 ff97 	bl	8000608 <__aeabi_dmul>
 80076da:	2200      	movs	r2, #0
 80076dc:	2300      	movs	r3, #0
 80076de:	4606      	mov	r6, r0
 80076e0:	460f      	mov	r7, r1
 80076e2:	f7f9 f9f9 	bl	8000ad8 <__aeabi_dcmpeq>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d09b      	beq.n	8007622 <_dtoa_r+0x672>
 80076ea:	e7cd      	b.n	8007688 <_dtoa_r+0x6d8>
 80076ec:	9a08      	ldr	r2, [sp, #32]
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	f000 80c4 	beq.w	800787c <_dtoa_r+0x8cc>
 80076f4:	9a05      	ldr	r2, [sp, #20]
 80076f6:	2a01      	cmp	r2, #1
 80076f8:	f300 80a8 	bgt.w	800784c <_dtoa_r+0x89c>
 80076fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076fe:	2a00      	cmp	r2, #0
 8007700:	f000 80a0 	beq.w	8007844 <_dtoa_r+0x894>
 8007704:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007708:	9e06      	ldr	r6, [sp, #24]
 800770a:	4645      	mov	r5, r8
 800770c:	9a04      	ldr	r2, [sp, #16]
 800770e:	2101      	movs	r1, #1
 8007710:	441a      	add	r2, r3
 8007712:	4620      	mov	r0, r4
 8007714:	4498      	add	r8, r3
 8007716:	9204      	str	r2, [sp, #16]
 8007718:	f000 ff18 	bl	800854c <__i2b>
 800771c:	4607      	mov	r7, r0
 800771e:	2d00      	cmp	r5, #0
 8007720:	dd0b      	ble.n	800773a <_dtoa_r+0x78a>
 8007722:	9b04      	ldr	r3, [sp, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	dd08      	ble.n	800773a <_dtoa_r+0x78a>
 8007728:	42ab      	cmp	r3, r5
 800772a:	9a04      	ldr	r2, [sp, #16]
 800772c:	bfa8      	it	ge
 800772e:	462b      	movge	r3, r5
 8007730:	eba8 0803 	sub.w	r8, r8, r3
 8007734:	1aed      	subs	r5, r5, r3
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	9304      	str	r3, [sp, #16]
 800773a:	9b06      	ldr	r3, [sp, #24]
 800773c:	b1fb      	cbz	r3, 800777e <_dtoa_r+0x7ce>
 800773e:	9b08      	ldr	r3, [sp, #32]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 809f 	beq.w	8007884 <_dtoa_r+0x8d4>
 8007746:	2e00      	cmp	r6, #0
 8007748:	dd11      	ble.n	800776e <_dtoa_r+0x7be>
 800774a:	4639      	mov	r1, r7
 800774c:	4632      	mov	r2, r6
 800774e:	4620      	mov	r0, r4
 8007750:	f000 ffb8 	bl	80086c4 <__pow5mult>
 8007754:	465a      	mov	r2, fp
 8007756:	4601      	mov	r1, r0
 8007758:	4607      	mov	r7, r0
 800775a:	4620      	mov	r0, r4
 800775c:	f000 ff0c 	bl	8008578 <__multiply>
 8007760:	4659      	mov	r1, fp
 8007762:	9007      	str	r0, [sp, #28]
 8007764:	4620      	mov	r0, r4
 8007766:	f000 fdeb 	bl	8008340 <_Bfree>
 800776a:	9b07      	ldr	r3, [sp, #28]
 800776c:	469b      	mov	fp, r3
 800776e:	9b06      	ldr	r3, [sp, #24]
 8007770:	1b9a      	subs	r2, r3, r6
 8007772:	d004      	beq.n	800777e <_dtoa_r+0x7ce>
 8007774:	4659      	mov	r1, fp
 8007776:	4620      	mov	r0, r4
 8007778:	f000 ffa4 	bl	80086c4 <__pow5mult>
 800777c:	4683      	mov	fp, r0
 800777e:	2101      	movs	r1, #1
 8007780:	4620      	mov	r0, r4
 8007782:	f000 fee3 	bl	800854c <__i2b>
 8007786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007788:	2b00      	cmp	r3, #0
 800778a:	4606      	mov	r6, r0
 800778c:	dd7c      	ble.n	8007888 <_dtoa_r+0x8d8>
 800778e:	461a      	mov	r2, r3
 8007790:	4601      	mov	r1, r0
 8007792:	4620      	mov	r0, r4
 8007794:	f000 ff96 	bl	80086c4 <__pow5mult>
 8007798:	9b05      	ldr	r3, [sp, #20]
 800779a:	2b01      	cmp	r3, #1
 800779c:	4606      	mov	r6, r0
 800779e:	dd76      	ble.n	800788e <_dtoa_r+0x8de>
 80077a0:	2300      	movs	r3, #0
 80077a2:	9306      	str	r3, [sp, #24]
 80077a4:	6933      	ldr	r3, [r6, #16]
 80077a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077aa:	6918      	ldr	r0, [r3, #16]
 80077ac:	f000 fe7e 	bl	80084ac <__hi0bits>
 80077b0:	f1c0 0020 	rsb	r0, r0, #32
 80077b4:	9b04      	ldr	r3, [sp, #16]
 80077b6:	4418      	add	r0, r3
 80077b8:	f010 001f 	ands.w	r0, r0, #31
 80077bc:	f000 8086 	beq.w	80078cc <_dtoa_r+0x91c>
 80077c0:	f1c0 0320 	rsb	r3, r0, #32
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	dd7f      	ble.n	80078c8 <_dtoa_r+0x918>
 80077c8:	f1c0 001c 	rsb	r0, r0, #28
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	4403      	add	r3, r0
 80077d0:	4480      	add	r8, r0
 80077d2:	4405      	add	r5, r0
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	f1b8 0f00 	cmp.w	r8, #0
 80077da:	dd05      	ble.n	80077e8 <_dtoa_r+0x838>
 80077dc:	4659      	mov	r1, fp
 80077de:	4642      	mov	r2, r8
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 ffc9 	bl	8008778 <__lshift>
 80077e6:	4683      	mov	fp, r0
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	dd05      	ble.n	80077fa <_dtoa_r+0x84a>
 80077ee:	4631      	mov	r1, r6
 80077f0:	461a      	mov	r2, r3
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 ffc0 	bl	8008778 <__lshift>
 80077f8:	4606      	mov	r6, r0
 80077fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d069      	beq.n	80078d4 <_dtoa_r+0x924>
 8007800:	4631      	mov	r1, r6
 8007802:	4658      	mov	r0, fp
 8007804:	f001 f824 	bl	8008850 <__mcmp>
 8007808:	2800      	cmp	r0, #0
 800780a:	da63      	bge.n	80078d4 <_dtoa_r+0x924>
 800780c:	2300      	movs	r3, #0
 800780e:	4659      	mov	r1, fp
 8007810:	220a      	movs	r2, #10
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fdb6 	bl	8008384 <__multadd>
 8007818:	9b08      	ldr	r3, [sp, #32]
 800781a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800781e:	4683      	mov	fp, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 818f 	beq.w	8007b44 <_dtoa_r+0xb94>
 8007826:	4639      	mov	r1, r7
 8007828:	2300      	movs	r3, #0
 800782a:	220a      	movs	r2, #10
 800782c:	4620      	mov	r0, r4
 800782e:	f000 fda9 	bl	8008384 <__multadd>
 8007832:	f1b9 0f00 	cmp.w	r9, #0
 8007836:	4607      	mov	r7, r0
 8007838:	f300 808e 	bgt.w	8007958 <_dtoa_r+0x9a8>
 800783c:	9b05      	ldr	r3, [sp, #20]
 800783e:	2b02      	cmp	r3, #2
 8007840:	dc50      	bgt.n	80078e4 <_dtoa_r+0x934>
 8007842:	e089      	b.n	8007958 <_dtoa_r+0x9a8>
 8007844:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800784a:	e75d      	b.n	8007708 <_dtoa_r+0x758>
 800784c:	9b01      	ldr	r3, [sp, #4]
 800784e:	1e5e      	subs	r6, r3, #1
 8007850:	9b06      	ldr	r3, [sp, #24]
 8007852:	42b3      	cmp	r3, r6
 8007854:	bfbf      	itttt	lt
 8007856:	9b06      	ldrlt	r3, [sp, #24]
 8007858:	9606      	strlt	r6, [sp, #24]
 800785a:	1af2      	sublt	r2, r6, r3
 800785c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800785e:	bfb6      	itet	lt
 8007860:	189b      	addlt	r3, r3, r2
 8007862:	1b9e      	subge	r6, r3, r6
 8007864:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007866:	9b01      	ldr	r3, [sp, #4]
 8007868:	bfb8      	it	lt
 800786a:	2600      	movlt	r6, #0
 800786c:	2b00      	cmp	r3, #0
 800786e:	bfb5      	itete	lt
 8007870:	eba8 0503 	sublt.w	r5, r8, r3
 8007874:	9b01      	ldrge	r3, [sp, #4]
 8007876:	2300      	movlt	r3, #0
 8007878:	4645      	movge	r5, r8
 800787a:	e747      	b.n	800770c <_dtoa_r+0x75c>
 800787c:	9e06      	ldr	r6, [sp, #24]
 800787e:	9f08      	ldr	r7, [sp, #32]
 8007880:	4645      	mov	r5, r8
 8007882:	e74c      	b.n	800771e <_dtoa_r+0x76e>
 8007884:	9a06      	ldr	r2, [sp, #24]
 8007886:	e775      	b.n	8007774 <_dtoa_r+0x7c4>
 8007888:	9b05      	ldr	r3, [sp, #20]
 800788a:	2b01      	cmp	r3, #1
 800788c:	dc18      	bgt.n	80078c0 <_dtoa_r+0x910>
 800788e:	9b02      	ldr	r3, [sp, #8]
 8007890:	b9b3      	cbnz	r3, 80078c0 <_dtoa_r+0x910>
 8007892:	9b03      	ldr	r3, [sp, #12]
 8007894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007898:	b9a3      	cbnz	r3, 80078c4 <_dtoa_r+0x914>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078a0:	0d1b      	lsrs	r3, r3, #20
 80078a2:	051b      	lsls	r3, r3, #20
 80078a4:	b12b      	cbz	r3, 80078b2 <_dtoa_r+0x902>
 80078a6:	9b04      	ldr	r3, [sp, #16]
 80078a8:	3301      	adds	r3, #1
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	f108 0801 	add.w	r8, r8, #1
 80078b0:	2301      	movs	r3, #1
 80078b2:	9306      	str	r3, [sp, #24]
 80078b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f47f af74 	bne.w	80077a4 <_dtoa_r+0x7f4>
 80078bc:	2001      	movs	r0, #1
 80078be:	e779      	b.n	80077b4 <_dtoa_r+0x804>
 80078c0:	2300      	movs	r3, #0
 80078c2:	e7f6      	b.n	80078b2 <_dtoa_r+0x902>
 80078c4:	9b02      	ldr	r3, [sp, #8]
 80078c6:	e7f4      	b.n	80078b2 <_dtoa_r+0x902>
 80078c8:	d085      	beq.n	80077d6 <_dtoa_r+0x826>
 80078ca:	4618      	mov	r0, r3
 80078cc:	301c      	adds	r0, #28
 80078ce:	e77d      	b.n	80077cc <_dtoa_r+0x81c>
 80078d0:	40240000 	.word	0x40240000
 80078d4:	9b01      	ldr	r3, [sp, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dc38      	bgt.n	800794c <_dtoa_r+0x99c>
 80078da:	9b05      	ldr	r3, [sp, #20]
 80078dc:	2b02      	cmp	r3, #2
 80078de:	dd35      	ble.n	800794c <_dtoa_r+0x99c>
 80078e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80078e4:	f1b9 0f00 	cmp.w	r9, #0
 80078e8:	d10d      	bne.n	8007906 <_dtoa_r+0x956>
 80078ea:	4631      	mov	r1, r6
 80078ec:	464b      	mov	r3, r9
 80078ee:	2205      	movs	r2, #5
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fd47 	bl	8008384 <__multadd>
 80078f6:	4601      	mov	r1, r0
 80078f8:	4606      	mov	r6, r0
 80078fa:	4658      	mov	r0, fp
 80078fc:	f000 ffa8 	bl	8008850 <__mcmp>
 8007900:	2800      	cmp	r0, #0
 8007902:	f73f adbd 	bgt.w	8007480 <_dtoa_r+0x4d0>
 8007906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007908:	9d00      	ldr	r5, [sp, #0]
 800790a:	ea6f 0a03 	mvn.w	sl, r3
 800790e:	f04f 0800 	mov.w	r8, #0
 8007912:	4631      	mov	r1, r6
 8007914:	4620      	mov	r0, r4
 8007916:	f000 fd13 	bl	8008340 <_Bfree>
 800791a:	2f00      	cmp	r7, #0
 800791c:	f43f aeb4 	beq.w	8007688 <_dtoa_r+0x6d8>
 8007920:	f1b8 0f00 	cmp.w	r8, #0
 8007924:	d005      	beq.n	8007932 <_dtoa_r+0x982>
 8007926:	45b8      	cmp	r8, r7
 8007928:	d003      	beq.n	8007932 <_dtoa_r+0x982>
 800792a:	4641      	mov	r1, r8
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fd07 	bl	8008340 <_Bfree>
 8007932:	4639      	mov	r1, r7
 8007934:	4620      	mov	r0, r4
 8007936:	f000 fd03 	bl	8008340 <_Bfree>
 800793a:	e6a5      	b.n	8007688 <_dtoa_r+0x6d8>
 800793c:	2600      	movs	r6, #0
 800793e:	4637      	mov	r7, r6
 8007940:	e7e1      	b.n	8007906 <_dtoa_r+0x956>
 8007942:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007944:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007948:	4637      	mov	r7, r6
 800794a:	e599      	b.n	8007480 <_dtoa_r+0x4d0>
 800794c:	9b08      	ldr	r3, [sp, #32]
 800794e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 80fd 	beq.w	8007b52 <_dtoa_r+0xba2>
 8007958:	2d00      	cmp	r5, #0
 800795a:	dd05      	ble.n	8007968 <_dtoa_r+0x9b8>
 800795c:	4639      	mov	r1, r7
 800795e:	462a      	mov	r2, r5
 8007960:	4620      	mov	r0, r4
 8007962:	f000 ff09 	bl	8008778 <__lshift>
 8007966:	4607      	mov	r7, r0
 8007968:	9b06      	ldr	r3, [sp, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d05c      	beq.n	8007a28 <_dtoa_r+0xa78>
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	4620      	mov	r0, r4
 8007972:	f000 fca5 	bl	80082c0 <_Balloc>
 8007976:	4605      	mov	r5, r0
 8007978:	b928      	cbnz	r0, 8007986 <_dtoa_r+0x9d6>
 800797a:	4b80      	ldr	r3, [pc, #512]	; (8007b7c <_dtoa_r+0xbcc>)
 800797c:	4602      	mov	r2, r0
 800797e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007982:	f7ff bb2e 	b.w	8006fe2 <_dtoa_r+0x32>
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	3202      	adds	r2, #2
 800798a:	0092      	lsls	r2, r2, #2
 800798c:	f107 010c 	add.w	r1, r7, #12
 8007990:	300c      	adds	r0, #12
 8007992:	f000 fc87 	bl	80082a4 <memcpy>
 8007996:	2201      	movs	r2, #1
 8007998:	4629      	mov	r1, r5
 800799a:	4620      	mov	r0, r4
 800799c:	f000 feec 	bl	8008778 <__lshift>
 80079a0:	9b00      	ldr	r3, [sp, #0]
 80079a2:	3301      	adds	r3, #1
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	9b00      	ldr	r3, [sp, #0]
 80079a8:	444b      	add	r3, r9
 80079aa:	9307      	str	r3, [sp, #28]
 80079ac:	9b02      	ldr	r3, [sp, #8]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	46b8      	mov	r8, r7
 80079b4:	9306      	str	r3, [sp, #24]
 80079b6:	4607      	mov	r7, r0
 80079b8:	9b01      	ldr	r3, [sp, #4]
 80079ba:	4631      	mov	r1, r6
 80079bc:	3b01      	subs	r3, #1
 80079be:	4658      	mov	r0, fp
 80079c0:	9302      	str	r3, [sp, #8]
 80079c2:	f7ff fa67 	bl	8006e94 <quorem>
 80079c6:	4603      	mov	r3, r0
 80079c8:	3330      	adds	r3, #48	; 0x30
 80079ca:	9004      	str	r0, [sp, #16]
 80079cc:	4641      	mov	r1, r8
 80079ce:	4658      	mov	r0, fp
 80079d0:	9308      	str	r3, [sp, #32]
 80079d2:	f000 ff3d 	bl	8008850 <__mcmp>
 80079d6:	463a      	mov	r2, r7
 80079d8:	4681      	mov	r9, r0
 80079da:	4631      	mov	r1, r6
 80079dc:	4620      	mov	r0, r4
 80079de:	f000 ff53 	bl	8008888 <__mdiff>
 80079e2:	68c2      	ldr	r2, [r0, #12]
 80079e4:	9b08      	ldr	r3, [sp, #32]
 80079e6:	4605      	mov	r5, r0
 80079e8:	bb02      	cbnz	r2, 8007a2c <_dtoa_r+0xa7c>
 80079ea:	4601      	mov	r1, r0
 80079ec:	4658      	mov	r0, fp
 80079ee:	f000 ff2f 	bl	8008850 <__mcmp>
 80079f2:	9b08      	ldr	r3, [sp, #32]
 80079f4:	4602      	mov	r2, r0
 80079f6:	4629      	mov	r1, r5
 80079f8:	4620      	mov	r0, r4
 80079fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80079fe:	f000 fc9f 	bl	8008340 <_Bfree>
 8007a02:	9b05      	ldr	r3, [sp, #20]
 8007a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a06:	9d01      	ldr	r5, [sp, #4]
 8007a08:	ea43 0102 	orr.w	r1, r3, r2
 8007a0c:	9b06      	ldr	r3, [sp, #24]
 8007a0e:	430b      	orrs	r3, r1
 8007a10:	9b08      	ldr	r3, [sp, #32]
 8007a12:	d10d      	bne.n	8007a30 <_dtoa_r+0xa80>
 8007a14:	2b39      	cmp	r3, #57	; 0x39
 8007a16:	d029      	beq.n	8007a6c <_dtoa_r+0xabc>
 8007a18:	f1b9 0f00 	cmp.w	r9, #0
 8007a1c:	dd01      	ble.n	8007a22 <_dtoa_r+0xa72>
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	3331      	adds	r3, #49	; 0x31
 8007a22:	9a02      	ldr	r2, [sp, #8]
 8007a24:	7013      	strb	r3, [r2, #0]
 8007a26:	e774      	b.n	8007912 <_dtoa_r+0x962>
 8007a28:	4638      	mov	r0, r7
 8007a2a:	e7b9      	b.n	80079a0 <_dtoa_r+0x9f0>
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	e7e2      	b.n	80079f6 <_dtoa_r+0xa46>
 8007a30:	f1b9 0f00 	cmp.w	r9, #0
 8007a34:	db06      	blt.n	8007a44 <_dtoa_r+0xa94>
 8007a36:	9905      	ldr	r1, [sp, #20]
 8007a38:	ea41 0909 	orr.w	r9, r1, r9
 8007a3c:	9906      	ldr	r1, [sp, #24]
 8007a3e:	ea59 0101 	orrs.w	r1, r9, r1
 8007a42:	d120      	bne.n	8007a86 <_dtoa_r+0xad6>
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	ddec      	ble.n	8007a22 <_dtoa_r+0xa72>
 8007a48:	4659      	mov	r1, fp
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	f000 fe92 	bl	8008778 <__lshift>
 8007a54:	4631      	mov	r1, r6
 8007a56:	4683      	mov	fp, r0
 8007a58:	f000 fefa 	bl	8008850 <__mcmp>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	9b01      	ldr	r3, [sp, #4]
 8007a60:	dc02      	bgt.n	8007a68 <_dtoa_r+0xab8>
 8007a62:	d1de      	bne.n	8007a22 <_dtoa_r+0xa72>
 8007a64:	07da      	lsls	r2, r3, #31
 8007a66:	d5dc      	bpl.n	8007a22 <_dtoa_r+0xa72>
 8007a68:	2b39      	cmp	r3, #57	; 0x39
 8007a6a:	d1d8      	bne.n	8007a1e <_dtoa_r+0xa6e>
 8007a6c:	9a02      	ldr	r2, [sp, #8]
 8007a6e:	2339      	movs	r3, #57	; 0x39
 8007a70:	7013      	strb	r3, [r2, #0]
 8007a72:	462b      	mov	r3, r5
 8007a74:	461d      	mov	r5, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a7c:	2a39      	cmp	r2, #57	; 0x39
 8007a7e:	d050      	beq.n	8007b22 <_dtoa_r+0xb72>
 8007a80:	3201      	adds	r2, #1
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e745      	b.n	8007912 <_dtoa_r+0x962>
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	dd03      	ble.n	8007a92 <_dtoa_r+0xae2>
 8007a8a:	2b39      	cmp	r3, #57	; 0x39
 8007a8c:	d0ee      	beq.n	8007a6c <_dtoa_r+0xabc>
 8007a8e:	3301      	adds	r3, #1
 8007a90:	e7c7      	b.n	8007a22 <_dtoa_r+0xa72>
 8007a92:	9a01      	ldr	r2, [sp, #4]
 8007a94:	9907      	ldr	r1, [sp, #28]
 8007a96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a9a:	428a      	cmp	r2, r1
 8007a9c:	d02a      	beq.n	8007af4 <_dtoa_r+0xb44>
 8007a9e:	4659      	mov	r1, fp
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	220a      	movs	r2, #10
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 fc6d 	bl	8008384 <__multadd>
 8007aaa:	45b8      	cmp	r8, r7
 8007aac:	4683      	mov	fp, r0
 8007aae:	f04f 0300 	mov.w	r3, #0
 8007ab2:	f04f 020a 	mov.w	r2, #10
 8007ab6:	4641      	mov	r1, r8
 8007ab8:	4620      	mov	r0, r4
 8007aba:	d107      	bne.n	8007acc <_dtoa_r+0xb1c>
 8007abc:	f000 fc62 	bl	8008384 <__multadd>
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	4607      	mov	r7, r0
 8007ac4:	9b01      	ldr	r3, [sp, #4]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	e775      	b.n	80079b8 <_dtoa_r+0xa08>
 8007acc:	f000 fc5a 	bl	8008384 <__multadd>
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	4680      	mov	r8, r0
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	220a      	movs	r2, #10
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 fc53 	bl	8008384 <__multadd>
 8007ade:	4607      	mov	r7, r0
 8007ae0:	e7f0      	b.n	8007ac4 <_dtoa_r+0xb14>
 8007ae2:	f1b9 0f00 	cmp.w	r9, #0
 8007ae6:	9a00      	ldr	r2, [sp, #0]
 8007ae8:	bfcc      	ite	gt
 8007aea:	464d      	movgt	r5, r9
 8007aec:	2501      	movle	r5, #1
 8007aee:	4415      	add	r5, r2
 8007af0:	f04f 0800 	mov.w	r8, #0
 8007af4:	4659      	mov	r1, fp
 8007af6:	2201      	movs	r2, #1
 8007af8:	4620      	mov	r0, r4
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	f000 fe3c 	bl	8008778 <__lshift>
 8007b00:	4631      	mov	r1, r6
 8007b02:	4683      	mov	fp, r0
 8007b04:	f000 fea4 	bl	8008850 <__mcmp>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	dcb2      	bgt.n	8007a72 <_dtoa_r+0xac2>
 8007b0c:	d102      	bne.n	8007b14 <_dtoa_r+0xb64>
 8007b0e:	9b01      	ldr	r3, [sp, #4]
 8007b10:	07db      	lsls	r3, r3, #31
 8007b12:	d4ae      	bmi.n	8007a72 <_dtoa_r+0xac2>
 8007b14:	462b      	mov	r3, r5
 8007b16:	461d      	mov	r5, r3
 8007b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b1c:	2a30      	cmp	r2, #48	; 0x30
 8007b1e:	d0fa      	beq.n	8007b16 <_dtoa_r+0xb66>
 8007b20:	e6f7      	b.n	8007912 <_dtoa_r+0x962>
 8007b22:	9a00      	ldr	r2, [sp, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d1a5      	bne.n	8007a74 <_dtoa_r+0xac4>
 8007b28:	f10a 0a01 	add.w	sl, sl, #1
 8007b2c:	2331      	movs	r3, #49	; 0x31
 8007b2e:	e779      	b.n	8007a24 <_dtoa_r+0xa74>
 8007b30:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <_dtoa_r+0xbd0>)
 8007b32:	f7ff baaf 	b.w	8007094 <_dtoa_r+0xe4>
 8007b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f47f aa86 	bne.w	800704a <_dtoa_r+0x9a>
 8007b3e:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <_dtoa_r+0xbd4>)
 8007b40:	f7ff baa8 	b.w	8007094 <_dtoa_r+0xe4>
 8007b44:	f1b9 0f00 	cmp.w	r9, #0
 8007b48:	dc03      	bgt.n	8007b52 <_dtoa_r+0xba2>
 8007b4a:	9b05      	ldr	r3, [sp, #20]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	f73f aec9 	bgt.w	80078e4 <_dtoa_r+0x934>
 8007b52:	9d00      	ldr	r5, [sp, #0]
 8007b54:	4631      	mov	r1, r6
 8007b56:	4658      	mov	r0, fp
 8007b58:	f7ff f99c 	bl	8006e94 <quorem>
 8007b5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b60:	f805 3b01 	strb.w	r3, [r5], #1
 8007b64:	9a00      	ldr	r2, [sp, #0]
 8007b66:	1aaa      	subs	r2, r5, r2
 8007b68:	4591      	cmp	r9, r2
 8007b6a:	ddba      	ble.n	8007ae2 <_dtoa_r+0xb32>
 8007b6c:	4659      	mov	r1, fp
 8007b6e:	2300      	movs	r3, #0
 8007b70:	220a      	movs	r2, #10
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fc06 	bl	8008384 <__multadd>
 8007b78:	4683      	mov	fp, r0
 8007b7a:	e7eb      	b.n	8007b54 <_dtoa_r+0xba4>
 8007b7c:	08009eb4 	.word	0x08009eb4
 8007b80:	08009cb0 	.word	0x08009cb0
 8007b84:	08009e31 	.word	0x08009e31

08007b88 <rshift>:
 8007b88:	6903      	ldr	r3, [r0, #16]
 8007b8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b96:	f100 0414 	add.w	r4, r0, #20
 8007b9a:	dd45      	ble.n	8007c28 <rshift+0xa0>
 8007b9c:	f011 011f 	ands.w	r1, r1, #31
 8007ba0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ba4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ba8:	d10c      	bne.n	8007bc4 <rshift+0x3c>
 8007baa:	f100 0710 	add.w	r7, r0, #16
 8007bae:	4629      	mov	r1, r5
 8007bb0:	42b1      	cmp	r1, r6
 8007bb2:	d334      	bcc.n	8007c1e <rshift+0x96>
 8007bb4:	1a9b      	subs	r3, r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	1eea      	subs	r2, r5, #3
 8007bba:	4296      	cmp	r6, r2
 8007bbc:	bf38      	it	cc
 8007bbe:	2300      	movcc	r3, #0
 8007bc0:	4423      	add	r3, r4
 8007bc2:	e015      	b.n	8007bf0 <rshift+0x68>
 8007bc4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bc8:	f1c1 0820 	rsb	r8, r1, #32
 8007bcc:	40cf      	lsrs	r7, r1
 8007bce:	f105 0e04 	add.w	lr, r5, #4
 8007bd2:	46a1      	mov	r9, r4
 8007bd4:	4576      	cmp	r6, lr
 8007bd6:	46f4      	mov	ip, lr
 8007bd8:	d815      	bhi.n	8007c06 <rshift+0x7e>
 8007bda:	1a9b      	subs	r3, r3, r2
 8007bdc:	009a      	lsls	r2, r3, #2
 8007bde:	3a04      	subs	r2, #4
 8007be0:	3501      	adds	r5, #1
 8007be2:	42ae      	cmp	r6, r5
 8007be4:	bf38      	it	cc
 8007be6:	2200      	movcc	r2, #0
 8007be8:	18a3      	adds	r3, r4, r2
 8007bea:	50a7      	str	r7, [r4, r2]
 8007bec:	b107      	cbz	r7, 8007bf0 <rshift+0x68>
 8007bee:	3304      	adds	r3, #4
 8007bf0:	1b1a      	subs	r2, r3, r4
 8007bf2:	42a3      	cmp	r3, r4
 8007bf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bf8:	bf08      	it	eq
 8007bfa:	2300      	moveq	r3, #0
 8007bfc:	6102      	str	r2, [r0, #16]
 8007bfe:	bf08      	it	eq
 8007c00:	6143      	streq	r3, [r0, #20]
 8007c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c06:	f8dc c000 	ldr.w	ip, [ip]
 8007c0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c0e:	ea4c 0707 	orr.w	r7, ip, r7
 8007c12:	f849 7b04 	str.w	r7, [r9], #4
 8007c16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c1a:	40cf      	lsrs	r7, r1
 8007c1c:	e7da      	b.n	8007bd4 <rshift+0x4c>
 8007c1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c22:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c26:	e7c3      	b.n	8007bb0 <rshift+0x28>
 8007c28:	4623      	mov	r3, r4
 8007c2a:	e7e1      	b.n	8007bf0 <rshift+0x68>

08007c2c <__hexdig_fun>:
 8007c2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c30:	2b09      	cmp	r3, #9
 8007c32:	d802      	bhi.n	8007c3a <__hexdig_fun+0xe>
 8007c34:	3820      	subs	r0, #32
 8007c36:	b2c0      	uxtb	r0, r0
 8007c38:	4770      	bx	lr
 8007c3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c3e:	2b05      	cmp	r3, #5
 8007c40:	d801      	bhi.n	8007c46 <__hexdig_fun+0x1a>
 8007c42:	3847      	subs	r0, #71	; 0x47
 8007c44:	e7f7      	b.n	8007c36 <__hexdig_fun+0xa>
 8007c46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c4a:	2b05      	cmp	r3, #5
 8007c4c:	d801      	bhi.n	8007c52 <__hexdig_fun+0x26>
 8007c4e:	3827      	subs	r0, #39	; 0x27
 8007c50:	e7f1      	b.n	8007c36 <__hexdig_fun+0xa>
 8007c52:	2000      	movs	r0, #0
 8007c54:	4770      	bx	lr
	...

08007c58 <__gethex>:
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	ed2d 8b02 	vpush	{d8}
 8007c60:	b089      	sub	sp, #36	; 0x24
 8007c62:	ee08 0a10 	vmov	s16, r0
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	4bbc      	ldr	r3, [pc, #752]	; (8007f5c <__gethex+0x304>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	9301      	str	r3, [sp, #4]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	468b      	mov	fp, r1
 8007c72:	4690      	mov	r8, r2
 8007c74:	f7f8 fab4 	bl	80001e0 <strlen>
 8007c78:	9b01      	ldr	r3, [sp, #4]
 8007c7a:	f8db 2000 	ldr.w	r2, [fp]
 8007c7e:	4403      	add	r3, r0
 8007c80:	4682      	mov	sl, r0
 8007c82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007c86:	9305      	str	r3, [sp, #20]
 8007c88:	1c93      	adds	r3, r2, #2
 8007c8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007c8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007c92:	32fe      	adds	r2, #254	; 0xfe
 8007c94:	18d1      	adds	r1, r2, r3
 8007c96:	461f      	mov	r7, r3
 8007c98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007c9c:	9100      	str	r1, [sp, #0]
 8007c9e:	2830      	cmp	r0, #48	; 0x30
 8007ca0:	d0f8      	beq.n	8007c94 <__gethex+0x3c>
 8007ca2:	f7ff ffc3 	bl	8007c2c <__hexdig_fun>
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d13a      	bne.n	8007d22 <__gethex+0xca>
 8007cac:	9901      	ldr	r1, [sp, #4]
 8007cae:	4652      	mov	r2, sl
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	f001 f9ed 	bl	8009090 <strncmp>
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d168      	bne.n	8007d8e <__gethex+0x136>
 8007cbc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007cc0:	eb07 060a 	add.w	r6, r7, sl
 8007cc4:	f7ff ffb2 	bl	8007c2c <__hexdig_fun>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d062      	beq.n	8007d92 <__gethex+0x13a>
 8007ccc:	4633      	mov	r3, r6
 8007cce:	7818      	ldrb	r0, [r3, #0]
 8007cd0:	2830      	cmp	r0, #48	; 0x30
 8007cd2:	461f      	mov	r7, r3
 8007cd4:	f103 0301 	add.w	r3, r3, #1
 8007cd8:	d0f9      	beq.n	8007cce <__gethex+0x76>
 8007cda:	f7ff ffa7 	bl	8007c2c <__hexdig_fun>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	fab0 f480 	clz	r4, r0
 8007ce4:	0964      	lsrs	r4, r4, #5
 8007ce6:	4635      	mov	r5, r6
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	463a      	mov	r2, r7
 8007cec:	4616      	mov	r6, r2
 8007cee:	3201      	adds	r2, #1
 8007cf0:	7830      	ldrb	r0, [r6, #0]
 8007cf2:	f7ff ff9b 	bl	8007c2c <__hexdig_fun>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d1f8      	bne.n	8007cec <__gethex+0x94>
 8007cfa:	9901      	ldr	r1, [sp, #4]
 8007cfc:	4652      	mov	r2, sl
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f001 f9c6 	bl	8009090 <strncmp>
 8007d04:	b980      	cbnz	r0, 8007d28 <__gethex+0xd0>
 8007d06:	b94d      	cbnz	r5, 8007d1c <__gethex+0xc4>
 8007d08:	eb06 050a 	add.w	r5, r6, sl
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	4616      	mov	r6, r2
 8007d10:	3201      	adds	r2, #1
 8007d12:	7830      	ldrb	r0, [r6, #0]
 8007d14:	f7ff ff8a 	bl	8007c2c <__hexdig_fun>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d1f8      	bne.n	8007d0e <__gethex+0xb6>
 8007d1c:	1bad      	subs	r5, r5, r6
 8007d1e:	00ad      	lsls	r5, r5, #2
 8007d20:	e004      	b.n	8007d2c <__gethex+0xd4>
 8007d22:	2400      	movs	r4, #0
 8007d24:	4625      	mov	r5, r4
 8007d26:	e7e0      	b.n	8007cea <__gethex+0x92>
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	d1f7      	bne.n	8007d1c <__gethex+0xc4>
 8007d2c:	7833      	ldrb	r3, [r6, #0]
 8007d2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d32:	2b50      	cmp	r3, #80	; 0x50
 8007d34:	d13b      	bne.n	8007dae <__gethex+0x156>
 8007d36:	7873      	ldrb	r3, [r6, #1]
 8007d38:	2b2b      	cmp	r3, #43	; 0x2b
 8007d3a:	d02c      	beq.n	8007d96 <__gethex+0x13e>
 8007d3c:	2b2d      	cmp	r3, #45	; 0x2d
 8007d3e:	d02e      	beq.n	8007d9e <__gethex+0x146>
 8007d40:	1c71      	adds	r1, r6, #1
 8007d42:	f04f 0900 	mov.w	r9, #0
 8007d46:	7808      	ldrb	r0, [r1, #0]
 8007d48:	f7ff ff70 	bl	8007c2c <__hexdig_fun>
 8007d4c:	1e43      	subs	r3, r0, #1
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b18      	cmp	r3, #24
 8007d52:	d82c      	bhi.n	8007dae <__gethex+0x156>
 8007d54:	f1a0 0210 	sub.w	r2, r0, #16
 8007d58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d5c:	f7ff ff66 	bl	8007c2c <__hexdig_fun>
 8007d60:	1e43      	subs	r3, r0, #1
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b18      	cmp	r3, #24
 8007d66:	d91d      	bls.n	8007da4 <__gethex+0x14c>
 8007d68:	f1b9 0f00 	cmp.w	r9, #0
 8007d6c:	d000      	beq.n	8007d70 <__gethex+0x118>
 8007d6e:	4252      	negs	r2, r2
 8007d70:	4415      	add	r5, r2
 8007d72:	f8cb 1000 	str.w	r1, [fp]
 8007d76:	b1e4      	cbz	r4, 8007db2 <__gethex+0x15a>
 8007d78:	9b00      	ldr	r3, [sp, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bf14      	ite	ne
 8007d7e:	2700      	movne	r7, #0
 8007d80:	2706      	moveq	r7, #6
 8007d82:	4638      	mov	r0, r7
 8007d84:	b009      	add	sp, #36	; 0x24
 8007d86:	ecbd 8b02 	vpop	{d8}
 8007d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8e:	463e      	mov	r6, r7
 8007d90:	4625      	mov	r5, r4
 8007d92:	2401      	movs	r4, #1
 8007d94:	e7ca      	b.n	8007d2c <__gethex+0xd4>
 8007d96:	f04f 0900 	mov.w	r9, #0
 8007d9a:	1cb1      	adds	r1, r6, #2
 8007d9c:	e7d3      	b.n	8007d46 <__gethex+0xee>
 8007d9e:	f04f 0901 	mov.w	r9, #1
 8007da2:	e7fa      	b.n	8007d9a <__gethex+0x142>
 8007da4:	230a      	movs	r3, #10
 8007da6:	fb03 0202 	mla	r2, r3, r2, r0
 8007daa:	3a10      	subs	r2, #16
 8007dac:	e7d4      	b.n	8007d58 <__gethex+0x100>
 8007dae:	4631      	mov	r1, r6
 8007db0:	e7df      	b.n	8007d72 <__gethex+0x11a>
 8007db2:	1bf3      	subs	r3, r6, r7
 8007db4:	3b01      	subs	r3, #1
 8007db6:	4621      	mov	r1, r4
 8007db8:	2b07      	cmp	r3, #7
 8007dba:	dc0b      	bgt.n	8007dd4 <__gethex+0x17c>
 8007dbc:	ee18 0a10 	vmov	r0, s16
 8007dc0:	f000 fa7e 	bl	80082c0 <_Balloc>
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	b940      	cbnz	r0, 8007dda <__gethex+0x182>
 8007dc8:	4b65      	ldr	r3, [pc, #404]	; (8007f60 <__gethex+0x308>)
 8007dca:	4602      	mov	r2, r0
 8007dcc:	21de      	movs	r1, #222	; 0xde
 8007dce:	4865      	ldr	r0, [pc, #404]	; (8007f64 <__gethex+0x30c>)
 8007dd0:	f001 f97e 	bl	80090d0 <__assert_func>
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	105b      	asrs	r3, r3, #1
 8007dd8:	e7ee      	b.n	8007db8 <__gethex+0x160>
 8007dda:	f100 0914 	add.w	r9, r0, #20
 8007dde:	f04f 0b00 	mov.w	fp, #0
 8007de2:	f1ca 0301 	rsb	r3, sl, #1
 8007de6:	f8cd 9008 	str.w	r9, [sp, #8]
 8007dea:	f8cd b000 	str.w	fp, [sp]
 8007dee:	9306      	str	r3, [sp, #24]
 8007df0:	42b7      	cmp	r7, r6
 8007df2:	d340      	bcc.n	8007e76 <__gethex+0x21e>
 8007df4:	9802      	ldr	r0, [sp, #8]
 8007df6:	9b00      	ldr	r3, [sp, #0]
 8007df8:	f840 3b04 	str.w	r3, [r0], #4
 8007dfc:	eba0 0009 	sub.w	r0, r0, r9
 8007e00:	1080      	asrs	r0, r0, #2
 8007e02:	0146      	lsls	r6, r0, #5
 8007e04:	6120      	str	r0, [r4, #16]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fb50 	bl	80084ac <__hi0bits>
 8007e0c:	1a30      	subs	r0, r6, r0
 8007e0e:	f8d8 6000 	ldr.w	r6, [r8]
 8007e12:	42b0      	cmp	r0, r6
 8007e14:	dd63      	ble.n	8007ede <__gethex+0x286>
 8007e16:	1b87      	subs	r7, r0, r6
 8007e18:	4639      	mov	r1, r7
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f000 feea 	bl	8008bf4 <__any_on>
 8007e20:	4682      	mov	sl, r0
 8007e22:	b1a8      	cbz	r0, 8007e50 <__gethex+0x1f8>
 8007e24:	1e7b      	subs	r3, r7, #1
 8007e26:	1159      	asrs	r1, r3, #5
 8007e28:	f003 021f 	and.w	r2, r3, #31
 8007e2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007e30:	f04f 0a01 	mov.w	sl, #1
 8007e34:	fa0a f202 	lsl.w	r2, sl, r2
 8007e38:	420a      	tst	r2, r1
 8007e3a:	d009      	beq.n	8007e50 <__gethex+0x1f8>
 8007e3c:	4553      	cmp	r3, sl
 8007e3e:	dd05      	ble.n	8007e4c <__gethex+0x1f4>
 8007e40:	1eb9      	subs	r1, r7, #2
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 fed6 	bl	8008bf4 <__any_on>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d145      	bne.n	8007ed8 <__gethex+0x280>
 8007e4c:	f04f 0a02 	mov.w	sl, #2
 8007e50:	4639      	mov	r1, r7
 8007e52:	4620      	mov	r0, r4
 8007e54:	f7ff fe98 	bl	8007b88 <rshift>
 8007e58:	443d      	add	r5, r7
 8007e5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e5e:	42ab      	cmp	r3, r5
 8007e60:	da4c      	bge.n	8007efc <__gethex+0x2a4>
 8007e62:	ee18 0a10 	vmov	r0, s16
 8007e66:	4621      	mov	r1, r4
 8007e68:	f000 fa6a 	bl	8008340 <_Bfree>
 8007e6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	27a3      	movs	r7, #163	; 0xa3
 8007e74:	e785      	b.n	8007d82 <__gethex+0x12a>
 8007e76:	1e73      	subs	r3, r6, #1
 8007e78:	9a05      	ldr	r2, [sp, #20]
 8007e7a:	9303      	str	r3, [sp, #12]
 8007e7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d019      	beq.n	8007eb8 <__gethex+0x260>
 8007e84:	f1bb 0f20 	cmp.w	fp, #32
 8007e88:	d107      	bne.n	8007e9a <__gethex+0x242>
 8007e8a:	9b02      	ldr	r3, [sp, #8]
 8007e8c:	9a00      	ldr	r2, [sp, #0]
 8007e8e:	f843 2b04 	str.w	r2, [r3], #4
 8007e92:	9302      	str	r3, [sp, #8]
 8007e94:	2300      	movs	r3, #0
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	469b      	mov	fp, r3
 8007e9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007e9e:	f7ff fec5 	bl	8007c2c <__hexdig_fun>
 8007ea2:	9b00      	ldr	r3, [sp, #0]
 8007ea4:	f000 000f 	and.w	r0, r0, #15
 8007ea8:	fa00 f00b 	lsl.w	r0, r0, fp
 8007eac:	4303      	orrs	r3, r0
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	f10b 0b04 	add.w	fp, fp, #4
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	e00d      	b.n	8007ed4 <__gethex+0x27c>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	9a06      	ldr	r2, [sp, #24]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	42bb      	cmp	r3, r7
 8007ec0:	d3e0      	bcc.n	8007e84 <__gethex+0x22c>
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	9901      	ldr	r1, [sp, #4]
 8007ec6:	9307      	str	r3, [sp, #28]
 8007ec8:	4652      	mov	r2, sl
 8007eca:	f001 f8e1 	bl	8009090 <strncmp>
 8007ece:	9b07      	ldr	r3, [sp, #28]
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d1d7      	bne.n	8007e84 <__gethex+0x22c>
 8007ed4:	461e      	mov	r6, r3
 8007ed6:	e78b      	b.n	8007df0 <__gethex+0x198>
 8007ed8:	f04f 0a03 	mov.w	sl, #3
 8007edc:	e7b8      	b.n	8007e50 <__gethex+0x1f8>
 8007ede:	da0a      	bge.n	8007ef6 <__gethex+0x29e>
 8007ee0:	1a37      	subs	r7, r6, r0
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	ee18 0a10 	vmov	r0, s16
 8007ee8:	463a      	mov	r2, r7
 8007eea:	f000 fc45 	bl	8008778 <__lshift>
 8007eee:	1bed      	subs	r5, r5, r7
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	f100 0914 	add.w	r9, r0, #20
 8007ef6:	f04f 0a00 	mov.w	sl, #0
 8007efa:	e7ae      	b.n	8007e5a <__gethex+0x202>
 8007efc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007f00:	42a8      	cmp	r0, r5
 8007f02:	dd72      	ble.n	8007fea <__gethex+0x392>
 8007f04:	1b45      	subs	r5, r0, r5
 8007f06:	42ae      	cmp	r6, r5
 8007f08:	dc36      	bgt.n	8007f78 <__gethex+0x320>
 8007f0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d02a      	beq.n	8007f68 <__gethex+0x310>
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d02c      	beq.n	8007f70 <__gethex+0x318>
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d115      	bne.n	8007f46 <__gethex+0x2ee>
 8007f1a:	42ae      	cmp	r6, r5
 8007f1c:	d113      	bne.n	8007f46 <__gethex+0x2ee>
 8007f1e:	2e01      	cmp	r6, #1
 8007f20:	d10b      	bne.n	8007f3a <__gethex+0x2e2>
 8007f22:	9a04      	ldr	r2, [sp, #16]
 8007f24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	6123      	str	r3, [r4, #16]
 8007f2e:	f8c9 3000 	str.w	r3, [r9]
 8007f32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f34:	2762      	movs	r7, #98	; 0x62
 8007f36:	601c      	str	r4, [r3, #0]
 8007f38:	e723      	b.n	8007d82 <__gethex+0x12a>
 8007f3a:	1e71      	subs	r1, r6, #1
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 fe59 	bl	8008bf4 <__any_on>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d1ed      	bne.n	8007f22 <__gethex+0x2ca>
 8007f46:	ee18 0a10 	vmov	r0, s16
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	f000 f9f8 	bl	8008340 <_Bfree>
 8007f50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f52:	2300      	movs	r3, #0
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	2750      	movs	r7, #80	; 0x50
 8007f58:	e713      	b.n	8007d82 <__gethex+0x12a>
 8007f5a:	bf00      	nop
 8007f5c:	08009f30 	.word	0x08009f30
 8007f60:	08009eb4 	.word	0x08009eb4
 8007f64:	08009ec5 	.word	0x08009ec5
 8007f68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1eb      	bne.n	8007f46 <__gethex+0x2ee>
 8007f6e:	e7d8      	b.n	8007f22 <__gethex+0x2ca>
 8007f70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1d5      	bne.n	8007f22 <__gethex+0x2ca>
 8007f76:	e7e6      	b.n	8007f46 <__gethex+0x2ee>
 8007f78:	1e6f      	subs	r7, r5, #1
 8007f7a:	f1ba 0f00 	cmp.w	sl, #0
 8007f7e:	d131      	bne.n	8007fe4 <__gethex+0x38c>
 8007f80:	b127      	cbz	r7, 8007f8c <__gethex+0x334>
 8007f82:	4639      	mov	r1, r7
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 fe35 	bl	8008bf4 <__any_on>
 8007f8a:	4682      	mov	sl, r0
 8007f8c:	117b      	asrs	r3, r7, #5
 8007f8e:	2101      	movs	r1, #1
 8007f90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007f94:	f007 071f 	and.w	r7, r7, #31
 8007f98:	fa01 f707 	lsl.w	r7, r1, r7
 8007f9c:	421f      	tst	r7, r3
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	bf18      	it	ne
 8007fa4:	f04a 0a02 	orrne.w	sl, sl, #2
 8007fa8:	1b76      	subs	r6, r6, r5
 8007faa:	f7ff fded 	bl	8007b88 <rshift>
 8007fae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007fb2:	2702      	movs	r7, #2
 8007fb4:	f1ba 0f00 	cmp.w	sl, #0
 8007fb8:	d048      	beq.n	800804c <__gethex+0x3f4>
 8007fba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d015      	beq.n	8007fee <__gethex+0x396>
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d017      	beq.n	8007ff6 <__gethex+0x39e>
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d109      	bne.n	8007fde <__gethex+0x386>
 8007fca:	f01a 0f02 	tst.w	sl, #2
 8007fce:	d006      	beq.n	8007fde <__gethex+0x386>
 8007fd0:	f8d9 0000 	ldr.w	r0, [r9]
 8007fd4:	ea4a 0a00 	orr.w	sl, sl, r0
 8007fd8:	f01a 0f01 	tst.w	sl, #1
 8007fdc:	d10e      	bne.n	8007ffc <__gethex+0x3a4>
 8007fde:	f047 0710 	orr.w	r7, r7, #16
 8007fe2:	e033      	b.n	800804c <__gethex+0x3f4>
 8007fe4:	f04f 0a01 	mov.w	sl, #1
 8007fe8:	e7d0      	b.n	8007f8c <__gethex+0x334>
 8007fea:	2701      	movs	r7, #1
 8007fec:	e7e2      	b.n	8007fb4 <__gethex+0x35c>
 8007fee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ff0:	f1c3 0301 	rsb	r3, r3, #1
 8007ff4:	9315      	str	r3, [sp, #84]	; 0x54
 8007ff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0f0      	beq.n	8007fde <__gethex+0x386>
 8007ffc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008000:	f104 0314 	add.w	r3, r4, #20
 8008004:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008008:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800800c:	f04f 0c00 	mov.w	ip, #0
 8008010:	4618      	mov	r0, r3
 8008012:	f853 2b04 	ldr.w	r2, [r3], #4
 8008016:	f1b2 3fff 	cmp.w	r2, #4294967295
 800801a:	d01c      	beq.n	8008056 <__gethex+0x3fe>
 800801c:	3201      	adds	r2, #1
 800801e:	6002      	str	r2, [r0, #0]
 8008020:	2f02      	cmp	r7, #2
 8008022:	f104 0314 	add.w	r3, r4, #20
 8008026:	d13f      	bne.n	80080a8 <__gethex+0x450>
 8008028:	f8d8 2000 	ldr.w	r2, [r8]
 800802c:	3a01      	subs	r2, #1
 800802e:	42b2      	cmp	r2, r6
 8008030:	d10a      	bne.n	8008048 <__gethex+0x3f0>
 8008032:	1171      	asrs	r1, r6, #5
 8008034:	2201      	movs	r2, #1
 8008036:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800803a:	f006 061f 	and.w	r6, r6, #31
 800803e:	fa02 f606 	lsl.w	r6, r2, r6
 8008042:	421e      	tst	r6, r3
 8008044:	bf18      	it	ne
 8008046:	4617      	movne	r7, r2
 8008048:	f047 0720 	orr.w	r7, r7, #32
 800804c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800804e:	601c      	str	r4, [r3, #0]
 8008050:	9b04      	ldr	r3, [sp, #16]
 8008052:	601d      	str	r5, [r3, #0]
 8008054:	e695      	b.n	8007d82 <__gethex+0x12a>
 8008056:	4299      	cmp	r1, r3
 8008058:	f843 cc04 	str.w	ip, [r3, #-4]
 800805c:	d8d8      	bhi.n	8008010 <__gethex+0x3b8>
 800805e:	68a3      	ldr	r3, [r4, #8]
 8008060:	459b      	cmp	fp, r3
 8008062:	db19      	blt.n	8008098 <__gethex+0x440>
 8008064:	6861      	ldr	r1, [r4, #4]
 8008066:	ee18 0a10 	vmov	r0, s16
 800806a:	3101      	adds	r1, #1
 800806c:	f000 f928 	bl	80082c0 <_Balloc>
 8008070:	4681      	mov	r9, r0
 8008072:	b918      	cbnz	r0, 800807c <__gethex+0x424>
 8008074:	4b1a      	ldr	r3, [pc, #104]	; (80080e0 <__gethex+0x488>)
 8008076:	4602      	mov	r2, r0
 8008078:	2184      	movs	r1, #132	; 0x84
 800807a:	e6a8      	b.n	8007dce <__gethex+0x176>
 800807c:	6922      	ldr	r2, [r4, #16]
 800807e:	3202      	adds	r2, #2
 8008080:	f104 010c 	add.w	r1, r4, #12
 8008084:	0092      	lsls	r2, r2, #2
 8008086:	300c      	adds	r0, #12
 8008088:	f000 f90c 	bl	80082a4 <memcpy>
 800808c:	4621      	mov	r1, r4
 800808e:	ee18 0a10 	vmov	r0, s16
 8008092:	f000 f955 	bl	8008340 <_Bfree>
 8008096:	464c      	mov	r4, r9
 8008098:	6923      	ldr	r3, [r4, #16]
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080a0:	6122      	str	r2, [r4, #16]
 80080a2:	2201      	movs	r2, #1
 80080a4:	615a      	str	r2, [r3, #20]
 80080a6:	e7bb      	b.n	8008020 <__gethex+0x3c8>
 80080a8:	6922      	ldr	r2, [r4, #16]
 80080aa:	455a      	cmp	r2, fp
 80080ac:	dd0b      	ble.n	80080c6 <__gethex+0x46e>
 80080ae:	2101      	movs	r1, #1
 80080b0:	4620      	mov	r0, r4
 80080b2:	f7ff fd69 	bl	8007b88 <rshift>
 80080b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080ba:	3501      	adds	r5, #1
 80080bc:	42ab      	cmp	r3, r5
 80080be:	f6ff aed0 	blt.w	8007e62 <__gethex+0x20a>
 80080c2:	2701      	movs	r7, #1
 80080c4:	e7c0      	b.n	8008048 <__gethex+0x3f0>
 80080c6:	f016 061f 	ands.w	r6, r6, #31
 80080ca:	d0fa      	beq.n	80080c2 <__gethex+0x46a>
 80080cc:	449a      	add	sl, r3
 80080ce:	f1c6 0620 	rsb	r6, r6, #32
 80080d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80080d6:	f000 f9e9 	bl	80084ac <__hi0bits>
 80080da:	42b0      	cmp	r0, r6
 80080dc:	dbe7      	blt.n	80080ae <__gethex+0x456>
 80080de:	e7f0      	b.n	80080c2 <__gethex+0x46a>
 80080e0:	08009eb4 	.word	0x08009eb4

080080e4 <L_shift>:
 80080e4:	f1c2 0208 	rsb	r2, r2, #8
 80080e8:	0092      	lsls	r2, r2, #2
 80080ea:	b570      	push	{r4, r5, r6, lr}
 80080ec:	f1c2 0620 	rsb	r6, r2, #32
 80080f0:	6843      	ldr	r3, [r0, #4]
 80080f2:	6804      	ldr	r4, [r0, #0]
 80080f4:	fa03 f506 	lsl.w	r5, r3, r6
 80080f8:	432c      	orrs	r4, r5
 80080fa:	40d3      	lsrs	r3, r2
 80080fc:	6004      	str	r4, [r0, #0]
 80080fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8008102:	4288      	cmp	r0, r1
 8008104:	d3f4      	bcc.n	80080f0 <L_shift+0xc>
 8008106:	bd70      	pop	{r4, r5, r6, pc}

08008108 <__match>:
 8008108:	b530      	push	{r4, r5, lr}
 800810a:	6803      	ldr	r3, [r0, #0]
 800810c:	3301      	adds	r3, #1
 800810e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008112:	b914      	cbnz	r4, 800811a <__match+0x12>
 8008114:	6003      	str	r3, [r0, #0]
 8008116:	2001      	movs	r0, #1
 8008118:	bd30      	pop	{r4, r5, pc}
 800811a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800811e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008122:	2d19      	cmp	r5, #25
 8008124:	bf98      	it	ls
 8008126:	3220      	addls	r2, #32
 8008128:	42a2      	cmp	r2, r4
 800812a:	d0f0      	beq.n	800810e <__match+0x6>
 800812c:	2000      	movs	r0, #0
 800812e:	e7f3      	b.n	8008118 <__match+0x10>

08008130 <__hexnan>:
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	680b      	ldr	r3, [r1, #0]
 8008136:	6801      	ldr	r1, [r0, #0]
 8008138:	115e      	asrs	r6, r3, #5
 800813a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800813e:	f013 031f 	ands.w	r3, r3, #31
 8008142:	b087      	sub	sp, #28
 8008144:	bf18      	it	ne
 8008146:	3604      	addne	r6, #4
 8008148:	2500      	movs	r5, #0
 800814a:	1f37      	subs	r7, r6, #4
 800814c:	4682      	mov	sl, r0
 800814e:	4690      	mov	r8, r2
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	f846 5c04 	str.w	r5, [r6, #-4]
 8008156:	46b9      	mov	r9, r7
 8008158:	463c      	mov	r4, r7
 800815a:	9502      	str	r5, [sp, #8]
 800815c:	46ab      	mov	fp, r5
 800815e:	784a      	ldrb	r2, [r1, #1]
 8008160:	1c4b      	adds	r3, r1, #1
 8008162:	9303      	str	r3, [sp, #12]
 8008164:	b342      	cbz	r2, 80081b8 <__hexnan+0x88>
 8008166:	4610      	mov	r0, r2
 8008168:	9105      	str	r1, [sp, #20]
 800816a:	9204      	str	r2, [sp, #16]
 800816c:	f7ff fd5e 	bl	8007c2c <__hexdig_fun>
 8008170:	2800      	cmp	r0, #0
 8008172:	d14f      	bne.n	8008214 <__hexnan+0xe4>
 8008174:	9a04      	ldr	r2, [sp, #16]
 8008176:	9905      	ldr	r1, [sp, #20]
 8008178:	2a20      	cmp	r2, #32
 800817a:	d818      	bhi.n	80081ae <__hexnan+0x7e>
 800817c:	9b02      	ldr	r3, [sp, #8]
 800817e:	459b      	cmp	fp, r3
 8008180:	dd13      	ble.n	80081aa <__hexnan+0x7a>
 8008182:	454c      	cmp	r4, r9
 8008184:	d206      	bcs.n	8008194 <__hexnan+0x64>
 8008186:	2d07      	cmp	r5, #7
 8008188:	dc04      	bgt.n	8008194 <__hexnan+0x64>
 800818a:	462a      	mov	r2, r5
 800818c:	4649      	mov	r1, r9
 800818e:	4620      	mov	r0, r4
 8008190:	f7ff ffa8 	bl	80080e4 <L_shift>
 8008194:	4544      	cmp	r4, r8
 8008196:	d950      	bls.n	800823a <__hexnan+0x10a>
 8008198:	2300      	movs	r3, #0
 800819a:	f1a4 0904 	sub.w	r9, r4, #4
 800819e:	f844 3c04 	str.w	r3, [r4, #-4]
 80081a2:	f8cd b008 	str.w	fp, [sp, #8]
 80081a6:	464c      	mov	r4, r9
 80081a8:	461d      	mov	r5, r3
 80081aa:	9903      	ldr	r1, [sp, #12]
 80081ac:	e7d7      	b.n	800815e <__hexnan+0x2e>
 80081ae:	2a29      	cmp	r2, #41	; 0x29
 80081b0:	d156      	bne.n	8008260 <__hexnan+0x130>
 80081b2:	3102      	adds	r1, #2
 80081b4:	f8ca 1000 	str.w	r1, [sl]
 80081b8:	f1bb 0f00 	cmp.w	fp, #0
 80081bc:	d050      	beq.n	8008260 <__hexnan+0x130>
 80081be:	454c      	cmp	r4, r9
 80081c0:	d206      	bcs.n	80081d0 <__hexnan+0xa0>
 80081c2:	2d07      	cmp	r5, #7
 80081c4:	dc04      	bgt.n	80081d0 <__hexnan+0xa0>
 80081c6:	462a      	mov	r2, r5
 80081c8:	4649      	mov	r1, r9
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7ff ff8a 	bl	80080e4 <L_shift>
 80081d0:	4544      	cmp	r4, r8
 80081d2:	d934      	bls.n	800823e <__hexnan+0x10e>
 80081d4:	f1a8 0204 	sub.w	r2, r8, #4
 80081d8:	4623      	mov	r3, r4
 80081da:	f853 1b04 	ldr.w	r1, [r3], #4
 80081de:	f842 1f04 	str.w	r1, [r2, #4]!
 80081e2:	429f      	cmp	r7, r3
 80081e4:	d2f9      	bcs.n	80081da <__hexnan+0xaa>
 80081e6:	1b3b      	subs	r3, r7, r4
 80081e8:	f023 0303 	bic.w	r3, r3, #3
 80081ec:	3304      	adds	r3, #4
 80081ee:	3401      	adds	r4, #1
 80081f0:	3e03      	subs	r6, #3
 80081f2:	42b4      	cmp	r4, r6
 80081f4:	bf88      	it	hi
 80081f6:	2304      	movhi	r3, #4
 80081f8:	4443      	add	r3, r8
 80081fa:	2200      	movs	r2, #0
 80081fc:	f843 2b04 	str.w	r2, [r3], #4
 8008200:	429f      	cmp	r7, r3
 8008202:	d2fb      	bcs.n	80081fc <__hexnan+0xcc>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	b91b      	cbnz	r3, 8008210 <__hexnan+0xe0>
 8008208:	4547      	cmp	r7, r8
 800820a:	d127      	bne.n	800825c <__hexnan+0x12c>
 800820c:	2301      	movs	r3, #1
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	2005      	movs	r0, #5
 8008212:	e026      	b.n	8008262 <__hexnan+0x132>
 8008214:	3501      	adds	r5, #1
 8008216:	2d08      	cmp	r5, #8
 8008218:	f10b 0b01 	add.w	fp, fp, #1
 800821c:	dd06      	ble.n	800822c <__hexnan+0xfc>
 800821e:	4544      	cmp	r4, r8
 8008220:	d9c3      	bls.n	80081aa <__hexnan+0x7a>
 8008222:	2300      	movs	r3, #0
 8008224:	f844 3c04 	str.w	r3, [r4, #-4]
 8008228:	2501      	movs	r5, #1
 800822a:	3c04      	subs	r4, #4
 800822c:	6822      	ldr	r2, [r4, #0]
 800822e:	f000 000f 	and.w	r0, r0, #15
 8008232:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008236:	6022      	str	r2, [r4, #0]
 8008238:	e7b7      	b.n	80081aa <__hexnan+0x7a>
 800823a:	2508      	movs	r5, #8
 800823c:	e7b5      	b.n	80081aa <__hexnan+0x7a>
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0df      	beq.n	8008204 <__hexnan+0xd4>
 8008244:	f04f 32ff 	mov.w	r2, #4294967295
 8008248:	f1c3 0320 	rsb	r3, r3, #32
 800824c:	fa22 f303 	lsr.w	r3, r2, r3
 8008250:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008254:	401a      	ands	r2, r3
 8008256:	f846 2c04 	str.w	r2, [r6, #-4]
 800825a:	e7d3      	b.n	8008204 <__hexnan+0xd4>
 800825c:	3f04      	subs	r7, #4
 800825e:	e7d1      	b.n	8008204 <__hexnan+0xd4>
 8008260:	2004      	movs	r0, #4
 8008262:	b007      	add	sp, #28
 8008264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008268 <_localeconv_r>:
 8008268:	4800      	ldr	r0, [pc, #0]	; (800826c <_localeconv_r+0x4>)
 800826a:	4770      	bx	lr
 800826c:	20000168 	.word	0x20000168

08008270 <malloc>:
 8008270:	4b02      	ldr	r3, [pc, #8]	; (800827c <malloc+0xc>)
 8008272:	4601      	mov	r1, r0
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	f000 bd3d 	b.w	8008cf4 <_malloc_r>
 800827a:	bf00      	nop
 800827c:	20000010 	.word	0x20000010

08008280 <__ascii_mbtowc>:
 8008280:	b082      	sub	sp, #8
 8008282:	b901      	cbnz	r1, 8008286 <__ascii_mbtowc+0x6>
 8008284:	a901      	add	r1, sp, #4
 8008286:	b142      	cbz	r2, 800829a <__ascii_mbtowc+0x1a>
 8008288:	b14b      	cbz	r3, 800829e <__ascii_mbtowc+0x1e>
 800828a:	7813      	ldrb	r3, [r2, #0]
 800828c:	600b      	str	r3, [r1, #0]
 800828e:	7812      	ldrb	r2, [r2, #0]
 8008290:	1e10      	subs	r0, r2, #0
 8008292:	bf18      	it	ne
 8008294:	2001      	movne	r0, #1
 8008296:	b002      	add	sp, #8
 8008298:	4770      	bx	lr
 800829a:	4610      	mov	r0, r2
 800829c:	e7fb      	b.n	8008296 <__ascii_mbtowc+0x16>
 800829e:	f06f 0001 	mvn.w	r0, #1
 80082a2:	e7f8      	b.n	8008296 <__ascii_mbtowc+0x16>

080082a4 <memcpy>:
 80082a4:	440a      	add	r2, r1
 80082a6:	4291      	cmp	r1, r2
 80082a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ac:	d100      	bne.n	80082b0 <memcpy+0xc>
 80082ae:	4770      	bx	lr
 80082b0:	b510      	push	{r4, lr}
 80082b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ba:	4291      	cmp	r1, r2
 80082bc:	d1f9      	bne.n	80082b2 <memcpy+0xe>
 80082be:	bd10      	pop	{r4, pc}

080082c0 <_Balloc>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082c4:	4604      	mov	r4, r0
 80082c6:	460d      	mov	r5, r1
 80082c8:	b976      	cbnz	r6, 80082e8 <_Balloc+0x28>
 80082ca:	2010      	movs	r0, #16
 80082cc:	f7ff ffd0 	bl	8008270 <malloc>
 80082d0:	4602      	mov	r2, r0
 80082d2:	6260      	str	r0, [r4, #36]	; 0x24
 80082d4:	b920      	cbnz	r0, 80082e0 <_Balloc+0x20>
 80082d6:	4b18      	ldr	r3, [pc, #96]	; (8008338 <_Balloc+0x78>)
 80082d8:	4818      	ldr	r0, [pc, #96]	; (800833c <_Balloc+0x7c>)
 80082da:	2166      	movs	r1, #102	; 0x66
 80082dc:	f000 fef8 	bl	80090d0 <__assert_func>
 80082e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082e4:	6006      	str	r6, [r0, #0]
 80082e6:	60c6      	str	r6, [r0, #12]
 80082e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082ea:	68f3      	ldr	r3, [r6, #12]
 80082ec:	b183      	cbz	r3, 8008310 <_Balloc+0x50>
 80082ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082f6:	b9b8      	cbnz	r0, 8008328 <_Balloc+0x68>
 80082f8:	2101      	movs	r1, #1
 80082fa:	fa01 f605 	lsl.w	r6, r1, r5
 80082fe:	1d72      	adds	r2, r6, #5
 8008300:	0092      	lsls	r2, r2, #2
 8008302:	4620      	mov	r0, r4
 8008304:	f000 fc97 	bl	8008c36 <_calloc_r>
 8008308:	b160      	cbz	r0, 8008324 <_Balloc+0x64>
 800830a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800830e:	e00e      	b.n	800832e <_Balloc+0x6e>
 8008310:	2221      	movs	r2, #33	; 0x21
 8008312:	2104      	movs	r1, #4
 8008314:	4620      	mov	r0, r4
 8008316:	f000 fc8e 	bl	8008c36 <_calloc_r>
 800831a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800831c:	60f0      	str	r0, [r6, #12]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e4      	bne.n	80082ee <_Balloc+0x2e>
 8008324:	2000      	movs	r0, #0
 8008326:	bd70      	pop	{r4, r5, r6, pc}
 8008328:	6802      	ldr	r2, [r0, #0]
 800832a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800832e:	2300      	movs	r3, #0
 8008330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008334:	e7f7      	b.n	8008326 <_Balloc+0x66>
 8008336:	bf00      	nop
 8008338:	08009e3e 	.word	0x08009e3e
 800833c:	08009f44 	.word	0x08009f44

08008340 <_Bfree>:
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008344:	4605      	mov	r5, r0
 8008346:	460c      	mov	r4, r1
 8008348:	b976      	cbnz	r6, 8008368 <_Bfree+0x28>
 800834a:	2010      	movs	r0, #16
 800834c:	f7ff ff90 	bl	8008270 <malloc>
 8008350:	4602      	mov	r2, r0
 8008352:	6268      	str	r0, [r5, #36]	; 0x24
 8008354:	b920      	cbnz	r0, 8008360 <_Bfree+0x20>
 8008356:	4b09      	ldr	r3, [pc, #36]	; (800837c <_Bfree+0x3c>)
 8008358:	4809      	ldr	r0, [pc, #36]	; (8008380 <_Bfree+0x40>)
 800835a:	218a      	movs	r1, #138	; 0x8a
 800835c:	f000 feb8 	bl	80090d0 <__assert_func>
 8008360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008364:	6006      	str	r6, [r0, #0]
 8008366:	60c6      	str	r6, [r0, #12]
 8008368:	b13c      	cbz	r4, 800837a <_Bfree+0x3a>
 800836a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800836c:	6862      	ldr	r2, [r4, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008374:	6021      	str	r1, [r4, #0]
 8008376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	08009e3e 	.word	0x08009e3e
 8008380:	08009f44 	.word	0x08009f44

08008384 <__multadd>:
 8008384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008388:	690e      	ldr	r6, [r1, #16]
 800838a:	4607      	mov	r7, r0
 800838c:	4698      	mov	r8, r3
 800838e:	460c      	mov	r4, r1
 8008390:	f101 0014 	add.w	r0, r1, #20
 8008394:	2300      	movs	r3, #0
 8008396:	6805      	ldr	r5, [r0, #0]
 8008398:	b2a9      	uxth	r1, r5
 800839a:	fb02 8101 	mla	r1, r2, r1, r8
 800839e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80083a2:	0c2d      	lsrs	r5, r5, #16
 80083a4:	fb02 c505 	mla	r5, r2, r5, ip
 80083a8:	b289      	uxth	r1, r1
 80083aa:	3301      	adds	r3, #1
 80083ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80083b0:	429e      	cmp	r6, r3
 80083b2:	f840 1b04 	str.w	r1, [r0], #4
 80083b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80083ba:	dcec      	bgt.n	8008396 <__multadd+0x12>
 80083bc:	f1b8 0f00 	cmp.w	r8, #0
 80083c0:	d022      	beq.n	8008408 <__multadd+0x84>
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	42b3      	cmp	r3, r6
 80083c6:	dc19      	bgt.n	80083fc <__multadd+0x78>
 80083c8:	6861      	ldr	r1, [r4, #4]
 80083ca:	4638      	mov	r0, r7
 80083cc:	3101      	adds	r1, #1
 80083ce:	f7ff ff77 	bl	80082c0 <_Balloc>
 80083d2:	4605      	mov	r5, r0
 80083d4:	b928      	cbnz	r0, 80083e2 <__multadd+0x5e>
 80083d6:	4602      	mov	r2, r0
 80083d8:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <__multadd+0x8c>)
 80083da:	480e      	ldr	r0, [pc, #56]	; (8008414 <__multadd+0x90>)
 80083dc:	21b5      	movs	r1, #181	; 0xb5
 80083de:	f000 fe77 	bl	80090d0 <__assert_func>
 80083e2:	6922      	ldr	r2, [r4, #16]
 80083e4:	3202      	adds	r2, #2
 80083e6:	f104 010c 	add.w	r1, r4, #12
 80083ea:	0092      	lsls	r2, r2, #2
 80083ec:	300c      	adds	r0, #12
 80083ee:	f7ff ff59 	bl	80082a4 <memcpy>
 80083f2:	4621      	mov	r1, r4
 80083f4:	4638      	mov	r0, r7
 80083f6:	f7ff ffa3 	bl	8008340 <_Bfree>
 80083fa:	462c      	mov	r4, r5
 80083fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008400:	3601      	adds	r6, #1
 8008402:	f8c3 8014 	str.w	r8, [r3, #20]
 8008406:	6126      	str	r6, [r4, #16]
 8008408:	4620      	mov	r0, r4
 800840a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800840e:	bf00      	nop
 8008410:	08009eb4 	.word	0x08009eb4
 8008414:	08009f44 	.word	0x08009f44

08008418 <__s2b>:
 8008418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800841c:	460c      	mov	r4, r1
 800841e:	4615      	mov	r5, r2
 8008420:	461f      	mov	r7, r3
 8008422:	2209      	movs	r2, #9
 8008424:	3308      	adds	r3, #8
 8008426:	4606      	mov	r6, r0
 8008428:	fb93 f3f2 	sdiv	r3, r3, r2
 800842c:	2100      	movs	r1, #0
 800842e:	2201      	movs	r2, #1
 8008430:	429a      	cmp	r2, r3
 8008432:	db09      	blt.n	8008448 <__s2b+0x30>
 8008434:	4630      	mov	r0, r6
 8008436:	f7ff ff43 	bl	80082c0 <_Balloc>
 800843a:	b940      	cbnz	r0, 800844e <__s2b+0x36>
 800843c:	4602      	mov	r2, r0
 800843e:	4b19      	ldr	r3, [pc, #100]	; (80084a4 <__s2b+0x8c>)
 8008440:	4819      	ldr	r0, [pc, #100]	; (80084a8 <__s2b+0x90>)
 8008442:	21ce      	movs	r1, #206	; 0xce
 8008444:	f000 fe44 	bl	80090d0 <__assert_func>
 8008448:	0052      	lsls	r2, r2, #1
 800844a:	3101      	adds	r1, #1
 800844c:	e7f0      	b.n	8008430 <__s2b+0x18>
 800844e:	9b08      	ldr	r3, [sp, #32]
 8008450:	6143      	str	r3, [r0, #20]
 8008452:	2d09      	cmp	r5, #9
 8008454:	f04f 0301 	mov.w	r3, #1
 8008458:	6103      	str	r3, [r0, #16]
 800845a:	dd16      	ble.n	800848a <__s2b+0x72>
 800845c:	f104 0909 	add.w	r9, r4, #9
 8008460:	46c8      	mov	r8, r9
 8008462:	442c      	add	r4, r5
 8008464:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008468:	4601      	mov	r1, r0
 800846a:	3b30      	subs	r3, #48	; 0x30
 800846c:	220a      	movs	r2, #10
 800846e:	4630      	mov	r0, r6
 8008470:	f7ff ff88 	bl	8008384 <__multadd>
 8008474:	45a0      	cmp	r8, r4
 8008476:	d1f5      	bne.n	8008464 <__s2b+0x4c>
 8008478:	f1a5 0408 	sub.w	r4, r5, #8
 800847c:	444c      	add	r4, r9
 800847e:	1b2d      	subs	r5, r5, r4
 8008480:	1963      	adds	r3, r4, r5
 8008482:	42bb      	cmp	r3, r7
 8008484:	db04      	blt.n	8008490 <__s2b+0x78>
 8008486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800848a:	340a      	adds	r4, #10
 800848c:	2509      	movs	r5, #9
 800848e:	e7f6      	b.n	800847e <__s2b+0x66>
 8008490:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008494:	4601      	mov	r1, r0
 8008496:	3b30      	subs	r3, #48	; 0x30
 8008498:	220a      	movs	r2, #10
 800849a:	4630      	mov	r0, r6
 800849c:	f7ff ff72 	bl	8008384 <__multadd>
 80084a0:	e7ee      	b.n	8008480 <__s2b+0x68>
 80084a2:	bf00      	nop
 80084a4:	08009eb4 	.word	0x08009eb4
 80084a8:	08009f44 	.word	0x08009f44

080084ac <__hi0bits>:
 80084ac:	0c03      	lsrs	r3, r0, #16
 80084ae:	041b      	lsls	r3, r3, #16
 80084b0:	b9d3      	cbnz	r3, 80084e8 <__hi0bits+0x3c>
 80084b2:	0400      	lsls	r0, r0, #16
 80084b4:	2310      	movs	r3, #16
 80084b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084ba:	bf04      	itt	eq
 80084bc:	0200      	lsleq	r0, r0, #8
 80084be:	3308      	addeq	r3, #8
 80084c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084c4:	bf04      	itt	eq
 80084c6:	0100      	lsleq	r0, r0, #4
 80084c8:	3304      	addeq	r3, #4
 80084ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084ce:	bf04      	itt	eq
 80084d0:	0080      	lsleq	r0, r0, #2
 80084d2:	3302      	addeq	r3, #2
 80084d4:	2800      	cmp	r0, #0
 80084d6:	db05      	blt.n	80084e4 <__hi0bits+0x38>
 80084d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084dc:	f103 0301 	add.w	r3, r3, #1
 80084e0:	bf08      	it	eq
 80084e2:	2320      	moveq	r3, #32
 80084e4:	4618      	mov	r0, r3
 80084e6:	4770      	bx	lr
 80084e8:	2300      	movs	r3, #0
 80084ea:	e7e4      	b.n	80084b6 <__hi0bits+0xa>

080084ec <__lo0bits>:
 80084ec:	6803      	ldr	r3, [r0, #0]
 80084ee:	f013 0207 	ands.w	r2, r3, #7
 80084f2:	4601      	mov	r1, r0
 80084f4:	d00b      	beq.n	800850e <__lo0bits+0x22>
 80084f6:	07da      	lsls	r2, r3, #31
 80084f8:	d424      	bmi.n	8008544 <__lo0bits+0x58>
 80084fa:	0798      	lsls	r0, r3, #30
 80084fc:	bf49      	itett	mi
 80084fe:	085b      	lsrmi	r3, r3, #1
 8008500:	089b      	lsrpl	r3, r3, #2
 8008502:	2001      	movmi	r0, #1
 8008504:	600b      	strmi	r3, [r1, #0]
 8008506:	bf5c      	itt	pl
 8008508:	600b      	strpl	r3, [r1, #0]
 800850a:	2002      	movpl	r0, #2
 800850c:	4770      	bx	lr
 800850e:	b298      	uxth	r0, r3
 8008510:	b9b0      	cbnz	r0, 8008540 <__lo0bits+0x54>
 8008512:	0c1b      	lsrs	r3, r3, #16
 8008514:	2010      	movs	r0, #16
 8008516:	f013 0fff 	tst.w	r3, #255	; 0xff
 800851a:	bf04      	itt	eq
 800851c:	0a1b      	lsreq	r3, r3, #8
 800851e:	3008      	addeq	r0, #8
 8008520:	071a      	lsls	r2, r3, #28
 8008522:	bf04      	itt	eq
 8008524:	091b      	lsreq	r3, r3, #4
 8008526:	3004      	addeq	r0, #4
 8008528:	079a      	lsls	r2, r3, #30
 800852a:	bf04      	itt	eq
 800852c:	089b      	lsreq	r3, r3, #2
 800852e:	3002      	addeq	r0, #2
 8008530:	07da      	lsls	r2, r3, #31
 8008532:	d403      	bmi.n	800853c <__lo0bits+0x50>
 8008534:	085b      	lsrs	r3, r3, #1
 8008536:	f100 0001 	add.w	r0, r0, #1
 800853a:	d005      	beq.n	8008548 <__lo0bits+0x5c>
 800853c:	600b      	str	r3, [r1, #0]
 800853e:	4770      	bx	lr
 8008540:	4610      	mov	r0, r2
 8008542:	e7e8      	b.n	8008516 <__lo0bits+0x2a>
 8008544:	2000      	movs	r0, #0
 8008546:	4770      	bx	lr
 8008548:	2020      	movs	r0, #32
 800854a:	4770      	bx	lr

0800854c <__i2b>:
 800854c:	b510      	push	{r4, lr}
 800854e:	460c      	mov	r4, r1
 8008550:	2101      	movs	r1, #1
 8008552:	f7ff feb5 	bl	80082c0 <_Balloc>
 8008556:	4602      	mov	r2, r0
 8008558:	b928      	cbnz	r0, 8008566 <__i2b+0x1a>
 800855a:	4b05      	ldr	r3, [pc, #20]	; (8008570 <__i2b+0x24>)
 800855c:	4805      	ldr	r0, [pc, #20]	; (8008574 <__i2b+0x28>)
 800855e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008562:	f000 fdb5 	bl	80090d0 <__assert_func>
 8008566:	2301      	movs	r3, #1
 8008568:	6144      	str	r4, [r0, #20]
 800856a:	6103      	str	r3, [r0, #16]
 800856c:	bd10      	pop	{r4, pc}
 800856e:	bf00      	nop
 8008570:	08009eb4 	.word	0x08009eb4
 8008574:	08009f44 	.word	0x08009f44

08008578 <__multiply>:
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	4614      	mov	r4, r2
 800857e:	690a      	ldr	r2, [r1, #16]
 8008580:	6923      	ldr	r3, [r4, #16]
 8008582:	429a      	cmp	r2, r3
 8008584:	bfb8      	it	lt
 8008586:	460b      	movlt	r3, r1
 8008588:	460d      	mov	r5, r1
 800858a:	bfbc      	itt	lt
 800858c:	4625      	movlt	r5, r4
 800858e:	461c      	movlt	r4, r3
 8008590:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008594:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008598:	68ab      	ldr	r3, [r5, #8]
 800859a:	6869      	ldr	r1, [r5, #4]
 800859c:	eb0a 0709 	add.w	r7, sl, r9
 80085a0:	42bb      	cmp	r3, r7
 80085a2:	b085      	sub	sp, #20
 80085a4:	bfb8      	it	lt
 80085a6:	3101      	addlt	r1, #1
 80085a8:	f7ff fe8a 	bl	80082c0 <_Balloc>
 80085ac:	b930      	cbnz	r0, 80085bc <__multiply+0x44>
 80085ae:	4602      	mov	r2, r0
 80085b0:	4b42      	ldr	r3, [pc, #264]	; (80086bc <__multiply+0x144>)
 80085b2:	4843      	ldr	r0, [pc, #268]	; (80086c0 <__multiply+0x148>)
 80085b4:	f240 115d 	movw	r1, #349	; 0x15d
 80085b8:	f000 fd8a 	bl	80090d0 <__assert_func>
 80085bc:	f100 0614 	add.w	r6, r0, #20
 80085c0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80085c4:	4633      	mov	r3, r6
 80085c6:	2200      	movs	r2, #0
 80085c8:	4543      	cmp	r3, r8
 80085ca:	d31e      	bcc.n	800860a <__multiply+0x92>
 80085cc:	f105 0c14 	add.w	ip, r5, #20
 80085d0:	f104 0314 	add.w	r3, r4, #20
 80085d4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80085d8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80085dc:	9202      	str	r2, [sp, #8]
 80085de:	ebac 0205 	sub.w	r2, ip, r5
 80085e2:	3a15      	subs	r2, #21
 80085e4:	f022 0203 	bic.w	r2, r2, #3
 80085e8:	3204      	adds	r2, #4
 80085ea:	f105 0115 	add.w	r1, r5, #21
 80085ee:	458c      	cmp	ip, r1
 80085f0:	bf38      	it	cc
 80085f2:	2204      	movcc	r2, #4
 80085f4:	9201      	str	r2, [sp, #4]
 80085f6:	9a02      	ldr	r2, [sp, #8]
 80085f8:	9303      	str	r3, [sp, #12]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d808      	bhi.n	8008610 <__multiply+0x98>
 80085fe:	2f00      	cmp	r7, #0
 8008600:	dc55      	bgt.n	80086ae <__multiply+0x136>
 8008602:	6107      	str	r7, [r0, #16]
 8008604:	b005      	add	sp, #20
 8008606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860a:	f843 2b04 	str.w	r2, [r3], #4
 800860e:	e7db      	b.n	80085c8 <__multiply+0x50>
 8008610:	f8b3 a000 	ldrh.w	sl, [r3]
 8008614:	f1ba 0f00 	cmp.w	sl, #0
 8008618:	d020      	beq.n	800865c <__multiply+0xe4>
 800861a:	f105 0e14 	add.w	lr, r5, #20
 800861e:	46b1      	mov	r9, r6
 8008620:	2200      	movs	r2, #0
 8008622:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008626:	f8d9 b000 	ldr.w	fp, [r9]
 800862a:	b2a1      	uxth	r1, r4
 800862c:	fa1f fb8b 	uxth.w	fp, fp
 8008630:	fb0a b101 	mla	r1, sl, r1, fp
 8008634:	4411      	add	r1, r2
 8008636:	f8d9 2000 	ldr.w	r2, [r9]
 800863a:	0c24      	lsrs	r4, r4, #16
 800863c:	0c12      	lsrs	r2, r2, #16
 800863e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008642:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008646:	b289      	uxth	r1, r1
 8008648:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800864c:	45f4      	cmp	ip, lr
 800864e:	f849 1b04 	str.w	r1, [r9], #4
 8008652:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008656:	d8e4      	bhi.n	8008622 <__multiply+0xaa>
 8008658:	9901      	ldr	r1, [sp, #4]
 800865a:	5072      	str	r2, [r6, r1]
 800865c:	9a03      	ldr	r2, [sp, #12]
 800865e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008662:	3304      	adds	r3, #4
 8008664:	f1b9 0f00 	cmp.w	r9, #0
 8008668:	d01f      	beq.n	80086aa <__multiply+0x132>
 800866a:	6834      	ldr	r4, [r6, #0]
 800866c:	f105 0114 	add.w	r1, r5, #20
 8008670:	46b6      	mov	lr, r6
 8008672:	f04f 0a00 	mov.w	sl, #0
 8008676:	880a      	ldrh	r2, [r1, #0]
 8008678:	f8be b002 	ldrh.w	fp, [lr, #2]
 800867c:	fb09 b202 	mla	r2, r9, r2, fp
 8008680:	4492      	add	sl, r2
 8008682:	b2a4      	uxth	r4, r4
 8008684:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008688:	f84e 4b04 	str.w	r4, [lr], #4
 800868c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008690:	f8be 2000 	ldrh.w	r2, [lr]
 8008694:	0c24      	lsrs	r4, r4, #16
 8008696:	fb09 2404 	mla	r4, r9, r4, r2
 800869a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800869e:	458c      	cmp	ip, r1
 80086a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80086a4:	d8e7      	bhi.n	8008676 <__multiply+0xfe>
 80086a6:	9a01      	ldr	r2, [sp, #4]
 80086a8:	50b4      	str	r4, [r6, r2]
 80086aa:	3604      	adds	r6, #4
 80086ac:	e7a3      	b.n	80085f6 <__multiply+0x7e>
 80086ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1a5      	bne.n	8008602 <__multiply+0x8a>
 80086b6:	3f01      	subs	r7, #1
 80086b8:	e7a1      	b.n	80085fe <__multiply+0x86>
 80086ba:	bf00      	nop
 80086bc:	08009eb4 	.word	0x08009eb4
 80086c0:	08009f44 	.word	0x08009f44

080086c4 <__pow5mult>:
 80086c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c8:	4615      	mov	r5, r2
 80086ca:	f012 0203 	ands.w	r2, r2, #3
 80086ce:	4606      	mov	r6, r0
 80086d0:	460f      	mov	r7, r1
 80086d2:	d007      	beq.n	80086e4 <__pow5mult+0x20>
 80086d4:	4c25      	ldr	r4, [pc, #148]	; (800876c <__pow5mult+0xa8>)
 80086d6:	3a01      	subs	r2, #1
 80086d8:	2300      	movs	r3, #0
 80086da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086de:	f7ff fe51 	bl	8008384 <__multadd>
 80086e2:	4607      	mov	r7, r0
 80086e4:	10ad      	asrs	r5, r5, #2
 80086e6:	d03d      	beq.n	8008764 <__pow5mult+0xa0>
 80086e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086ea:	b97c      	cbnz	r4, 800870c <__pow5mult+0x48>
 80086ec:	2010      	movs	r0, #16
 80086ee:	f7ff fdbf 	bl	8008270 <malloc>
 80086f2:	4602      	mov	r2, r0
 80086f4:	6270      	str	r0, [r6, #36]	; 0x24
 80086f6:	b928      	cbnz	r0, 8008704 <__pow5mult+0x40>
 80086f8:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <__pow5mult+0xac>)
 80086fa:	481e      	ldr	r0, [pc, #120]	; (8008774 <__pow5mult+0xb0>)
 80086fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008700:	f000 fce6 	bl	80090d0 <__assert_func>
 8008704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008708:	6004      	str	r4, [r0, #0]
 800870a:	60c4      	str	r4, [r0, #12]
 800870c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008714:	b94c      	cbnz	r4, 800872a <__pow5mult+0x66>
 8008716:	f240 2171 	movw	r1, #625	; 0x271
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff ff16 	bl	800854c <__i2b>
 8008720:	2300      	movs	r3, #0
 8008722:	f8c8 0008 	str.w	r0, [r8, #8]
 8008726:	4604      	mov	r4, r0
 8008728:	6003      	str	r3, [r0, #0]
 800872a:	f04f 0900 	mov.w	r9, #0
 800872e:	07eb      	lsls	r3, r5, #31
 8008730:	d50a      	bpl.n	8008748 <__pow5mult+0x84>
 8008732:	4639      	mov	r1, r7
 8008734:	4622      	mov	r2, r4
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff ff1e 	bl	8008578 <__multiply>
 800873c:	4639      	mov	r1, r7
 800873e:	4680      	mov	r8, r0
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff fdfd 	bl	8008340 <_Bfree>
 8008746:	4647      	mov	r7, r8
 8008748:	106d      	asrs	r5, r5, #1
 800874a:	d00b      	beq.n	8008764 <__pow5mult+0xa0>
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	b938      	cbnz	r0, 8008760 <__pow5mult+0x9c>
 8008750:	4622      	mov	r2, r4
 8008752:	4621      	mov	r1, r4
 8008754:	4630      	mov	r0, r6
 8008756:	f7ff ff0f 	bl	8008578 <__multiply>
 800875a:	6020      	str	r0, [r4, #0]
 800875c:	f8c0 9000 	str.w	r9, [r0]
 8008760:	4604      	mov	r4, r0
 8008762:	e7e4      	b.n	800872e <__pow5mult+0x6a>
 8008764:	4638      	mov	r0, r7
 8008766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876a:	bf00      	nop
 800876c:	0800a098 	.word	0x0800a098
 8008770:	08009e3e 	.word	0x08009e3e
 8008774:	08009f44 	.word	0x08009f44

08008778 <__lshift>:
 8008778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	460c      	mov	r4, r1
 800877e:	6849      	ldr	r1, [r1, #4]
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008786:	68a3      	ldr	r3, [r4, #8]
 8008788:	4607      	mov	r7, r0
 800878a:	4691      	mov	r9, r2
 800878c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008790:	f108 0601 	add.w	r6, r8, #1
 8008794:	42b3      	cmp	r3, r6
 8008796:	db0b      	blt.n	80087b0 <__lshift+0x38>
 8008798:	4638      	mov	r0, r7
 800879a:	f7ff fd91 	bl	80082c0 <_Balloc>
 800879e:	4605      	mov	r5, r0
 80087a0:	b948      	cbnz	r0, 80087b6 <__lshift+0x3e>
 80087a2:	4602      	mov	r2, r0
 80087a4:	4b28      	ldr	r3, [pc, #160]	; (8008848 <__lshift+0xd0>)
 80087a6:	4829      	ldr	r0, [pc, #164]	; (800884c <__lshift+0xd4>)
 80087a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087ac:	f000 fc90 	bl	80090d0 <__assert_func>
 80087b0:	3101      	adds	r1, #1
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	e7ee      	b.n	8008794 <__lshift+0x1c>
 80087b6:	2300      	movs	r3, #0
 80087b8:	f100 0114 	add.w	r1, r0, #20
 80087bc:	f100 0210 	add.w	r2, r0, #16
 80087c0:	4618      	mov	r0, r3
 80087c2:	4553      	cmp	r3, sl
 80087c4:	db33      	blt.n	800882e <__lshift+0xb6>
 80087c6:	6920      	ldr	r0, [r4, #16]
 80087c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087cc:	f104 0314 	add.w	r3, r4, #20
 80087d0:	f019 091f 	ands.w	r9, r9, #31
 80087d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087dc:	d02b      	beq.n	8008836 <__lshift+0xbe>
 80087de:	f1c9 0e20 	rsb	lr, r9, #32
 80087e2:	468a      	mov	sl, r1
 80087e4:	2200      	movs	r2, #0
 80087e6:	6818      	ldr	r0, [r3, #0]
 80087e8:	fa00 f009 	lsl.w	r0, r0, r9
 80087ec:	4302      	orrs	r2, r0
 80087ee:	f84a 2b04 	str.w	r2, [sl], #4
 80087f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f6:	459c      	cmp	ip, r3
 80087f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80087fc:	d8f3      	bhi.n	80087e6 <__lshift+0x6e>
 80087fe:	ebac 0304 	sub.w	r3, ip, r4
 8008802:	3b15      	subs	r3, #21
 8008804:	f023 0303 	bic.w	r3, r3, #3
 8008808:	3304      	adds	r3, #4
 800880a:	f104 0015 	add.w	r0, r4, #21
 800880e:	4584      	cmp	ip, r0
 8008810:	bf38      	it	cc
 8008812:	2304      	movcc	r3, #4
 8008814:	50ca      	str	r2, [r1, r3]
 8008816:	b10a      	cbz	r2, 800881c <__lshift+0xa4>
 8008818:	f108 0602 	add.w	r6, r8, #2
 800881c:	3e01      	subs	r6, #1
 800881e:	4638      	mov	r0, r7
 8008820:	612e      	str	r6, [r5, #16]
 8008822:	4621      	mov	r1, r4
 8008824:	f7ff fd8c 	bl	8008340 <_Bfree>
 8008828:	4628      	mov	r0, r5
 800882a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800882e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008832:	3301      	adds	r3, #1
 8008834:	e7c5      	b.n	80087c2 <__lshift+0x4a>
 8008836:	3904      	subs	r1, #4
 8008838:	f853 2b04 	ldr.w	r2, [r3], #4
 800883c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008840:	459c      	cmp	ip, r3
 8008842:	d8f9      	bhi.n	8008838 <__lshift+0xc0>
 8008844:	e7ea      	b.n	800881c <__lshift+0xa4>
 8008846:	bf00      	nop
 8008848:	08009eb4 	.word	0x08009eb4
 800884c:	08009f44 	.word	0x08009f44

08008850 <__mcmp>:
 8008850:	b530      	push	{r4, r5, lr}
 8008852:	6902      	ldr	r2, [r0, #16]
 8008854:	690c      	ldr	r4, [r1, #16]
 8008856:	1b12      	subs	r2, r2, r4
 8008858:	d10e      	bne.n	8008878 <__mcmp+0x28>
 800885a:	f100 0314 	add.w	r3, r0, #20
 800885e:	3114      	adds	r1, #20
 8008860:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008864:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008868:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800886c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008870:	42a5      	cmp	r5, r4
 8008872:	d003      	beq.n	800887c <__mcmp+0x2c>
 8008874:	d305      	bcc.n	8008882 <__mcmp+0x32>
 8008876:	2201      	movs	r2, #1
 8008878:	4610      	mov	r0, r2
 800887a:	bd30      	pop	{r4, r5, pc}
 800887c:	4283      	cmp	r3, r0
 800887e:	d3f3      	bcc.n	8008868 <__mcmp+0x18>
 8008880:	e7fa      	b.n	8008878 <__mcmp+0x28>
 8008882:	f04f 32ff 	mov.w	r2, #4294967295
 8008886:	e7f7      	b.n	8008878 <__mcmp+0x28>

08008888 <__mdiff>:
 8008888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	460c      	mov	r4, r1
 800888e:	4606      	mov	r6, r0
 8008890:	4611      	mov	r1, r2
 8008892:	4620      	mov	r0, r4
 8008894:	4617      	mov	r7, r2
 8008896:	f7ff ffdb 	bl	8008850 <__mcmp>
 800889a:	1e05      	subs	r5, r0, #0
 800889c:	d110      	bne.n	80088c0 <__mdiff+0x38>
 800889e:	4629      	mov	r1, r5
 80088a0:	4630      	mov	r0, r6
 80088a2:	f7ff fd0d 	bl	80082c0 <_Balloc>
 80088a6:	b930      	cbnz	r0, 80088b6 <__mdiff+0x2e>
 80088a8:	4b39      	ldr	r3, [pc, #228]	; (8008990 <__mdiff+0x108>)
 80088aa:	4602      	mov	r2, r0
 80088ac:	f240 2132 	movw	r1, #562	; 0x232
 80088b0:	4838      	ldr	r0, [pc, #224]	; (8008994 <__mdiff+0x10c>)
 80088b2:	f000 fc0d 	bl	80090d0 <__assert_func>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c0:	bfa4      	itt	ge
 80088c2:	463b      	movge	r3, r7
 80088c4:	4627      	movge	r7, r4
 80088c6:	4630      	mov	r0, r6
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	bfa6      	itte	ge
 80088cc:	461c      	movge	r4, r3
 80088ce:	2500      	movge	r5, #0
 80088d0:	2501      	movlt	r5, #1
 80088d2:	f7ff fcf5 	bl	80082c0 <_Balloc>
 80088d6:	b920      	cbnz	r0, 80088e2 <__mdiff+0x5a>
 80088d8:	4b2d      	ldr	r3, [pc, #180]	; (8008990 <__mdiff+0x108>)
 80088da:	4602      	mov	r2, r0
 80088dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088e0:	e7e6      	b.n	80088b0 <__mdiff+0x28>
 80088e2:	693e      	ldr	r6, [r7, #16]
 80088e4:	60c5      	str	r5, [r0, #12]
 80088e6:	6925      	ldr	r5, [r4, #16]
 80088e8:	f107 0114 	add.w	r1, r7, #20
 80088ec:	f104 0914 	add.w	r9, r4, #20
 80088f0:	f100 0e14 	add.w	lr, r0, #20
 80088f4:	f107 0210 	add.w	r2, r7, #16
 80088f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80088fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008900:	46f2      	mov	sl, lr
 8008902:	2700      	movs	r7, #0
 8008904:	f859 3b04 	ldr.w	r3, [r9], #4
 8008908:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800890c:	fa1f f883 	uxth.w	r8, r3
 8008910:	fa17 f78b 	uxtah	r7, r7, fp
 8008914:	0c1b      	lsrs	r3, r3, #16
 8008916:	eba7 0808 	sub.w	r8, r7, r8
 800891a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800891e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008922:	fa1f f888 	uxth.w	r8, r8
 8008926:	141f      	asrs	r7, r3, #16
 8008928:	454d      	cmp	r5, r9
 800892a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800892e:	f84a 3b04 	str.w	r3, [sl], #4
 8008932:	d8e7      	bhi.n	8008904 <__mdiff+0x7c>
 8008934:	1b2b      	subs	r3, r5, r4
 8008936:	3b15      	subs	r3, #21
 8008938:	f023 0303 	bic.w	r3, r3, #3
 800893c:	3304      	adds	r3, #4
 800893e:	3415      	adds	r4, #21
 8008940:	42a5      	cmp	r5, r4
 8008942:	bf38      	it	cc
 8008944:	2304      	movcc	r3, #4
 8008946:	4419      	add	r1, r3
 8008948:	4473      	add	r3, lr
 800894a:	469e      	mov	lr, r3
 800894c:	460d      	mov	r5, r1
 800894e:	4565      	cmp	r5, ip
 8008950:	d30e      	bcc.n	8008970 <__mdiff+0xe8>
 8008952:	f10c 0203 	add.w	r2, ip, #3
 8008956:	1a52      	subs	r2, r2, r1
 8008958:	f022 0203 	bic.w	r2, r2, #3
 800895c:	3903      	subs	r1, #3
 800895e:	458c      	cmp	ip, r1
 8008960:	bf38      	it	cc
 8008962:	2200      	movcc	r2, #0
 8008964:	441a      	add	r2, r3
 8008966:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800896a:	b17b      	cbz	r3, 800898c <__mdiff+0x104>
 800896c:	6106      	str	r6, [r0, #16]
 800896e:	e7a5      	b.n	80088bc <__mdiff+0x34>
 8008970:	f855 8b04 	ldr.w	r8, [r5], #4
 8008974:	fa17 f488 	uxtah	r4, r7, r8
 8008978:	1422      	asrs	r2, r4, #16
 800897a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800897e:	b2a4      	uxth	r4, r4
 8008980:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008984:	f84e 4b04 	str.w	r4, [lr], #4
 8008988:	1417      	asrs	r7, r2, #16
 800898a:	e7e0      	b.n	800894e <__mdiff+0xc6>
 800898c:	3e01      	subs	r6, #1
 800898e:	e7ea      	b.n	8008966 <__mdiff+0xde>
 8008990:	08009eb4 	.word	0x08009eb4
 8008994:	08009f44 	.word	0x08009f44

08008998 <__ulp>:
 8008998:	b082      	sub	sp, #8
 800899a:	ed8d 0b00 	vstr	d0, [sp]
 800899e:	9b01      	ldr	r3, [sp, #4]
 80089a0:	4912      	ldr	r1, [pc, #72]	; (80089ec <__ulp+0x54>)
 80089a2:	4019      	ands	r1, r3
 80089a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80089a8:	2900      	cmp	r1, #0
 80089aa:	dd05      	ble.n	80089b8 <__ulp+0x20>
 80089ac:	2200      	movs	r2, #0
 80089ae:	460b      	mov	r3, r1
 80089b0:	ec43 2b10 	vmov	d0, r2, r3
 80089b4:	b002      	add	sp, #8
 80089b6:	4770      	bx	lr
 80089b8:	4249      	negs	r1, r1
 80089ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80089be:	ea4f 5021 	mov.w	r0, r1, asr #20
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	f04f 0300 	mov.w	r3, #0
 80089ca:	da04      	bge.n	80089d6 <__ulp+0x3e>
 80089cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80089d0:	fa41 f300 	asr.w	r3, r1, r0
 80089d4:	e7ec      	b.n	80089b0 <__ulp+0x18>
 80089d6:	f1a0 0114 	sub.w	r1, r0, #20
 80089da:	291e      	cmp	r1, #30
 80089dc:	bfda      	itte	le
 80089de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80089e2:	fa20 f101 	lsrle.w	r1, r0, r1
 80089e6:	2101      	movgt	r1, #1
 80089e8:	460a      	mov	r2, r1
 80089ea:	e7e1      	b.n	80089b0 <__ulp+0x18>
 80089ec:	7ff00000 	.word	0x7ff00000

080089f0 <__b2d>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	6905      	ldr	r5, [r0, #16]
 80089f4:	f100 0714 	add.w	r7, r0, #20
 80089f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80089fc:	1f2e      	subs	r6, r5, #4
 80089fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7ff fd52 	bl	80084ac <__hi0bits>
 8008a08:	f1c0 0320 	rsb	r3, r0, #32
 8008a0c:	280a      	cmp	r0, #10
 8008a0e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008a8c <__b2d+0x9c>
 8008a12:	600b      	str	r3, [r1, #0]
 8008a14:	dc14      	bgt.n	8008a40 <__b2d+0x50>
 8008a16:	f1c0 0e0b 	rsb	lr, r0, #11
 8008a1a:	fa24 f10e 	lsr.w	r1, r4, lr
 8008a1e:	42b7      	cmp	r7, r6
 8008a20:	ea41 030c 	orr.w	r3, r1, ip
 8008a24:	bf34      	ite	cc
 8008a26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008a2a:	2100      	movcs	r1, #0
 8008a2c:	3015      	adds	r0, #21
 8008a2e:	fa04 f000 	lsl.w	r0, r4, r0
 8008a32:	fa21 f10e 	lsr.w	r1, r1, lr
 8008a36:	ea40 0201 	orr.w	r2, r0, r1
 8008a3a:	ec43 2b10 	vmov	d0, r2, r3
 8008a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a40:	42b7      	cmp	r7, r6
 8008a42:	bf3a      	itte	cc
 8008a44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008a48:	f1a5 0608 	subcc.w	r6, r5, #8
 8008a4c:	2100      	movcs	r1, #0
 8008a4e:	380b      	subs	r0, #11
 8008a50:	d017      	beq.n	8008a82 <__b2d+0x92>
 8008a52:	f1c0 0c20 	rsb	ip, r0, #32
 8008a56:	fa04 f500 	lsl.w	r5, r4, r0
 8008a5a:	42be      	cmp	r6, r7
 8008a5c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008a60:	ea45 0504 	orr.w	r5, r5, r4
 8008a64:	bf8c      	ite	hi
 8008a66:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008a6a:	2400      	movls	r4, #0
 8008a6c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008a70:	fa01 f000 	lsl.w	r0, r1, r0
 8008a74:	fa24 f40c 	lsr.w	r4, r4, ip
 8008a78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a7c:	ea40 0204 	orr.w	r2, r0, r4
 8008a80:	e7db      	b.n	8008a3a <__b2d+0x4a>
 8008a82:	ea44 030c 	orr.w	r3, r4, ip
 8008a86:	460a      	mov	r2, r1
 8008a88:	e7d7      	b.n	8008a3a <__b2d+0x4a>
 8008a8a:	bf00      	nop
 8008a8c:	3ff00000 	.word	0x3ff00000

08008a90 <__d2b>:
 8008a90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	4689      	mov	r9, r1
 8008a96:	2101      	movs	r1, #1
 8008a98:	ec57 6b10 	vmov	r6, r7, d0
 8008a9c:	4690      	mov	r8, r2
 8008a9e:	f7ff fc0f 	bl	80082c0 <_Balloc>
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	b930      	cbnz	r0, 8008ab4 <__d2b+0x24>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	4b25      	ldr	r3, [pc, #148]	; (8008b40 <__d2b+0xb0>)
 8008aaa:	4826      	ldr	r0, [pc, #152]	; (8008b44 <__d2b+0xb4>)
 8008aac:	f240 310a 	movw	r1, #778	; 0x30a
 8008ab0:	f000 fb0e 	bl	80090d0 <__assert_func>
 8008ab4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008abc:	bb35      	cbnz	r5, 8008b0c <__d2b+0x7c>
 8008abe:	2e00      	cmp	r6, #0
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	d028      	beq.n	8008b16 <__d2b+0x86>
 8008ac4:	4668      	mov	r0, sp
 8008ac6:	9600      	str	r6, [sp, #0]
 8008ac8:	f7ff fd10 	bl	80084ec <__lo0bits>
 8008acc:	9900      	ldr	r1, [sp, #0]
 8008ace:	b300      	cbz	r0, 8008b12 <__d2b+0x82>
 8008ad0:	9a01      	ldr	r2, [sp, #4]
 8008ad2:	f1c0 0320 	rsb	r3, r0, #32
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	430b      	orrs	r3, r1
 8008adc:	40c2      	lsrs	r2, r0
 8008ade:	6163      	str	r3, [r4, #20]
 8008ae0:	9201      	str	r2, [sp, #4]
 8008ae2:	9b01      	ldr	r3, [sp, #4]
 8008ae4:	61a3      	str	r3, [r4, #24]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bf14      	ite	ne
 8008aea:	2202      	movne	r2, #2
 8008aec:	2201      	moveq	r2, #1
 8008aee:	6122      	str	r2, [r4, #16]
 8008af0:	b1d5      	cbz	r5, 8008b28 <__d2b+0x98>
 8008af2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008af6:	4405      	add	r5, r0
 8008af8:	f8c9 5000 	str.w	r5, [r9]
 8008afc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b00:	f8c8 0000 	str.w	r0, [r8]
 8008b04:	4620      	mov	r0, r4
 8008b06:	b003      	add	sp, #12
 8008b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b10:	e7d5      	b.n	8008abe <__d2b+0x2e>
 8008b12:	6161      	str	r1, [r4, #20]
 8008b14:	e7e5      	b.n	8008ae2 <__d2b+0x52>
 8008b16:	a801      	add	r0, sp, #4
 8008b18:	f7ff fce8 	bl	80084ec <__lo0bits>
 8008b1c:	9b01      	ldr	r3, [sp, #4]
 8008b1e:	6163      	str	r3, [r4, #20]
 8008b20:	2201      	movs	r2, #1
 8008b22:	6122      	str	r2, [r4, #16]
 8008b24:	3020      	adds	r0, #32
 8008b26:	e7e3      	b.n	8008af0 <__d2b+0x60>
 8008b28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b30:	f8c9 0000 	str.w	r0, [r9]
 8008b34:	6918      	ldr	r0, [r3, #16]
 8008b36:	f7ff fcb9 	bl	80084ac <__hi0bits>
 8008b3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b3e:	e7df      	b.n	8008b00 <__d2b+0x70>
 8008b40:	08009eb4 	.word	0x08009eb4
 8008b44:	08009f44 	.word	0x08009f44

08008b48 <__ratio>:
 8008b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	4688      	mov	r8, r1
 8008b4e:	4669      	mov	r1, sp
 8008b50:	4681      	mov	r9, r0
 8008b52:	f7ff ff4d 	bl	80089f0 <__b2d>
 8008b56:	a901      	add	r1, sp, #4
 8008b58:	4640      	mov	r0, r8
 8008b5a:	ec55 4b10 	vmov	r4, r5, d0
 8008b5e:	f7ff ff47 	bl	80089f0 <__b2d>
 8008b62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b6a:	eba3 0c02 	sub.w	ip, r3, r2
 8008b6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b72:	1a9b      	subs	r3, r3, r2
 8008b74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b78:	ec51 0b10 	vmov	r0, r1, d0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	bfd6      	itet	le
 8008b80:	460a      	movle	r2, r1
 8008b82:	462a      	movgt	r2, r5
 8008b84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b88:	468b      	mov	fp, r1
 8008b8a:	462f      	mov	r7, r5
 8008b8c:	bfd4      	ite	le
 8008b8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b96:	4620      	mov	r0, r4
 8008b98:	ee10 2a10 	vmov	r2, s0
 8008b9c:	465b      	mov	r3, fp
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f7f7 fe5c 	bl	800085c <__aeabi_ddiv>
 8008ba4:	ec41 0b10 	vmov	d0, r0, r1
 8008ba8:	b003      	add	sp, #12
 8008baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bae <__copybits>:
 8008bae:	3901      	subs	r1, #1
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	1149      	asrs	r1, r1, #5
 8008bb4:	6914      	ldr	r4, [r2, #16]
 8008bb6:	3101      	adds	r1, #1
 8008bb8:	f102 0314 	add.w	r3, r2, #20
 8008bbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008bc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008bc4:	1f05      	subs	r5, r0, #4
 8008bc6:	42a3      	cmp	r3, r4
 8008bc8:	d30c      	bcc.n	8008be4 <__copybits+0x36>
 8008bca:	1aa3      	subs	r3, r4, r2
 8008bcc:	3b11      	subs	r3, #17
 8008bce:	f023 0303 	bic.w	r3, r3, #3
 8008bd2:	3211      	adds	r2, #17
 8008bd4:	42a2      	cmp	r2, r4
 8008bd6:	bf88      	it	hi
 8008bd8:	2300      	movhi	r3, #0
 8008bda:	4418      	add	r0, r3
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4288      	cmp	r0, r1
 8008be0:	d305      	bcc.n	8008bee <__copybits+0x40>
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	f853 6b04 	ldr.w	r6, [r3], #4
 8008be8:	f845 6f04 	str.w	r6, [r5, #4]!
 8008bec:	e7eb      	b.n	8008bc6 <__copybits+0x18>
 8008bee:	f840 3b04 	str.w	r3, [r0], #4
 8008bf2:	e7f4      	b.n	8008bde <__copybits+0x30>

08008bf4 <__any_on>:
 8008bf4:	f100 0214 	add.w	r2, r0, #20
 8008bf8:	6900      	ldr	r0, [r0, #16]
 8008bfa:	114b      	asrs	r3, r1, #5
 8008bfc:	4298      	cmp	r0, r3
 8008bfe:	b510      	push	{r4, lr}
 8008c00:	db11      	blt.n	8008c26 <__any_on+0x32>
 8008c02:	dd0a      	ble.n	8008c1a <__any_on+0x26>
 8008c04:	f011 011f 	ands.w	r1, r1, #31
 8008c08:	d007      	beq.n	8008c1a <__any_on+0x26>
 8008c0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c0e:	fa24 f001 	lsr.w	r0, r4, r1
 8008c12:	fa00 f101 	lsl.w	r1, r0, r1
 8008c16:	428c      	cmp	r4, r1
 8008c18:	d10b      	bne.n	8008c32 <__any_on+0x3e>
 8008c1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d803      	bhi.n	8008c2a <__any_on+0x36>
 8008c22:	2000      	movs	r0, #0
 8008c24:	bd10      	pop	{r4, pc}
 8008c26:	4603      	mov	r3, r0
 8008c28:	e7f7      	b.n	8008c1a <__any_on+0x26>
 8008c2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c2e:	2900      	cmp	r1, #0
 8008c30:	d0f5      	beq.n	8008c1e <__any_on+0x2a>
 8008c32:	2001      	movs	r0, #1
 8008c34:	e7f6      	b.n	8008c24 <__any_on+0x30>

08008c36 <_calloc_r>:
 8008c36:	b513      	push	{r0, r1, r4, lr}
 8008c38:	434a      	muls	r2, r1
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	9201      	str	r2, [sp, #4]
 8008c3e:	f000 f859 	bl	8008cf4 <_malloc_r>
 8008c42:	4604      	mov	r4, r0
 8008c44:	b118      	cbz	r0, 8008c4e <_calloc_r+0x18>
 8008c46:	9a01      	ldr	r2, [sp, #4]
 8008c48:	2100      	movs	r1, #0
 8008c4a:	f7fc fbc7 	bl	80053dc <memset>
 8008c4e:	4620      	mov	r0, r4
 8008c50:	b002      	add	sp, #8
 8008c52:	bd10      	pop	{r4, pc}

08008c54 <_free_r>:
 8008c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c56:	2900      	cmp	r1, #0
 8008c58:	d048      	beq.n	8008cec <_free_r+0x98>
 8008c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c5e:	9001      	str	r0, [sp, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f1a1 0404 	sub.w	r4, r1, #4
 8008c66:	bfb8      	it	lt
 8008c68:	18e4      	addlt	r4, r4, r3
 8008c6a:	f000 fa7b 	bl	8009164 <__malloc_lock>
 8008c6e:	4a20      	ldr	r2, [pc, #128]	; (8008cf0 <_free_r+0x9c>)
 8008c70:	9801      	ldr	r0, [sp, #4]
 8008c72:	6813      	ldr	r3, [r2, #0]
 8008c74:	4615      	mov	r5, r2
 8008c76:	b933      	cbnz	r3, 8008c86 <_free_r+0x32>
 8008c78:	6063      	str	r3, [r4, #4]
 8008c7a:	6014      	str	r4, [r2, #0]
 8008c7c:	b003      	add	sp, #12
 8008c7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c82:	f000 ba75 	b.w	8009170 <__malloc_unlock>
 8008c86:	42a3      	cmp	r3, r4
 8008c88:	d90b      	bls.n	8008ca2 <_free_r+0x4e>
 8008c8a:	6821      	ldr	r1, [r4, #0]
 8008c8c:	1862      	adds	r2, r4, r1
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bf04      	itt	eq
 8008c92:	681a      	ldreq	r2, [r3, #0]
 8008c94:	685b      	ldreq	r3, [r3, #4]
 8008c96:	6063      	str	r3, [r4, #4]
 8008c98:	bf04      	itt	eq
 8008c9a:	1852      	addeq	r2, r2, r1
 8008c9c:	6022      	streq	r2, [r4, #0]
 8008c9e:	602c      	str	r4, [r5, #0]
 8008ca0:	e7ec      	b.n	8008c7c <_free_r+0x28>
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	b10b      	cbz	r3, 8008cac <_free_r+0x58>
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	d9fa      	bls.n	8008ca2 <_free_r+0x4e>
 8008cac:	6811      	ldr	r1, [r2, #0]
 8008cae:	1855      	adds	r5, r2, r1
 8008cb0:	42a5      	cmp	r5, r4
 8008cb2:	d10b      	bne.n	8008ccc <_free_r+0x78>
 8008cb4:	6824      	ldr	r4, [r4, #0]
 8008cb6:	4421      	add	r1, r4
 8008cb8:	1854      	adds	r4, r2, r1
 8008cba:	42a3      	cmp	r3, r4
 8008cbc:	6011      	str	r1, [r2, #0]
 8008cbe:	d1dd      	bne.n	8008c7c <_free_r+0x28>
 8008cc0:	681c      	ldr	r4, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	6053      	str	r3, [r2, #4]
 8008cc6:	4421      	add	r1, r4
 8008cc8:	6011      	str	r1, [r2, #0]
 8008cca:	e7d7      	b.n	8008c7c <_free_r+0x28>
 8008ccc:	d902      	bls.n	8008cd4 <_free_r+0x80>
 8008cce:	230c      	movs	r3, #12
 8008cd0:	6003      	str	r3, [r0, #0]
 8008cd2:	e7d3      	b.n	8008c7c <_free_r+0x28>
 8008cd4:	6825      	ldr	r5, [r4, #0]
 8008cd6:	1961      	adds	r1, r4, r5
 8008cd8:	428b      	cmp	r3, r1
 8008cda:	bf04      	itt	eq
 8008cdc:	6819      	ldreq	r1, [r3, #0]
 8008cde:	685b      	ldreq	r3, [r3, #4]
 8008ce0:	6063      	str	r3, [r4, #4]
 8008ce2:	bf04      	itt	eq
 8008ce4:	1949      	addeq	r1, r1, r5
 8008ce6:	6021      	streq	r1, [r4, #0]
 8008ce8:	6054      	str	r4, [r2, #4]
 8008cea:	e7c7      	b.n	8008c7c <_free_r+0x28>
 8008cec:	b003      	add	sp, #12
 8008cee:	bd30      	pop	{r4, r5, pc}
 8008cf0:	20000218 	.word	0x20000218

08008cf4 <_malloc_r>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	1ccd      	adds	r5, r1, #3
 8008cf8:	f025 0503 	bic.w	r5, r5, #3
 8008cfc:	3508      	adds	r5, #8
 8008cfe:	2d0c      	cmp	r5, #12
 8008d00:	bf38      	it	cc
 8008d02:	250c      	movcc	r5, #12
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	4606      	mov	r6, r0
 8008d08:	db01      	blt.n	8008d0e <_malloc_r+0x1a>
 8008d0a:	42a9      	cmp	r1, r5
 8008d0c:	d903      	bls.n	8008d16 <_malloc_r+0x22>
 8008d0e:	230c      	movs	r3, #12
 8008d10:	6033      	str	r3, [r6, #0]
 8008d12:	2000      	movs	r0, #0
 8008d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d16:	f000 fa25 	bl	8009164 <__malloc_lock>
 8008d1a:	4921      	ldr	r1, [pc, #132]	; (8008da0 <_malloc_r+0xac>)
 8008d1c:	680a      	ldr	r2, [r1, #0]
 8008d1e:	4614      	mov	r4, r2
 8008d20:	b99c      	cbnz	r4, 8008d4a <_malloc_r+0x56>
 8008d22:	4f20      	ldr	r7, [pc, #128]	; (8008da4 <_malloc_r+0xb0>)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	b923      	cbnz	r3, 8008d32 <_malloc_r+0x3e>
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f000 f9a0 	bl	8009070 <_sbrk_r>
 8008d30:	6038      	str	r0, [r7, #0]
 8008d32:	4629      	mov	r1, r5
 8008d34:	4630      	mov	r0, r6
 8008d36:	f000 f99b 	bl	8009070 <_sbrk_r>
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	d123      	bne.n	8008d86 <_malloc_r+0x92>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	6033      	str	r3, [r6, #0]
 8008d42:	4630      	mov	r0, r6
 8008d44:	f000 fa14 	bl	8009170 <__malloc_unlock>
 8008d48:	e7e3      	b.n	8008d12 <_malloc_r+0x1e>
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	1b5b      	subs	r3, r3, r5
 8008d4e:	d417      	bmi.n	8008d80 <_malloc_r+0x8c>
 8008d50:	2b0b      	cmp	r3, #11
 8008d52:	d903      	bls.n	8008d5c <_malloc_r+0x68>
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	441c      	add	r4, r3
 8008d58:	6025      	str	r5, [r4, #0]
 8008d5a:	e004      	b.n	8008d66 <_malloc_r+0x72>
 8008d5c:	6863      	ldr	r3, [r4, #4]
 8008d5e:	42a2      	cmp	r2, r4
 8008d60:	bf0c      	ite	eq
 8008d62:	600b      	streq	r3, [r1, #0]
 8008d64:	6053      	strne	r3, [r2, #4]
 8008d66:	4630      	mov	r0, r6
 8008d68:	f000 fa02 	bl	8009170 <__malloc_unlock>
 8008d6c:	f104 000b 	add.w	r0, r4, #11
 8008d70:	1d23      	adds	r3, r4, #4
 8008d72:	f020 0007 	bic.w	r0, r0, #7
 8008d76:	1ac2      	subs	r2, r0, r3
 8008d78:	d0cc      	beq.n	8008d14 <_malloc_r+0x20>
 8008d7a:	1a1b      	subs	r3, r3, r0
 8008d7c:	50a3      	str	r3, [r4, r2]
 8008d7e:	e7c9      	b.n	8008d14 <_malloc_r+0x20>
 8008d80:	4622      	mov	r2, r4
 8008d82:	6864      	ldr	r4, [r4, #4]
 8008d84:	e7cc      	b.n	8008d20 <_malloc_r+0x2c>
 8008d86:	1cc4      	adds	r4, r0, #3
 8008d88:	f024 0403 	bic.w	r4, r4, #3
 8008d8c:	42a0      	cmp	r0, r4
 8008d8e:	d0e3      	beq.n	8008d58 <_malloc_r+0x64>
 8008d90:	1a21      	subs	r1, r4, r0
 8008d92:	4630      	mov	r0, r6
 8008d94:	f000 f96c 	bl	8009070 <_sbrk_r>
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d1dd      	bne.n	8008d58 <_malloc_r+0x64>
 8008d9c:	e7cf      	b.n	8008d3e <_malloc_r+0x4a>
 8008d9e:	bf00      	nop
 8008da0:	20000218 	.word	0x20000218
 8008da4:	2000021c 	.word	0x2000021c

08008da8 <__ssputs_r>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	688e      	ldr	r6, [r1, #8]
 8008dae:	429e      	cmp	r6, r3
 8008db0:	4682      	mov	sl, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	4690      	mov	r8, r2
 8008db6:	461f      	mov	r7, r3
 8008db8:	d838      	bhi.n	8008e2c <__ssputs_r+0x84>
 8008dba:	898a      	ldrh	r2, [r1, #12]
 8008dbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dc0:	d032      	beq.n	8008e28 <__ssputs_r+0x80>
 8008dc2:	6825      	ldr	r5, [r4, #0]
 8008dc4:	6909      	ldr	r1, [r1, #16]
 8008dc6:	eba5 0901 	sub.w	r9, r5, r1
 8008dca:	6965      	ldr	r5, [r4, #20]
 8008dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	444b      	add	r3, r9
 8008dd8:	106d      	asrs	r5, r5, #1
 8008dda:	429d      	cmp	r5, r3
 8008ddc:	bf38      	it	cc
 8008dde:	461d      	movcc	r5, r3
 8008de0:	0553      	lsls	r3, r2, #21
 8008de2:	d531      	bpl.n	8008e48 <__ssputs_r+0xa0>
 8008de4:	4629      	mov	r1, r5
 8008de6:	f7ff ff85 	bl	8008cf4 <_malloc_r>
 8008dea:	4606      	mov	r6, r0
 8008dec:	b950      	cbnz	r0, 8008e04 <__ssputs_r+0x5c>
 8008dee:	230c      	movs	r3, #12
 8008df0:	f8ca 3000 	str.w	r3, [sl]
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dfa:	81a3      	strh	r3, [r4, #12]
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e04:	6921      	ldr	r1, [r4, #16]
 8008e06:	464a      	mov	r2, r9
 8008e08:	f7ff fa4c 	bl	80082a4 <memcpy>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	6126      	str	r6, [r4, #16]
 8008e1a:	6165      	str	r5, [r4, #20]
 8008e1c:	444e      	add	r6, r9
 8008e1e:	eba5 0509 	sub.w	r5, r5, r9
 8008e22:	6026      	str	r6, [r4, #0]
 8008e24:	60a5      	str	r5, [r4, #8]
 8008e26:	463e      	mov	r6, r7
 8008e28:	42be      	cmp	r6, r7
 8008e2a:	d900      	bls.n	8008e2e <__ssputs_r+0x86>
 8008e2c:	463e      	mov	r6, r7
 8008e2e:	4632      	mov	r2, r6
 8008e30:	6820      	ldr	r0, [r4, #0]
 8008e32:	4641      	mov	r1, r8
 8008e34:	f000 f97c 	bl	8009130 <memmove>
 8008e38:	68a3      	ldr	r3, [r4, #8]
 8008e3a:	6822      	ldr	r2, [r4, #0]
 8008e3c:	1b9b      	subs	r3, r3, r6
 8008e3e:	4432      	add	r2, r6
 8008e40:	60a3      	str	r3, [r4, #8]
 8008e42:	6022      	str	r2, [r4, #0]
 8008e44:	2000      	movs	r0, #0
 8008e46:	e7db      	b.n	8008e00 <__ssputs_r+0x58>
 8008e48:	462a      	mov	r2, r5
 8008e4a:	f000 f997 	bl	800917c <_realloc_r>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d1e1      	bne.n	8008e18 <__ssputs_r+0x70>
 8008e54:	6921      	ldr	r1, [r4, #16]
 8008e56:	4650      	mov	r0, sl
 8008e58:	f7ff fefc 	bl	8008c54 <_free_r>
 8008e5c:	e7c7      	b.n	8008dee <__ssputs_r+0x46>
	...

08008e60 <_svfiprintf_r>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	4698      	mov	r8, r3
 8008e66:	898b      	ldrh	r3, [r1, #12]
 8008e68:	061b      	lsls	r3, r3, #24
 8008e6a:	b09d      	sub	sp, #116	; 0x74
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	460d      	mov	r5, r1
 8008e70:	4614      	mov	r4, r2
 8008e72:	d50e      	bpl.n	8008e92 <_svfiprintf_r+0x32>
 8008e74:	690b      	ldr	r3, [r1, #16]
 8008e76:	b963      	cbnz	r3, 8008e92 <_svfiprintf_r+0x32>
 8008e78:	2140      	movs	r1, #64	; 0x40
 8008e7a:	f7ff ff3b 	bl	8008cf4 <_malloc_r>
 8008e7e:	6028      	str	r0, [r5, #0]
 8008e80:	6128      	str	r0, [r5, #16]
 8008e82:	b920      	cbnz	r0, 8008e8e <_svfiprintf_r+0x2e>
 8008e84:	230c      	movs	r3, #12
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	e0d1      	b.n	8009032 <_svfiprintf_r+0x1d2>
 8008e8e:	2340      	movs	r3, #64	; 0x40
 8008e90:	616b      	str	r3, [r5, #20]
 8008e92:	2300      	movs	r3, #0
 8008e94:	9309      	str	r3, [sp, #36]	; 0x24
 8008e96:	2320      	movs	r3, #32
 8008e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ea0:	2330      	movs	r3, #48	; 0x30
 8008ea2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800904c <_svfiprintf_r+0x1ec>
 8008ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eaa:	f04f 0901 	mov.w	r9, #1
 8008eae:	4623      	mov	r3, r4
 8008eb0:	469a      	mov	sl, r3
 8008eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eb6:	b10a      	cbz	r2, 8008ebc <_svfiprintf_r+0x5c>
 8008eb8:	2a25      	cmp	r2, #37	; 0x25
 8008eba:	d1f9      	bne.n	8008eb0 <_svfiprintf_r+0x50>
 8008ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ec0:	d00b      	beq.n	8008eda <_svfiprintf_r+0x7a>
 8008ec2:	465b      	mov	r3, fp
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4638      	mov	r0, r7
 8008eca:	f7ff ff6d 	bl	8008da8 <__ssputs_r>
 8008ece:	3001      	adds	r0, #1
 8008ed0:	f000 80aa 	beq.w	8009028 <_svfiprintf_r+0x1c8>
 8008ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed6:	445a      	add	r2, fp
 8008ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8008eda:	f89a 3000 	ldrb.w	r3, [sl]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 80a2 	beq.w	8009028 <_svfiprintf_r+0x1c8>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eee:	f10a 0a01 	add.w	sl, sl, #1
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	9307      	str	r3, [sp, #28]
 8008ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008efa:	931a      	str	r3, [sp, #104]	; 0x68
 8008efc:	4654      	mov	r4, sl
 8008efe:	2205      	movs	r2, #5
 8008f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f04:	4851      	ldr	r0, [pc, #324]	; (800904c <_svfiprintf_r+0x1ec>)
 8008f06:	f7f7 f973 	bl	80001f0 <memchr>
 8008f0a:	9a04      	ldr	r2, [sp, #16]
 8008f0c:	b9d8      	cbnz	r0, 8008f46 <_svfiprintf_r+0xe6>
 8008f0e:	06d0      	lsls	r0, r2, #27
 8008f10:	bf44      	itt	mi
 8008f12:	2320      	movmi	r3, #32
 8008f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f18:	0711      	lsls	r1, r2, #28
 8008f1a:	bf44      	itt	mi
 8008f1c:	232b      	movmi	r3, #43	; 0x2b
 8008f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f22:	f89a 3000 	ldrb.w	r3, [sl]
 8008f26:	2b2a      	cmp	r3, #42	; 0x2a
 8008f28:	d015      	beq.n	8008f56 <_svfiprintf_r+0xf6>
 8008f2a:	9a07      	ldr	r2, [sp, #28]
 8008f2c:	4654      	mov	r4, sl
 8008f2e:	2000      	movs	r0, #0
 8008f30:	f04f 0c0a 	mov.w	ip, #10
 8008f34:	4621      	mov	r1, r4
 8008f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f3a:	3b30      	subs	r3, #48	; 0x30
 8008f3c:	2b09      	cmp	r3, #9
 8008f3e:	d94e      	bls.n	8008fde <_svfiprintf_r+0x17e>
 8008f40:	b1b0      	cbz	r0, 8008f70 <_svfiprintf_r+0x110>
 8008f42:	9207      	str	r2, [sp, #28]
 8008f44:	e014      	b.n	8008f70 <_svfiprintf_r+0x110>
 8008f46:	eba0 0308 	sub.w	r3, r0, r8
 8008f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	9304      	str	r3, [sp, #16]
 8008f52:	46a2      	mov	sl, r4
 8008f54:	e7d2      	b.n	8008efc <_svfiprintf_r+0x9c>
 8008f56:	9b03      	ldr	r3, [sp, #12]
 8008f58:	1d19      	adds	r1, r3, #4
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	9103      	str	r1, [sp, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	bfbb      	ittet	lt
 8008f62:	425b      	neglt	r3, r3
 8008f64:	f042 0202 	orrlt.w	r2, r2, #2
 8008f68:	9307      	strge	r3, [sp, #28]
 8008f6a:	9307      	strlt	r3, [sp, #28]
 8008f6c:	bfb8      	it	lt
 8008f6e:	9204      	strlt	r2, [sp, #16]
 8008f70:	7823      	ldrb	r3, [r4, #0]
 8008f72:	2b2e      	cmp	r3, #46	; 0x2e
 8008f74:	d10c      	bne.n	8008f90 <_svfiprintf_r+0x130>
 8008f76:	7863      	ldrb	r3, [r4, #1]
 8008f78:	2b2a      	cmp	r3, #42	; 0x2a
 8008f7a:	d135      	bne.n	8008fe8 <_svfiprintf_r+0x188>
 8008f7c:	9b03      	ldr	r3, [sp, #12]
 8008f7e:	1d1a      	adds	r2, r3, #4
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	9203      	str	r2, [sp, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	bfb8      	it	lt
 8008f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f8c:	3402      	adds	r4, #2
 8008f8e:	9305      	str	r3, [sp, #20]
 8008f90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800905c <_svfiprintf_r+0x1fc>
 8008f94:	7821      	ldrb	r1, [r4, #0]
 8008f96:	2203      	movs	r2, #3
 8008f98:	4650      	mov	r0, sl
 8008f9a:	f7f7 f929 	bl	80001f0 <memchr>
 8008f9e:	b140      	cbz	r0, 8008fb2 <_svfiprintf_r+0x152>
 8008fa0:	2340      	movs	r3, #64	; 0x40
 8008fa2:	eba0 000a 	sub.w	r0, r0, sl
 8008fa6:	fa03 f000 	lsl.w	r0, r3, r0
 8008faa:	9b04      	ldr	r3, [sp, #16]
 8008fac:	4303      	orrs	r3, r0
 8008fae:	3401      	adds	r4, #1
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb6:	4826      	ldr	r0, [pc, #152]	; (8009050 <_svfiprintf_r+0x1f0>)
 8008fb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fbc:	2206      	movs	r2, #6
 8008fbe:	f7f7 f917 	bl	80001f0 <memchr>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d038      	beq.n	8009038 <_svfiprintf_r+0x1d8>
 8008fc6:	4b23      	ldr	r3, [pc, #140]	; (8009054 <_svfiprintf_r+0x1f4>)
 8008fc8:	bb1b      	cbnz	r3, 8009012 <_svfiprintf_r+0x1b2>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	3307      	adds	r3, #7
 8008fce:	f023 0307 	bic.w	r3, r3, #7
 8008fd2:	3308      	adds	r3, #8
 8008fd4:	9303      	str	r3, [sp, #12]
 8008fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd8:	4433      	add	r3, r6
 8008fda:	9309      	str	r3, [sp, #36]	; 0x24
 8008fdc:	e767      	b.n	8008eae <_svfiprintf_r+0x4e>
 8008fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	2001      	movs	r0, #1
 8008fe6:	e7a5      	b.n	8008f34 <_svfiprintf_r+0xd4>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	3401      	adds	r4, #1
 8008fec:	9305      	str	r3, [sp, #20]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	f04f 0c0a 	mov.w	ip, #10
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ffa:	3a30      	subs	r2, #48	; 0x30
 8008ffc:	2a09      	cmp	r2, #9
 8008ffe:	d903      	bls.n	8009008 <_svfiprintf_r+0x1a8>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0c5      	beq.n	8008f90 <_svfiprintf_r+0x130>
 8009004:	9105      	str	r1, [sp, #20]
 8009006:	e7c3      	b.n	8008f90 <_svfiprintf_r+0x130>
 8009008:	fb0c 2101 	mla	r1, ip, r1, r2
 800900c:	4604      	mov	r4, r0
 800900e:	2301      	movs	r3, #1
 8009010:	e7f0      	b.n	8008ff4 <_svfiprintf_r+0x194>
 8009012:	ab03      	add	r3, sp, #12
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	462a      	mov	r2, r5
 8009018:	4b0f      	ldr	r3, [pc, #60]	; (8009058 <_svfiprintf_r+0x1f8>)
 800901a:	a904      	add	r1, sp, #16
 800901c:	4638      	mov	r0, r7
 800901e:	f7fc fa85 	bl	800552c <_printf_float>
 8009022:	1c42      	adds	r2, r0, #1
 8009024:	4606      	mov	r6, r0
 8009026:	d1d6      	bne.n	8008fd6 <_svfiprintf_r+0x176>
 8009028:	89ab      	ldrh	r3, [r5, #12]
 800902a:	065b      	lsls	r3, r3, #25
 800902c:	f53f af2c 	bmi.w	8008e88 <_svfiprintf_r+0x28>
 8009030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009032:	b01d      	add	sp, #116	; 0x74
 8009034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009038:	ab03      	add	r3, sp, #12
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	462a      	mov	r2, r5
 800903e:	4b06      	ldr	r3, [pc, #24]	; (8009058 <_svfiprintf_r+0x1f8>)
 8009040:	a904      	add	r1, sp, #16
 8009042:	4638      	mov	r0, r7
 8009044:	f7fc fd16 	bl	8005a74 <_printf_i>
 8009048:	e7eb      	b.n	8009022 <_svfiprintf_r+0x1c2>
 800904a:	bf00      	nop
 800904c:	0800a0a4 	.word	0x0800a0a4
 8009050:	0800a0ae 	.word	0x0800a0ae
 8009054:	0800552d 	.word	0x0800552d
 8009058:	08008da9 	.word	0x08008da9
 800905c:	0800a0aa 	.word	0x0800a0aa

08009060 <nan>:
 8009060:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009068 <nan+0x8>
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	00000000 	.word	0x00000000
 800906c:	7ff80000 	.word	0x7ff80000

08009070 <_sbrk_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d06      	ldr	r5, [pc, #24]	; (800908c <_sbrk_r+0x1c>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	602b      	str	r3, [r5, #0]
 800907c:	f7f8 fd0a 	bl	8001a94 <_sbrk>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_sbrk_r+0x1a>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_sbrk_r+0x1a>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20000458 	.word	0x20000458

08009090 <strncmp>:
 8009090:	b510      	push	{r4, lr}
 8009092:	b16a      	cbz	r2, 80090b0 <strncmp+0x20>
 8009094:	3901      	subs	r1, #1
 8009096:	1884      	adds	r4, r0, r2
 8009098:	f810 3b01 	ldrb.w	r3, [r0], #1
 800909c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d103      	bne.n	80090ac <strncmp+0x1c>
 80090a4:	42a0      	cmp	r0, r4
 80090a6:	d001      	beq.n	80090ac <strncmp+0x1c>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1f5      	bne.n	8009098 <strncmp+0x8>
 80090ac:	1a98      	subs	r0, r3, r2
 80090ae:	bd10      	pop	{r4, pc}
 80090b0:	4610      	mov	r0, r2
 80090b2:	e7fc      	b.n	80090ae <strncmp+0x1e>

080090b4 <__ascii_wctomb>:
 80090b4:	b149      	cbz	r1, 80090ca <__ascii_wctomb+0x16>
 80090b6:	2aff      	cmp	r2, #255	; 0xff
 80090b8:	bf85      	ittet	hi
 80090ba:	238a      	movhi	r3, #138	; 0x8a
 80090bc:	6003      	strhi	r3, [r0, #0]
 80090be:	700a      	strbls	r2, [r1, #0]
 80090c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80090c4:	bf98      	it	ls
 80090c6:	2001      	movls	r0, #1
 80090c8:	4770      	bx	lr
 80090ca:	4608      	mov	r0, r1
 80090cc:	4770      	bx	lr
	...

080090d0 <__assert_func>:
 80090d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090d2:	4614      	mov	r4, r2
 80090d4:	461a      	mov	r2, r3
 80090d6:	4b09      	ldr	r3, [pc, #36]	; (80090fc <__assert_func+0x2c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4605      	mov	r5, r0
 80090dc:	68d8      	ldr	r0, [r3, #12]
 80090de:	b14c      	cbz	r4, 80090f4 <__assert_func+0x24>
 80090e0:	4b07      	ldr	r3, [pc, #28]	; (8009100 <__assert_func+0x30>)
 80090e2:	9100      	str	r1, [sp, #0]
 80090e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090e8:	4906      	ldr	r1, [pc, #24]	; (8009104 <__assert_func+0x34>)
 80090ea:	462b      	mov	r3, r5
 80090ec:	f000 f80e 	bl	800910c <fiprintf>
 80090f0:	f000 fa84 	bl	80095fc <abort>
 80090f4:	4b04      	ldr	r3, [pc, #16]	; (8009108 <__assert_func+0x38>)
 80090f6:	461c      	mov	r4, r3
 80090f8:	e7f3      	b.n	80090e2 <__assert_func+0x12>
 80090fa:	bf00      	nop
 80090fc:	20000010 	.word	0x20000010
 8009100:	0800a0b5 	.word	0x0800a0b5
 8009104:	0800a0c2 	.word	0x0800a0c2
 8009108:	0800a0f0 	.word	0x0800a0f0

0800910c <fiprintf>:
 800910c:	b40e      	push	{r1, r2, r3}
 800910e:	b503      	push	{r0, r1, lr}
 8009110:	4601      	mov	r1, r0
 8009112:	ab03      	add	r3, sp, #12
 8009114:	4805      	ldr	r0, [pc, #20]	; (800912c <fiprintf+0x20>)
 8009116:	f853 2b04 	ldr.w	r2, [r3], #4
 800911a:	6800      	ldr	r0, [r0, #0]
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	f000 f87d 	bl	800921c <_vfiprintf_r>
 8009122:	b002      	add	sp, #8
 8009124:	f85d eb04 	ldr.w	lr, [sp], #4
 8009128:	b003      	add	sp, #12
 800912a:	4770      	bx	lr
 800912c:	20000010 	.word	0x20000010

08009130 <memmove>:
 8009130:	4288      	cmp	r0, r1
 8009132:	b510      	push	{r4, lr}
 8009134:	eb01 0402 	add.w	r4, r1, r2
 8009138:	d902      	bls.n	8009140 <memmove+0x10>
 800913a:	4284      	cmp	r4, r0
 800913c:	4623      	mov	r3, r4
 800913e:	d807      	bhi.n	8009150 <memmove+0x20>
 8009140:	1e43      	subs	r3, r0, #1
 8009142:	42a1      	cmp	r1, r4
 8009144:	d008      	beq.n	8009158 <memmove+0x28>
 8009146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800914a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800914e:	e7f8      	b.n	8009142 <memmove+0x12>
 8009150:	4402      	add	r2, r0
 8009152:	4601      	mov	r1, r0
 8009154:	428a      	cmp	r2, r1
 8009156:	d100      	bne.n	800915a <memmove+0x2a>
 8009158:	bd10      	pop	{r4, pc}
 800915a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800915e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009162:	e7f7      	b.n	8009154 <memmove+0x24>

08009164 <__malloc_lock>:
 8009164:	4801      	ldr	r0, [pc, #4]	; (800916c <__malloc_lock+0x8>)
 8009166:	f000 bc09 	b.w	800997c <__retarget_lock_acquire_recursive>
 800916a:	bf00      	nop
 800916c:	20000460 	.word	0x20000460

08009170 <__malloc_unlock>:
 8009170:	4801      	ldr	r0, [pc, #4]	; (8009178 <__malloc_unlock+0x8>)
 8009172:	f000 bc04 	b.w	800997e <__retarget_lock_release_recursive>
 8009176:	bf00      	nop
 8009178:	20000460 	.word	0x20000460

0800917c <_realloc_r>:
 800917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917e:	4607      	mov	r7, r0
 8009180:	4614      	mov	r4, r2
 8009182:	460e      	mov	r6, r1
 8009184:	b921      	cbnz	r1, 8009190 <_realloc_r+0x14>
 8009186:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800918a:	4611      	mov	r1, r2
 800918c:	f7ff bdb2 	b.w	8008cf4 <_malloc_r>
 8009190:	b922      	cbnz	r2, 800919c <_realloc_r+0x20>
 8009192:	f7ff fd5f 	bl	8008c54 <_free_r>
 8009196:	4625      	mov	r5, r4
 8009198:	4628      	mov	r0, r5
 800919a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800919c:	f000 fc54 	bl	8009a48 <_malloc_usable_size_r>
 80091a0:	42a0      	cmp	r0, r4
 80091a2:	d20f      	bcs.n	80091c4 <_realloc_r+0x48>
 80091a4:	4621      	mov	r1, r4
 80091a6:	4638      	mov	r0, r7
 80091a8:	f7ff fda4 	bl	8008cf4 <_malloc_r>
 80091ac:	4605      	mov	r5, r0
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d0f2      	beq.n	8009198 <_realloc_r+0x1c>
 80091b2:	4631      	mov	r1, r6
 80091b4:	4622      	mov	r2, r4
 80091b6:	f7ff f875 	bl	80082a4 <memcpy>
 80091ba:	4631      	mov	r1, r6
 80091bc:	4638      	mov	r0, r7
 80091be:	f7ff fd49 	bl	8008c54 <_free_r>
 80091c2:	e7e9      	b.n	8009198 <_realloc_r+0x1c>
 80091c4:	4635      	mov	r5, r6
 80091c6:	e7e7      	b.n	8009198 <_realloc_r+0x1c>

080091c8 <__sfputc_r>:
 80091c8:	6893      	ldr	r3, [r2, #8]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	b410      	push	{r4}
 80091d0:	6093      	str	r3, [r2, #8]
 80091d2:	da08      	bge.n	80091e6 <__sfputc_r+0x1e>
 80091d4:	6994      	ldr	r4, [r2, #24]
 80091d6:	42a3      	cmp	r3, r4
 80091d8:	db01      	blt.n	80091de <__sfputc_r+0x16>
 80091da:	290a      	cmp	r1, #10
 80091dc:	d103      	bne.n	80091e6 <__sfputc_r+0x1e>
 80091de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e2:	f000 b94b 	b.w	800947c <__swbuf_r>
 80091e6:	6813      	ldr	r3, [r2, #0]
 80091e8:	1c58      	adds	r0, r3, #1
 80091ea:	6010      	str	r0, [r2, #0]
 80091ec:	7019      	strb	r1, [r3, #0]
 80091ee:	4608      	mov	r0, r1
 80091f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <__sfputs_r>:
 80091f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f8:	4606      	mov	r6, r0
 80091fa:	460f      	mov	r7, r1
 80091fc:	4614      	mov	r4, r2
 80091fe:	18d5      	adds	r5, r2, r3
 8009200:	42ac      	cmp	r4, r5
 8009202:	d101      	bne.n	8009208 <__sfputs_r+0x12>
 8009204:	2000      	movs	r0, #0
 8009206:	e007      	b.n	8009218 <__sfputs_r+0x22>
 8009208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920c:	463a      	mov	r2, r7
 800920e:	4630      	mov	r0, r6
 8009210:	f7ff ffda 	bl	80091c8 <__sfputc_r>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d1f3      	bne.n	8009200 <__sfputs_r+0xa>
 8009218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800921c <_vfiprintf_r>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	460d      	mov	r5, r1
 8009222:	b09d      	sub	sp, #116	; 0x74
 8009224:	4614      	mov	r4, r2
 8009226:	4698      	mov	r8, r3
 8009228:	4606      	mov	r6, r0
 800922a:	b118      	cbz	r0, 8009234 <_vfiprintf_r+0x18>
 800922c:	6983      	ldr	r3, [r0, #24]
 800922e:	b90b      	cbnz	r3, 8009234 <_vfiprintf_r+0x18>
 8009230:	f000 fb06 	bl	8009840 <__sinit>
 8009234:	4b89      	ldr	r3, [pc, #548]	; (800945c <_vfiprintf_r+0x240>)
 8009236:	429d      	cmp	r5, r3
 8009238:	d11b      	bne.n	8009272 <_vfiprintf_r+0x56>
 800923a:	6875      	ldr	r5, [r6, #4]
 800923c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800923e:	07d9      	lsls	r1, r3, #31
 8009240:	d405      	bmi.n	800924e <_vfiprintf_r+0x32>
 8009242:	89ab      	ldrh	r3, [r5, #12]
 8009244:	059a      	lsls	r2, r3, #22
 8009246:	d402      	bmi.n	800924e <_vfiprintf_r+0x32>
 8009248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800924a:	f000 fb97 	bl	800997c <__retarget_lock_acquire_recursive>
 800924e:	89ab      	ldrh	r3, [r5, #12]
 8009250:	071b      	lsls	r3, r3, #28
 8009252:	d501      	bpl.n	8009258 <_vfiprintf_r+0x3c>
 8009254:	692b      	ldr	r3, [r5, #16]
 8009256:	b9eb      	cbnz	r3, 8009294 <_vfiprintf_r+0x78>
 8009258:	4629      	mov	r1, r5
 800925a:	4630      	mov	r0, r6
 800925c:	f000 f960 	bl	8009520 <__swsetup_r>
 8009260:	b1c0      	cbz	r0, 8009294 <_vfiprintf_r+0x78>
 8009262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009264:	07dc      	lsls	r4, r3, #31
 8009266:	d50e      	bpl.n	8009286 <_vfiprintf_r+0x6a>
 8009268:	f04f 30ff 	mov.w	r0, #4294967295
 800926c:	b01d      	add	sp, #116	; 0x74
 800926e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009272:	4b7b      	ldr	r3, [pc, #492]	; (8009460 <_vfiprintf_r+0x244>)
 8009274:	429d      	cmp	r5, r3
 8009276:	d101      	bne.n	800927c <_vfiprintf_r+0x60>
 8009278:	68b5      	ldr	r5, [r6, #8]
 800927a:	e7df      	b.n	800923c <_vfiprintf_r+0x20>
 800927c:	4b79      	ldr	r3, [pc, #484]	; (8009464 <_vfiprintf_r+0x248>)
 800927e:	429d      	cmp	r5, r3
 8009280:	bf08      	it	eq
 8009282:	68f5      	ldreq	r5, [r6, #12]
 8009284:	e7da      	b.n	800923c <_vfiprintf_r+0x20>
 8009286:	89ab      	ldrh	r3, [r5, #12]
 8009288:	0598      	lsls	r0, r3, #22
 800928a:	d4ed      	bmi.n	8009268 <_vfiprintf_r+0x4c>
 800928c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800928e:	f000 fb76 	bl	800997e <__retarget_lock_release_recursive>
 8009292:	e7e9      	b.n	8009268 <_vfiprintf_r+0x4c>
 8009294:	2300      	movs	r3, #0
 8009296:	9309      	str	r3, [sp, #36]	; 0x24
 8009298:	2320      	movs	r3, #32
 800929a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800929e:	f8cd 800c 	str.w	r8, [sp, #12]
 80092a2:	2330      	movs	r3, #48	; 0x30
 80092a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009468 <_vfiprintf_r+0x24c>
 80092a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092ac:	f04f 0901 	mov.w	r9, #1
 80092b0:	4623      	mov	r3, r4
 80092b2:	469a      	mov	sl, r3
 80092b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092b8:	b10a      	cbz	r2, 80092be <_vfiprintf_r+0xa2>
 80092ba:	2a25      	cmp	r2, #37	; 0x25
 80092bc:	d1f9      	bne.n	80092b2 <_vfiprintf_r+0x96>
 80092be:	ebba 0b04 	subs.w	fp, sl, r4
 80092c2:	d00b      	beq.n	80092dc <_vfiprintf_r+0xc0>
 80092c4:	465b      	mov	r3, fp
 80092c6:	4622      	mov	r2, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ff93 	bl	80091f6 <__sfputs_r>
 80092d0:	3001      	adds	r0, #1
 80092d2:	f000 80aa 	beq.w	800942a <_vfiprintf_r+0x20e>
 80092d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092d8:	445a      	add	r2, fp
 80092da:	9209      	str	r2, [sp, #36]	; 0x24
 80092dc:	f89a 3000 	ldrb.w	r3, [sl]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 80a2 	beq.w	800942a <_vfiprintf_r+0x20e>
 80092e6:	2300      	movs	r3, #0
 80092e8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092f0:	f10a 0a01 	add.w	sl, sl, #1
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	9307      	str	r3, [sp, #28]
 80092f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092fc:	931a      	str	r3, [sp, #104]	; 0x68
 80092fe:	4654      	mov	r4, sl
 8009300:	2205      	movs	r2, #5
 8009302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009306:	4858      	ldr	r0, [pc, #352]	; (8009468 <_vfiprintf_r+0x24c>)
 8009308:	f7f6 ff72 	bl	80001f0 <memchr>
 800930c:	9a04      	ldr	r2, [sp, #16]
 800930e:	b9d8      	cbnz	r0, 8009348 <_vfiprintf_r+0x12c>
 8009310:	06d1      	lsls	r1, r2, #27
 8009312:	bf44      	itt	mi
 8009314:	2320      	movmi	r3, #32
 8009316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800931a:	0713      	lsls	r3, r2, #28
 800931c:	bf44      	itt	mi
 800931e:	232b      	movmi	r3, #43	; 0x2b
 8009320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009324:	f89a 3000 	ldrb.w	r3, [sl]
 8009328:	2b2a      	cmp	r3, #42	; 0x2a
 800932a:	d015      	beq.n	8009358 <_vfiprintf_r+0x13c>
 800932c:	9a07      	ldr	r2, [sp, #28]
 800932e:	4654      	mov	r4, sl
 8009330:	2000      	movs	r0, #0
 8009332:	f04f 0c0a 	mov.w	ip, #10
 8009336:	4621      	mov	r1, r4
 8009338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800933c:	3b30      	subs	r3, #48	; 0x30
 800933e:	2b09      	cmp	r3, #9
 8009340:	d94e      	bls.n	80093e0 <_vfiprintf_r+0x1c4>
 8009342:	b1b0      	cbz	r0, 8009372 <_vfiprintf_r+0x156>
 8009344:	9207      	str	r2, [sp, #28]
 8009346:	e014      	b.n	8009372 <_vfiprintf_r+0x156>
 8009348:	eba0 0308 	sub.w	r3, r0, r8
 800934c:	fa09 f303 	lsl.w	r3, r9, r3
 8009350:	4313      	orrs	r3, r2
 8009352:	9304      	str	r3, [sp, #16]
 8009354:	46a2      	mov	sl, r4
 8009356:	e7d2      	b.n	80092fe <_vfiprintf_r+0xe2>
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	1d19      	adds	r1, r3, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	9103      	str	r1, [sp, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	bfbb      	ittet	lt
 8009364:	425b      	neglt	r3, r3
 8009366:	f042 0202 	orrlt.w	r2, r2, #2
 800936a:	9307      	strge	r3, [sp, #28]
 800936c:	9307      	strlt	r3, [sp, #28]
 800936e:	bfb8      	it	lt
 8009370:	9204      	strlt	r2, [sp, #16]
 8009372:	7823      	ldrb	r3, [r4, #0]
 8009374:	2b2e      	cmp	r3, #46	; 0x2e
 8009376:	d10c      	bne.n	8009392 <_vfiprintf_r+0x176>
 8009378:	7863      	ldrb	r3, [r4, #1]
 800937a:	2b2a      	cmp	r3, #42	; 0x2a
 800937c:	d135      	bne.n	80093ea <_vfiprintf_r+0x1ce>
 800937e:	9b03      	ldr	r3, [sp, #12]
 8009380:	1d1a      	adds	r2, r3, #4
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	9203      	str	r2, [sp, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	bfb8      	it	lt
 800938a:	f04f 33ff 	movlt.w	r3, #4294967295
 800938e:	3402      	adds	r4, #2
 8009390:	9305      	str	r3, [sp, #20]
 8009392:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009478 <_vfiprintf_r+0x25c>
 8009396:	7821      	ldrb	r1, [r4, #0]
 8009398:	2203      	movs	r2, #3
 800939a:	4650      	mov	r0, sl
 800939c:	f7f6 ff28 	bl	80001f0 <memchr>
 80093a0:	b140      	cbz	r0, 80093b4 <_vfiprintf_r+0x198>
 80093a2:	2340      	movs	r3, #64	; 0x40
 80093a4:	eba0 000a 	sub.w	r0, r0, sl
 80093a8:	fa03 f000 	lsl.w	r0, r3, r0
 80093ac:	9b04      	ldr	r3, [sp, #16]
 80093ae:	4303      	orrs	r3, r0
 80093b0:	3401      	adds	r4, #1
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b8:	482c      	ldr	r0, [pc, #176]	; (800946c <_vfiprintf_r+0x250>)
 80093ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093be:	2206      	movs	r2, #6
 80093c0:	f7f6 ff16 	bl	80001f0 <memchr>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d03f      	beq.n	8009448 <_vfiprintf_r+0x22c>
 80093c8:	4b29      	ldr	r3, [pc, #164]	; (8009470 <_vfiprintf_r+0x254>)
 80093ca:	bb1b      	cbnz	r3, 8009414 <_vfiprintf_r+0x1f8>
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	3307      	adds	r3, #7
 80093d0:	f023 0307 	bic.w	r3, r3, #7
 80093d4:	3308      	adds	r3, #8
 80093d6:	9303      	str	r3, [sp, #12]
 80093d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093da:	443b      	add	r3, r7
 80093dc:	9309      	str	r3, [sp, #36]	; 0x24
 80093de:	e767      	b.n	80092b0 <_vfiprintf_r+0x94>
 80093e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80093e4:	460c      	mov	r4, r1
 80093e6:	2001      	movs	r0, #1
 80093e8:	e7a5      	b.n	8009336 <_vfiprintf_r+0x11a>
 80093ea:	2300      	movs	r3, #0
 80093ec:	3401      	adds	r4, #1
 80093ee:	9305      	str	r3, [sp, #20]
 80093f0:	4619      	mov	r1, r3
 80093f2:	f04f 0c0a 	mov.w	ip, #10
 80093f6:	4620      	mov	r0, r4
 80093f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093fc:	3a30      	subs	r2, #48	; 0x30
 80093fe:	2a09      	cmp	r2, #9
 8009400:	d903      	bls.n	800940a <_vfiprintf_r+0x1ee>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0c5      	beq.n	8009392 <_vfiprintf_r+0x176>
 8009406:	9105      	str	r1, [sp, #20]
 8009408:	e7c3      	b.n	8009392 <_vfiprintf_r+0x176>
 800940a:	fb0c 2101 	mla	r1, ip, r1, r2
 800940e:	4604      	mov	r4, r0
 8009410:	2301      	movs	r3, #1
 8009412:	e7f0      	b.n	80093f6 <_vfiprintf_r+0x1da>
 8009414:	ab03      	add	r3, sp, #12
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	462a      	mov	r2, r5
 800941a:	4b16      	ldr	r3, [pc, #88]	; (8009474 <_vfiprintf_r+0x258>)
 800941c:	a904      	add	r1, sp, #16
 800941e:	4630      	mov	r0, r6
 8009420:	f7fc f884 	bl	800552c <_printf_float>
 8009424:	4607      	mov	r7, r0
 8009426:	1c78      	adds	r0, r7, #1
 8009428:	d1d6      	bne.n	80093d8 <_vfiprintf_r+0x1bc>
 800942a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800942c:	07d9      	lsls	r1, r3, #31
 800942e:	d405      	bmi.n	800943c <_vfiprintf_r+0x220>
 8009430:	89ab      	ldrh	r3, [r5, #12]
 8009432:	059a      	lsls	r2, r3, #22
 8009434:	d402      	bmi.n	800943c <_vfiprintf_r+0x220>
 8009436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009438:	f000 faa1 	bl	800997e <__retarget_lock_release_recursive>
 800943c:	89ab      	ldrh	r3, [r5, #12]
 800943e:	065b      	lsls	r3, r3, #25
 8009440:	f53f af12 	bmi.w	8009268 <_vfiprintf_r+0x4c>
 8009444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009446:	e711      	b.n	800926c <_vfiprintf_r+0x50>
 8009448:	ab03      	add	r3, sp, #12
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	462a      	mov	r2, r5
 800944e:	4b09      	ldr	r3, [pc, #36]	; (8009474 <_vfiprintf_r+0x258>)
 8009450:	a904      	add	r1, sp, #16
 8009452:	4630      	mov	r0, r6
 8009454:	f7fc fb0e 	bl	8005a74 <_printf_i>
 8009458:	e7e4      	b.n	8009424 <_vfiprintf_r+0x208>
 800945a:	bf00      	nop
 800945c:	0800a114 	.word	0x0800a114
 8009460:	0800a134 	.word	0x0800a134
 8009464:	0800a0f4 	.word	0x0800a0f4
 8009468:	0800a0a4 	.word	0x0800a0a4
 800946c:	0800a0ae 	.word	0x0800a0ae
 8009470:	0800552d 	.word	0x0800552d
 8009474:	080091f7 	.word	0x080091f7
 8009478:	0800a0aa 	.word	0x0800a0aa

0800947c <__swbuf_r>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	460e      	mov	r6, r1
 8009480:	4614      	mov	r4, r2
 8009482:	4605      	mov	r5, r0
 8009484:	b118      	cbz	r0, 800948e <__swbuf_r+0x12>
 8009486:	6983      	ldr	r3, [r0, #24]
 8009488:	b90b      	cbnz	r3, 800948e <__swbuf_r+0x12>
 800948a:	f000 f9d9 	bl	8009840 <__sinit>
 800948e:	4b21      	ldr	r3, [pc, #132]	; (8009514 <__swbuf_r+0x98>)
 8009490:	429c      	cmp	r4, r3
 8009492:	d12b      	bne.n	80094ec <__swbuf_r+0x70>
 8009494:	686c      	ldr	r4, [r5, #4]
 8009496:	69a3      	ldr	r3, [r4, #24]
 8009498:	60a3      	str	r3, [r4, #8]
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	071a      	lsls	r2, r3, #28
 800949e:	d52f      	bpl.n	8009500 <__swbuf_r+0x84>
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	b36b      	cbz	r3, 8009500 <__swbuf_r+0x84>
 80094a4:	6923      	ldr	r3, [r4, #16]
 80094a6:	6820      	ldr	r0, [r4, #0]
 80094a8:	1ac0      	subs	r0, r0, r3
 80094aa:	6963      	ldr	r3, [r4, #20]
 80094ac:	b2f6      	uxtb	r6, r6
 80094ae:	4283      	cmp	r3, r0
 80094b0:	4637      	mov	r7, r6
 80094b2:	dc04      	bgt.n	80094be <__swbuf_r+0x42>
 80094b4:	4621      	mov	r1, r4
 80094b6:	4628      	mov	r0, r5
 80094b8:	f000 f92e 	bl	8009718 <_fflush_r>
 80094bc:	bb30      	cbnz	r0, 800950c <__swbuf_r+0x90>
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	60a3      	str	r3, [r4, #8]
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	6022      	str	r2, [r4, #0]
 80094ca:	701e      	strb	r6, [r3, #0]
 80094cc:	6963      	ldr	r3, [r4, #20]
 80094ce:	3001      	adds	r0, #1
 80094d0:	4283      	cmp	r3, r0
 80094d2:	d004      	beq.n	80094de <__swbuf_r+0x62>
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	07db      	lsls	r3, r3, #31
 80094d8:	d506      	bpl.n	80094e8 <__swbuf_r+0x6c>
 80094da:	2e0a      	cmp	r6, #10
 80094dc:	d104      	bne.n	80094e8 <__swbuf_r+0x6c>
 80094de:	4621      	mov	r1, r4
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 f919 	bl	8009718 <_fflush_r>
 80094e6:	b988      	cbnz	r0, 800950c <__swbuf_r+0x90>
 80094e8:	4638      	mov	r0, r7
 80094ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ec:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <__swbuf_r+0x9c>)
 80094ee:	429c      	cmp	r4, r3
 80094f0:	d101      	bne.n	80094f6 <__swbuf_r+0x7a>
 80094f2:	68ac      	ldr	r4, [r5, #8]
 80094f4:	e7cf      	b.n	8009496 <__swbuf_r+0x1a>
 80094f6:	4b09      	ldr	r3, [pc, #36]	; (800951c <__swbuf_r+0xa0>)
 80094f8:	429c      	cmp	r4, r3
 80094fa:	bf08      	it	eq
 80094fc:	68ec      	ldreq	r4, [r5, #12]
 80094fe:	e7ca      	b.n	8009496 <__swbuf_r+0x1a>
 8009500:	4621      	mov	r1, r4
 8009502:	4628      	mov	r0, r5
 8009504:	f000 f80c 	bl	8009520 <__swsetup_r>
 8009508:	2800      	cmp	r0, #0
 800950a:	d0cb      	beq.n	80094a4 <__swbuf_r+0x28>
 800950c:	f04f 37ff 	mov.w	r7, #4294967295
 8009510:	e7ea      	b.n	80094e8 <__swbuf_r+0x6c>
 8009512:	bf00      	nop
 8009514:	0800a114 	.word	0x0800a114
 8009518:	0800a134 	.word	0x0800a134
 800951c:	0800a0f4 	.word	0x0800a0f4

08009520 <__swsetup_r>:
 8009520:	4b32      	ldr	r3, [pc, #200]	; (80095ec <__swsetup_r+0xcc>)
 8009522:	b570      	push	{r4, r5, r6, lr}
 8009524:	681d      	ldr	r5, [r3, #0]
 8009526:	4606      	mov	r6, r0
 8009528:	460c      	mov	r4, r1
 800952a:	b125      	cbz	r5, 8009536 <__swsetup_r+0x16>
 800952c:	69ab      	ldr	r3, [r5, #24]
 800952e:	b913      	cbnz	r3, 8009536 <__swsetup_r+0x16>
 8009530:	4628      	mov	r0, r5
 8009532:	f000 f985 	bl	8009840 <__sinit>
 8009536:	4b2e      	ldr	r3, [pc, #184]	; (80095f0 <__swsetup_r+0xd0>)
 8009538:	429c      	cmp	r4, r3
 800953a:	d10f      	bne.n	800955c <__swsetup_r+0x3c>
 800953c:	686c      	ldr	r4, [r5, #4]
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009544:	0719      	lsls	r1, r3, #28
 8009546:	d42c      	bmi.n	80095a2 <__swsetup_r+0x82>
 8009548:	06dd      	lsls	r5, r3, #27
 800954a:	d411      	bmi.n	8009570 <__swsetup_r+0x50>
 800954c:	2309      	movs	r3, #9
 800954e:	6033      	str	r3, [r6, #0]
 8009550:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009554:	81a3      	strh	r3, [r4, #12]
 8009556:	f04f 30ff 	mov.w	r0, #4294967295
 800955a:	e03e      	b.n	80095da <__swsetup_r+0xba>
 800955c:	4b25      	ldr	r3, [pc, #148]	; (80095f4 <__swsetup_r+0xd4>)
 800955e:	429c      	cmp	r4, r3
 8009560:	d101      	bne.n	8009566 <__swsetup_r+0x46>
 8009562:	68ac      	ldr	r4, [r5, #8]
 8009564:	e7eb      	b.n	800953e <__swsetup_r+0x1e>
 8009566:	4b24      	ldr	r3, [pc, #144]	; (80095f8 <__swsetup_r+0xd8>)
 8009568:	429c      	cmp	r4, r3
 800956a:	bf08      	it	eq
 800956c:	68ec      	ldreq	r4, [r5, #12]
 800956e:	e7e6      	b.n	800953e <__swsetup_r+0x1e>
 8009570:	0758      	lsls	r0, r3, #29
 8009572:	d512      	bpl.n	800959a <__swsetup_r+0x7a>
 8009574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009576:	b141      	cbz	r1, 800958a <__swsetup_r+0x6a>
 8009578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800957c:	4299      	cmp	r1, r3
 800957e:	d002      	beq.n	8009586 <__swsetup_r+0x66>
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff fb67 	bl	8008c54 <_free_r>
 8009586:	2300      	movs	r3, #0
 8009588:	6363      	str	r3, [r4, #52]	; 0x34
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009590:	81a3      	strh	r3, [r4, #12]
 8009592:	2300      	movs	r3, #0
 8009594:	6063      	str	r3, [r4, #4]
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	f043 0308 	orr.w	r3, r3, #8
 80095a0:	81a3      	strh	r3, [r4, #12]
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	b94b      	cbnz	r3, 80095ba <__swsetup_r+0x9a>
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095b0:	d003      	beq.n	80095ba <__swsetup_r+0x9a>
 80095b2:	4621      	mov	r1, r4
 80095b4:	4630      	mov	r0, r6
 80095b6:	f000 fa07 	bl	80099c8 <__smakebuf_r>
 80095ba:	89a0      	ldrh	r0, [r4, #12]
 80095bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095c0:	f010 0301 	ands.w	r3, r0, #1
 80095c4:	d00a      	beq.n	80095dc <__swsetup_r+0xbc>
 80095c6:	2300      	movs	r3, #0
 80095c8:	60a3      	str	r3, [r4, #8]
 80095ca:	6963      	ldr	r3, [r4, #20]
 80095cc:	425b      	negs	r3, r3
 80095ce:	61a3      	str	r3, [r4, #24]
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	b943      	cbnz	r3, 80095e6 <__swsetup_r+0xc6>
 80095d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095d8:	d1ba      	bne.n	8009550 <__swsetup_r+0x30>
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	0781      	lsls	r1, r0, #30
 80095de:	bf58      	it	pl
 80095e0:	6963      	ldrpl	r3, [r4, #20]
 80095e2:	60a3      	str	r3, [r4, #8]
 80095e4:	e7f4      	b.n	80095d0 <__swsetup_r+0xb0>
 80095e6:	2000      	movs	r0, #0
 80095e8:	e7f7      	b.n	80095da <__swsetup_r+0xba>
 80095ea:	bf00      	nop
 80095ec:	20000010 	.word	0x20000010
 80095f0:	0800a114 	.word	0x0800a114
 80095f4:	0800a134 	.word	0x0800a134
 80095f8:	0800a0f4 	.word	0x0800a0f4

080095fc <abort>:
 80095fc:	b508      	push	{r3, lr}
 80095fe:	2006      	movs	r0, #6
 8009600:	f000 fa52 	bl	8009aa8 <raise>
 8009604:	2001      	movs	r0, #1
 8009606:	f7f8 f9cd 	bl	80019a4 <_exit>
	...

0800960c <__sflush_r>:
 800960c:	898a      	ldrh	r2, [r1, #12]
 800960e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009612:	4605      	mov	r5, r0
 8009614:	0710      	lsls	r0, r2, #28
 8009616:	460c      	mov	r4, r1
 8009618:	d458      	bmi.n	80096cc <__sflush_r+0xc0>
 800961a:	684b      	ldr	r3, [r1, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	dc05      	bgt.n	800962c <__sflush_r+0x20>
 8009620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009622:	2b00      	cmp	r3, #0
 8009624:	dc02      	bgt.n	800962c <__sflush_r+0x20>
 8009626:	2000      	movs	r0, #0
 8009628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800962c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800962e:	2e00      	cmp	r6, #0
 8009630:	d0f9      	beq.n	8009626 <__sflush_r+0x1a>
 8009632:	2300      	movs	r3, #0
 8009634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009638:	682f      	ldr	r7, [r5, #0]
 800963a:	602b      	str	r3, [r5, #0]
 800963c:	d032      	beq.n	80096a4 <__sflush_r+0x98>
 800963e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	075a      	lsls	r2, r3, #29
 8009644:	d505      	bpl.n	8009652 <__sflush_r+0x46>
 8009646:	6863      	ldr	r3, [r4, #4]
 8009648:	1ac0      	subs	r0, r0, r3
 800964a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800964c:	b10b      	cbz	r3, 8009652 <__sflush_r+0x46>
 800964e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009650:	1ac0      	subs	r0, r0, r3
 8009652:	2300      	movs	r3, #0
 8009654:	4602      	mov	r2, r0
 8009656:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009658:	6a21      	ldr	r1, [r4, #32]
 800965a:	4628      	mov	r0, r5
 800965c:	47b0      	blx	r6
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	d106      	bne.n	8009672 <__sflush_r+0x66>
 8009664:	6829      	ldr	r1, [r5, #0]
 8009666:	291d      	cmp	r1, #29
 8009668:	d82c      	bhi.n	80096c4 <__sflush_r+0xb8>
 800966a:	4a2a      	ldr	r2, [pc, #168]	; (8009714 <__sflush_r+0x108>)
 800966c:	40ca      	lsrs	r2, r1
 800966e:	07d6      	lsls	r6, r2, #31
 8009670:	d528      	bpl.n	80096c4 <__sflush_r+0xb8>
 8009672:	2200      	movs	r2, #0
 8009674:	6062      	str	r2, [r4, #4]
 8009676:	04d9      	lsls	r1, r3, #19
 8009678:	6922      	ldr	r2, [r4, #16]
 800967a:	6022      	str	r2, [r4, #0]
 800967c:	d504      	bpl.n	8009688 <__sflush_r+0x7c>
 800967e:	1c42      	adds	r2, r0, #1
 8009680:	d101      	bne.n	8009686 <__sflush_r+0x7a>
 8009682:	682b      	ldr	r3, [r5, #0]
 8009684:	b903      	cbnz	r3, 8009688 <__sflush_r+0x7c>
 8009686:	6560      	str	r0, [r4, #84]	; 0x54
 8009688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800968a:	602f      	str	r7, [r5, #0]
 800968c:	2900      	cmp	r1, #0
 800968e:	d0ca      	beq.n	8009626 <__sflush_r+0x1a>
 8009690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009694:	4299      	cmp	r1, r3
 8009696:	d002      	beq.n	800969e <__sflush_r+0x92>
 8009698:	4628      	mov	r0, r5
 800969a:	f7ff fadb 	bl	8008c54 <_free_r>
 800969e:	2000      	movs	r0, #0
 80096a0:	6360      	str	r0, [r4, #52]	; 0x34
 80096a2:	e7c1      	b.n	8009628 <__sflush_r+0x1c>
 80096a4:	6a21      	ldr	r1, [r4, #32]
 80096a6:	2301      	movs	r3, #1
 80096a8:	4628      	mov	r0, r5
 80096aa:	47b0      	blx	r6
 80096ac:	1c41      	adds	r1, r0, #1
 80096ae:	d1c7      	bne.n	8009640 <__sflush_r+0x34>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0c4      	beq.n	8009640 <__sflush_r+0x34>
 80096b6:	2b1d      	cmp	r3, #29
 80096b8:	d001      	beq.n	80096be <__sflush_r+0xb2>
 80096ba:	2b16      	cmp	r3, #22
 80096bc:	d101      	bne.n	80096c2 <__sflush_r+0xb6>
 80096be:	602f      	str	r7, [r5, #0]
 80096c0:	e7b1      	b.n	8009626 <__sflush_r+0x1a>
 80096c2:	89a3      	ldrh	r3, [r4, #12]
 80096c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c8:	81a3      	strh	r3, [r4, #12]
 80096ca:	e7ad      	b.n	8009628 <__sflush_r+0x1c>
 80096cc:	690f      	ldr	r7, [r1, #16]
 80096ce:	2f00      	cmp	r7, #0
 80096d0:	d0a9      	beq.n	8009626 <__sflush_r+0x1a>
 80096d2:	0793      	lsls	r3, r2, #30
 80096d4:	680e      	ldr	r6, [r1, #0]
 80096d6:	bf08      	it	eq
 80096d8:	694b      	ldreq	r3, [r1, #20]
 80096da:	600f      	str	r7, [r1, #0]
 80096dc:	bf18      	it	ne
 80096de:	2300      	movne	r3, #0
 80096e0:	eba6 0807 	sub.w	r8, r6, r7
 80096e4:	608b      	str	r3, [r1, #8]
 80096e6:	f1b8 0f00 	cmp.w	r8, #0
 80096ea:	dd9c      	ble.n	8009626 <__sflush_r+0x1a>
 80096ec:	6a21      	ldr	r1, [r4, #32]
 80096ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096f0:	4643      	mov	r3, r8
 80096f2:	463a      	mov	r2, r7
 80096f4:	4628      	mov	r0, r5
 80096f6:	47b0      	blx	r6
 80096f8:	2800      	cmp	r0, #0
 80096fa:	dc06      	bgt.n	800970a <__sflush_r+0xfe>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	f04f 30ff 	mov.w	r0, #4294967295
 8009708:	e78e      	b.n	8009628 <__sflush_r+0x1c>
 800970a:	4407      	add	r7, r0
 800970c:	eba8 0800 	sub.w	r8, r8, r0
 8009710:	e7e9      	b.n	80096e6 <__sflush_r+0xda>
 8009712:	bf00      	nop
 8009714:	20400001 	.word	0x20400001

08009718 <_fflush_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	690b      	ldr	r3, [r1, #16]
 800971c:	4605      	mov	r5, r0
 800971e:	460c      	mov	r4, r1
 8009720:	b913      	cbnz	r3, 8009728 <_fflush_r+0x10>
 8009722:	2500      	movs	r5, #0
 8009724:	4628      	mov	r0, r5
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	b118      	cbz	r0, 8009732 <_fflush_r+0x1a>
 800972a:	6983      	ldr	r3, [r0, #24]
 800972c:	b90b      	cbnz	r3, 8009732 <_fflush_r+0x1a>
 800972e:	f000 f887 	bl	8009840 <__sinit>
 8009732:	4b14      	ldr	r3, [pc, #80]	; (8009784 <_fflush_r+0x6c>)
 8009734:	429c      	cmp	r4, r3
 8009736:	d11b      	bne.n	8009770 <_fflush_r+0x58>
 8009738:	686c      	ldr	r4, [r5, #4]
 800973a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0ef      	beq.n	8009722 <_fflush_r+0xa>
 8009742:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009744:	07d0      	lsls	r0, r2, #31
 8009746:	d404      	bmi.n	8009752 <_fflush_r+0x3a>
 8009748:	0599      	lsls	r1, r3, #22
 800974a:	d402      	bmi.n	8009752 <_fflush_r+0x3a>
 800974c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800974e:	f000 f915 	bl	800997c <__retarget_lock_acquire_recursive>
 8009752:	4628      	mov	r0, r5
 8009754:	4621      	mov	r1, r4
 8009756:	f7ff ff59 	bl	800960c <__sflush_r>
 800975a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800975c:	07da      	lsls	r2, r3, #31
 800975e:	4605      	mov	r5, r0
 8009760:	d4e0      	bmi.n	8009724 <_fflush_r+0xc>
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	059b      	lsls	r3, r3, #22
 8009766:	d4dd      	bmi.n	8009724 <_fflush_r+0xc>
 8009768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800976a:	f000 f908 	bl	800997e <__retarget_lock_release_recursive>
 800976e:	e7d9      	b.n	8009724 <_fflush_r+0xc>
 8009770:	4b05      	ldr	r3, [pc, #20]	; (8009788 <_fflush_r+0x70>)
 8009772:	429c      	cmp	r4, r3
 8009774:	d101      	bne.n	800977a <_fflush_r+0x62>
 8009776:	68ac      	ldr	r4, [r5, #8]
 8009778:	e7df      	b.n	800973a <_fflush_r+0x22>
 800977a:	4b04      	ldr	r3, [pc, #16]	; (800978c <_fflush_r+0x74>)
 800977c:	429c      	cmp	r4, r3
 800977e:	bf08      	it	eq
 8009780:	68ec      	ldreq	r4, [r5, #12]
 8009782:	e7da      	b.n	800973a <_fflush_r+0x22>
 8009784:	0800a114 	.word	0x0800a114
 8009788:	0800a134 	.word	0x0800a134
 800978c:	0800a0f4 	.word	0x0800a0f4

08009790 <std>:
 8009790:	2300      	movs	r3, #0
 8009792:	b510      	push	{r4, lr}
 8009794:	4604      	mov	r4, r0
 8009796:	e9c0 3300 	strd	r3, r3, [r0]
 800979a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800979e:	6083      	str	r3, [r0, #8]
 80097a0:	8181      	strh	r1, [r0, #12]
 80097a2:	6643      	str	r3, [r0, #100]	; 0x64
 80097a4:	81c2      	strh	r2, [r0, #14]
 80097a6:	6183      	str	r3, [r0, #24]
 80097a8:	4619      	mov	r1, r3
 80097aa:	2208      	movs	r2, #8
 80097ac:	305c      	adds	r0, #92	; 0x5c
 80097ae:	f7fb fe15 	bl	80053dc <memset>
 80097b2:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <std+0x38>)
 80097b4:	6263      	str	r3, [r4, #36]	; 0x24
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <std+0x3c>)
 80097b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80097ba:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <std+0x40>)
 80097bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097be:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <std+0x44>)
 80097c0:	6224      	str	r4, [r4, #32]
 80097c2:	6323      	str	r3, [r4, #48]	; 0x30
 80097c4:	bd10      	pop	{r4, pc}
 80097c6:	bf00      	nop
 80097c8:	08009ae1 	.word	0x08009ae1
 80097cc:	08009b03 	.word	0x08009b03
 80097d0:	08009b3b 	.word	0x08009b3b
 80097d4:	08009b5f 	.word	0x08009b5f

080097d8 <_cleanup_r>:
 80097d8:	4901      	ldr	r1, [pc, #4]	; (80097e0 <_cleanup_r+0x8>)
 80097da:	f000 b8af 	b.w	800993c <_fwalk_reent>
 80097de:	bf00      	nop
 80097e0:	08009719 	.word	0x08009719

080097e4 <__sfmoreglue>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	1e4a      	subs	r2, r1, #1
 80097e8:	2568      	movs	r5, #104	; 0x68
 80097ea:	4355      	muls	r5, r2
 80097ec:	460e      	mov	r6, r1
 80097ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097f2:	f7ff fa7f 	bl	8008cf4 <_malloc_r>
 80097f6:	4604      	mov	r4, r0
 80097f8:	b140      	cbz	r0, 800980c <__sfmoreglue+0x28>
 80097fa:	2100      	movs	r1, #0
 80097fc:	e9c0 1600 	strd	r1, r6, [r0]
 8009800:	300c      	adds	r0, #12
 8009802:	60a0      	str	r0, [r4, #8]
 8009804:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009808:	f7fb fde8 	bl	80053dc <memset>
 800980c:	4620      	mov	r0, r4
 800980e:	bd70      	pop	{r4, r5, r6, pc}

08009810 <__sfp_lock_acquire>:
 8009810:	4801      	ldr	r0, [pc, #4]	; (8009818 <__sfp_lock_acquire+0x8>)
 8009812:	f000 b8b3 	b.w	800997c <__retarget_lock_acquire_recursive>
 8009816:	bf00      	nop
 8009818:	20000464 	.word	0x20000464

0800981c <__sfp_lock_release>:
 800981c:	4801      	ldr	r0, [pc, #4]	; (8009824 <__sfp_lock_release+0x8>)
 800981e:	f000 b8ae 	b.w	800997e <__retarget_lock_release_recursive>
 8009822:	bf00      	nop
 8009824:	20000464 	.word	0x20000464

08009828 <__sinit_lock_acquire>:
 8009828:	4801      	ldr	r0, [pc, #4]	; (8009830 <__sinit_lock_acquire+0x8>)
 800982a:	f000 b8a7 	b.w	800997c <__retarget_lock_acquire_recursive>
 800982e:	bf00      	nop
 8009830:	2000045f 	.word	0x2000045f

08009834 <__sinit_lock_release>:
 8009834:	4801      	ldr	r0, [pc, #4]	; (800983c <__sinit_lock_release+0x8>)
 8009836:	f000 b8a2 	b.w	800997e <__retarget_lock_release_recursive>
 800983a:	bf00      	nop
 800983c:	2000045f 	.word	0x2000045f

08009840 <__sinit>:
 8009840:	b510      	push	{r4, lr}
 8009842:	4604      	mov	r4, r0
 8009844:	f7ff fff0 	bl	8009828 <__sinit_lock_acquire>
 8009848:	69a3      	ldr	r3, [r4, #24]
 800984a:	b11b      	cbz	r3, 8009854 <__sinit+0x14>
 800984c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009850:	f7ff bff0 	b.w	8009834 <__sinit_lock_release>
 8009854:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009858:	6523      	str	r3, [r4, #80]	; 0x50
 800985a:	4b13      	ldr	r3, [pc, #76]	; (80098a8 <__sinit+0x68>)
 800985c:	4a13      	ldr	r2, [pc, #76]	; (80098ac <__sinit+0x6c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	62a2      	str	r2, [r4, #40]	; 0x28
 8009862:	42a3      	cmp	r3, r4
 8009864:	bf04      	itt	eq
 8009866:	2301      	moveq	r3, #1
 8009868:	61a3      	streq	r3, [r4, #24]
 800986a:	4620      	mov	r0, r4
 800986c:	f000 f820 	bl	80098b0 <__sfp>
 8009870:	6060      	str	r0, [r4, #4]
 8009872:	4620      	mov	r0, r4
 8009874:	f000 f81c 	bl	80098b0 <__sfp>
 8009878:	60a0      	str	r0, [r4, #8]
 800987a:	4620      	mov	r0, r4
 800987c:	f000 f818 	bl	80098b0 <__sfp>
 8009880:	2200      	movs	r2, #0
 8009882:	60e0      	str	r0, [r4, #12]
 8009884:	2104      	movs	r1, #4
 8009886:	6860      	ldr	r0, [r4, #4]
 8009888:	f7ff ff82 	bl	8009790 <std>
 800988c:	68a0      	ldr	r0, [r4, #8]
 800988e:	2201      	movs	r2, #1
 8009890:	2109      	movs	r1, #9
 8009892:	f7ff ff7d 	bl	8009790 <std>
 8009896:	68e0      	ldr	r0, [r4, #12]
 8009898:	2202      	movs	r2, #2
 800989a:	2112      	movs	r1, #18
 800989c:	f7ff ff78 	bl	8009790 <std>
 80098a0:	2301      	movs	r3, #1
 80098a2:	61a3      	str	r3, [r4, #24]
 80098a4:	e7d2      	b.n	800984c <__sinit+0xc>
 80098a6:	bf00      	nop
 80098a8:	08009c9c 	.word	0x08009c9c
 80098ac:	080097d9 	.word	0x080097d9

080098b0 <__sfp>:
 80098b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b2:	4607      	mov	r7, r0
 80098b4:	f7ff ffac 	bl	8009810 <__sfp_lock_acquire>
 80098b8:	4b1e      	ldr	r3, [pc, #120]	; (8009934 <__sfp+0x84>)
 80098ba:	681e      	ldr	r6, [r3, #0]
 80098bc:	69b3      	ldr	r3, [r6, #24]
 80098be:	b913      	cbnz	r3, 80098c6 <__sfp+0x16>
 80098c0:	4630      	mov	r0, r6
 80098c2:	f7ff ffbd 	bl	8009840 <__sinit>
 80098c6:	3648      	adds	r6, #72	; 0x48
 80098c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	d503      	bpl.n	80098d8 <__sfp+0x28>
 80098d0:	6833      	ldr	r3, [r6, #0]
 80098d2:	b30b      	cbz	r3, 8009918 <__sfp+0x68>
 80098d4:	6836      	ldr	r6, [r6, #0]
 80098d6:	e7f7      	b.n	80098c8 <__sfp+0x18>
 80098d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098dc:	b9d5      	cbnz	r5, 8009914 <__sfp+0x64>
 80098de:	4b16      	ldr	r3, [pc, #88]	; (8009938 <__sfp+0x88>)
 80098e0:	60e3      	str	r3, [r4, #12]
 80098e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098e6:	6665      	str	r5, [r4, #100]	; 0x64
 80098e8:	f000 f847 	bl	800997a <__retarget_lock_init_recursive>
 80098ec:	f7ff ff96 	bl	800981c <__sfp_lock_release>
 80098f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098f8:	6025      	str	r5, [r4, #0]
 80098fa:	61a5      	str	r5, [r4, #24]
 80098fc:	2208      	movs	r2, #8
 80098fe:	4629      	mov	r1, r5
 8009900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009904:	f7fb fd6a 	bl	80053dc <memset>
 8009908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800990c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009910:	4620      	mov	r0, r4
 8009912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009914:	3468      	adds	r4, #104	; 0x68
 8009916:	e7d9      	b.n	80098cc <__sfp+0x1c>
 8009918:	2104      	movs	r1, #4
 800991a:	4638      	mov	r0, r7
 800991c:	f7ff ff62 	bl	80097e4 <__sfmoreglue>
 8009920:	4604      	mov	r4, r0
 8009922:	6030      	str	r0, [r6, #0]
 8009924:	2800      	cmp	r0, #0
 8009926:	d1d5      	bne.n	80098d4 <__sfp+0x24>
 8009928:	f7ff ff78 	bl	800981c <__sfp_lock_release>
 800992c:	230c      	movs	r3, #12
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	e7ee      	b.n	8009910 <__sfp+0x60>
 8009932:	bf00      	nop
 8009934:	08009c9c 	.word	0x08009c9c
 8009938:	ffff0001 	.word	0xffff0001

0800993c <_fwalk_reent>:
 800993c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009940:	4606      	mov	r6, r0
 8009942:	4688      	mov	r8, r1
 8009944:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009948:	2700      	movs	r7, #0
 800994a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800994e:	f1b9 0901 	subs.w	r9, r9, #1
 8009952:	d505      	bpl.n	8009960 <_fwalk_reent+0x24>
 8009954:	6824      	ldr	r4, [r4, #0]
 8009956:	2c00      	cmp	r4, #0
 8009958:	d1f7      	bne.n	800994a <_fwalk_reent+0xe>
 800995a:	4638      	mov	r0, r7
 800995c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009960:	89ab      	ldrh	r3, [r5, #12]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d907      	bls.n	8009976 <_fwalk_reent+0x3a>
 8009966:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800996a:	3301      	adds	r3, #1
 800996c:	d003      	beq.n	8009976 <_fwalk_reent+0x3a>
 800996e:	4629      	mov	r1, r5
 8009970:	4630      	mov	r0, r6
 8009972:	47c0      	blx	r8
 8009974:	4307      	orrs	r7, r0
 8009976:	3568      	adds	r5, #104	; 0x68
 8009978:	e7e9      	b.n	800994e <_fwalk_reent+0x12>

0800997a <__retarget_lock_init_recursive>:
 800997a:	4770      	bx	lr

0800997c <__retarget_lock_acquire_recursive>:
 800997c:	4770      	bx	lr

0800997e <__retarget_lock_release_recursive>:
 800997e:	4770      	bx	lr

08009980 <__swhatbuf_r>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	460e      	mov	r6, r1
 8009984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009988:	2900      	cmp	r1, #0
 800998a:	b096      	sub	sp, #88	; 0x58
 800998c:	4614      	mov	r4, r2
 800998e:	461d      	mov	r5, r3
 8009990:	da07      	bge.n	80099a2 <__swhatbuf_r+0x22>
 8009992:	2300      	movs	r3, #0
 8009994:	602b      	str	r3, [r5, #0]
 8009996:	89b3      	ldrh	r3, [r6, #12]
 8009998:	061a      	lsls	r2, r3, #24
 800999a:	d410      	bmi.n	80099be <__swhatbuf_r+0x3e>
 800999c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099a0:	e00e      	b.n	80099c0 <__swhatbuf_r+0x40>
 80099a2:	466a      	mov	r2, sp
 80099a4:	f000 f902 	bl	8009bac <_fstat_r>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	dbf2      	blt.n	8009992 <__swhatbuf_r+0x12>
 80099ac:	9a01      	ldr	r2, [sp, #4]
 80099ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099b6:	425a      	negs	r2, r3
 80099b8:	415a      	adcs	r2, r3
 80099ba:	602a      	str	r2, [r5, #0]
 80099bc:	e7ee      	b.n	800999c <__swhatbuf_r+0x1c>
 80099be:	2340      	movs	r3, #64	; 0x40
 80099c0:	2000      	movs	r0, #0
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	b016      	add	sp, #88	; 0x58
 80099c6:	bd70      	pop	{r4, r5, r6, pc}

080099c8 <__smakebuf_r>:
 80099c8:	898b      	ldrh	r3, [r1, #12]
 80099ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099cc:	079d      	lsls	r5, r3, #30
 80099ce:	4606      	mov	r6, r0
 80099d0:	460c      	mov	r4, r1
 80099d2:	d507      	bpl.n	80099e4 <__smakebuf_r+0x1c>
 80099d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	6123      	str	r3, [r4, #16]
 80099dc:	2301      	movs	r3, #1
 80099de:	6163      	str	r3, [r4, #20]
 80099e0:	b002      	add	sp, #8
 80099e2:	bd70      	pop	{r4, r5, r6, pc}
 80099e4:	ab01      	add	r3, sp, #4
 80099e6:	466a      	mov	r2, sp
 80099e8:	f7ff ffca 	bl	8009980 <__swhatbuf_r>
 80099ec:	9900      	ldr	r1, [sp, #0]
 80099ee:	4605      	mov	r5, r0
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff f97f 	bl	8008cf4 <_malloc_r>
 80099f6:	b948      	cbnz	r0, 8009a0c <__smakebuf_r+0x44>
 80099f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099fc:	059a      	lsls	r2, r3, #22
 80099fe:	d4ef      	bmi.n	80099e0 <__smakebuf_r+0x18>
 8009a00:	f023 0303 	bic.w	r3, r3, #3
 8009a04:	f043 0302 	orr.w	r3, r3, #2
 8009a08:	81a3      	strh	r3, [r4, #12]
 8009a0a:	e7e3      	b.n	80099d4 <__smakebuf_r+0xc>
 8009a0c:	4b0d      	ldr	r3, [pc, #52]	; (8009a44 <__smakebuf_r+0x7c>)
 8009a0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	6020      	str	r0, [r4, #0]
 8009a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a18:	81a3      	strh	r3, [r4, #12]
 8009a1a:	9b00      	ldr	r3, [sp, #0]
 8009a1c:	6163      	str	r3, [r4, #20]
 8009a1e:	9b01      	ldr	r3, [sp, #4]
 8009a20:	6120      	str	r0, [r4, #16]
 8009a22:	b15b      	cbz	r3, 8009a3c <__smakebuf_r+0x74>
 8009a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f000 f8d1 	bl	8009bd0 <_isatty_r>
 8009a2e:	b128      	cbz	r0, 8009a3c <__smakebuf_r+0x74>
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	f023 0303 	bic.w	r3, r3, #3
 8009a36:	f043 0301 	orr.w	r3, r3, #1
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	89a0      	ldrh	r0, [r4, #12]
 8009a3e:	4305      	orrs	r5, r0
 8009a40:	81a5      	strh	r5, [r4, #12]
 8009a42:	e7cd      	b.n	80099e0 <__smakebuf_r+0x18>
 8009a44:	080097d9 	.word	0x080097d9

08009a48 <_malloc_usable_size_r>:
 8009a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a4c:	1f18      	subs	r0, r3, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfbc      	itt	lt
 8009a52:	580b      	ldrlt	r3, [r1, r0]
 8009a54:	18c0      	addlt	r0, r0, r3
 8009a56:	4770      	bx	lr

08009a58 <_raise_r>:
 8009a58:	291f      	cmp	r1, #31
 8009a5a:	b538      	push	{r3, r4, r5, lr}
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	460d      	mov	r5, r1
 8009a60:	d904      	bls.n	8009a6c <_raise_r+0x14>
 8009a62:	2316      	movs	r3, #22
 8009a64:	6003      	str	r3, [r0, #0]
 8009a66:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a6e:	b112      	cbz	r2, 8009a76 <_raise_r+0x1e>
 8009a70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a74:	b94b      	cbnz	r3, 8009a8a <_raise_r+0x32>
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 f830 	bl	8009adc <_getpid_r>
 8009a7c:	462a      	mov	r2, r5
 8009a7e:	4601      	mov	r1, r0
 8009a80:	4620      	mov	r0, r4
 8009a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a86:	f000 b817 	b.w	8009ab8 <_kill_r>
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d00a      	beq.n	8009aa4 <_raise_r+0x4c>
 8009a8e:	1c59      	adds	r1, r3, #1
 8009a90:	d103      	bne.n	8009a9a <_raise_r+0x42>
 8009a92:	2316      	movs	r3, #22
 8009a94:	6003      	str	r3, [r0, #0]
 8009a96:	2001      	movs	r0, #1
 8009a98:	e7e7      	b.n	8009a6a <_raise_r+0x12>
 8009a9a:	2400      	movs	r4, #0
 8009a9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	4798      	blx	r3
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e7e0      	b.n	8009a6a <_raise_r+0x12>

08009aa8 <raise>:
 8009aa8:	4b02      	ldr	r3, [pc, #8]	; (8009ab4 <raise+0xc>)
 8009aaa:	4601      	mov	r1, r0
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	f7ff bfd3 	b.w	8009a58 <_raise_r>
 8009ab2:	bf00      	nop
 8009ab4:	20000010 	.word	0x20000010

08009ab8 <_kill_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4d07      	ldr	r5, [pc, #28]	; (8009ad8 <_kill_r+0x20>)
 8009abc:	2300      	movs	r3, #0
 8009abe:	4604      	mov	r4, r0
 8009ac0:	4608      	mov	r0, r1
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	f7f7 ff5d 	bl	8001984 <_kill>
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	d102      	bne.n	8009ad4 <_kill_r+0x1c>
 8009ace:	682b      	ldr	r3, [r5, #0]
 8009ad0:	b103      	cbz	r3, 8009ad4 <_kill_r+0x1c>
 8009ad2:	6023      	str	r3, [r4, #0]
 8009ad4:	bd38      	pop	{r3, r4, r5, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20000458 	.word	0x20000458

08009adc <_getpid_r>:
 8009adc:	f7f7 bf4a 	b.w	8001974 <_getpid>

08009ae0 <__sread>:
 8009ae0:	b510      	push	{r4, lr}
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae8:	f000 f894 	bl	8009c14 <_read_r>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	bfab      	itete	ge
 8009af0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009af2:	89a3      	ldrhlt	r3, [r4, #12]
 8009af4:	181b      	addge	r3, r3, r0
 8009af6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009afa:	bfac      	ite	ge
 8009afc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009afe:	81a3      	strhlt	r3, [r4, #12]
 8009b00:	bd10      	pop	{r4, pc}

08009b02 <__swrite>:
 8009b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b06:	461f      	mov	r7, r3
 8009b08:	898b      	ldrh	r3, [r1, #12]
 8009b0a:	05db      	lsls	r3, r3, #23
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	460c      	mov	r4, r1
 8009b10:	4616      	mov	r6, r2
 8009b12:	d505      	bpl.n	8009b20 <__swrite+0x1e>
 8009b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b18:	2302      	movs	r3, #2
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f000 f868 	bl	8009bf0 <_lseek_r>
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	463b      	mov	r3, r7
 8009b30:	4628      	mov	r0, r5
 8009b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b36:	f000 b817 	b.w	8009b68 <_write_r>

08009b3a <__sseek>:
 8009b3a:	b510      	push	{r4, lr}
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b42:	f000 f855 	bl	8009bf0 <_lseek_r>
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	bf15      	itete	ne
 8009b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b56:	81a3      	strheq	r3, [r4, #12]
 8009b58:	bf18      	it	ne
 8009b5a:	81a3      	strhne	r3, [r4, #12]
 8009b5c:	bd10      	pop	{r4, pc}

08009b5e <__sclose>:
 8009b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b62:	f000 b813 	b.w	8009b8c <_close_r>
	...

08009b68 <_write_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d07      	ldr	r5, [pc, #28]	; (8009b88 <_write_r+0x20>)
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	4608      	mov	r0, r1
 8009b70:	4611      	mov	r1, r2
 8009b72:	2200      	movs	r2, #0
 8009b74:	602a      	str	r2, [r5, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	f7f7 ff3b 	bl	80019f2 <_write>
 8009b7c:	1c43      	adds	r3, r0, #1
 8009b7e:	d102      	bne.n	8009b86 <_write_r+0x1e>
 8009b80:	682b      	ldr	r3, [r5, #0]
 8009b82:	b103      	cbz	r3, 8009b86 <_write_r+0x1e>
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	bd38      	pop	{r3, r4, r5, pc}
 8009b88:	20000458 	.word	0x20000458

08009b8c <_close_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4d06      	ldr	r5, [pc, #24]	; (8009ba8 <_close_r+0x1c>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	4604      	mov	r4, r0
 8009b94:	4608      	mov	r0, r1
 8009b96:	602b      	str	r3, [r5, #0]
 8009b98:	f7f7 ff47 	bl	8001a2a <_close>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_close_r+0x1a>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_close_r+0x1a>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	20000458 	.word	0x20000458

08009bac <_fstat_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4d07      	ldr	r5, [pc, #28]	; (8009bcc <_fstat_r+0x20>)
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	602b      	str	r3, [r5, #0]
 8009bba:	f7f7 ff42 	bl	8001a42 <_fstat>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	d102      	bne.n	8009bc8 <_fstat_r+0x1c>
 8009bc2:	682b      	ldr	r3, [r5, #0]
 8009bc4:	b103      	cbz	r3, 8009bc8 <_fstat_r+0x1c>
 8009bc6:	6023      	str	r3, [r4, #0]
 8009bc8:	bd38      	pop	{r3, r4, r5, pc}
 8009bca:	bf00      	nop
 8009bcc:	20000458 	.word	0x20000458

08009bd0 <_isatty_r>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	4d06      	ldr	r5, [pc, #24]	; (8009bec <_isatty_r+0x1c>)
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	4608      	mov	r0, r1
 8009bda:	602b      	str	r3, [r5, #0]
 8009bdc:	f7f7 ff41 	bl	8001a62 <_isatty>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	d102      	bne.n	8009bea <_isatty_r+0x1a>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	b103      	cbz	r3, 8009bea <_isatty_r+0x1a>
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	20000458 	.word	0x20000458

08009bf0 <_lseek_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4d07      	ldr	r5, [pc, #28]	; (8009c10 <_lseek_r+0x20>)
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	602a      	str	r2, [r5, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f7f7 ff3a 	bl	8001a78 <_lseek>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d102      	bne.n	8009c0e <_lseek_r+0x1e>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	b103      	cbz	r3, 8009c0e <_lseek_r+0x1e>
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	20000458 	.word	0x20000458

08009c14 <_read_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4d07      	ldr	r5, [pc, #28]	; (8009c34 <_read_r+0x20>)
 8009c18:	4604      	mov	r4, r0
 8009c1a:	4608      	mov	r0, r1
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	2200      	movs	r2, #0
 8009c20:	602a      	str	r2, [r5, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	f7f7 fec8 	bl	80019b8 <_read>
 8009c28:	1c43      	adds	r3, r0, #1
 8009c2a:	d102      	bne.n	8009c32 <_read_r+0x1e>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	b103      	cbz	r3, 8009c32 <_read_r+0x1e>
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	20000458 	.word	0x20000458

08009c38 <_init>:
 8009c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3a:	bf00      	nop
 8009c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c3e:	bc08      	pop	{r3}
 8009c40:	469e      	mov	lr, r3
 8009c42:	4770      	bx	lr

08009c44 <_fini>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	bf00      	nop
 8009c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4a:	bc08      	pop	{r3}
 8009c4c:	469e      	mov	lr, r3
 8009c4e:	4770      	bx	lr
